/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_StructureType swig_types[0]
#define SWIGTYPE_p_allocator_type swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_difference_type swig_types[3]
#define SWIGTYPE_p_double swig_types[4]
#define SWIGTYPE_p_fastjet__AreaDefinition swig_types[5]
#define SWIGTYPE_p_fastjet__BackgroundEstimatorBase swig_types[6]
#define SWIGTYPE_p_fastjet__BackgroundJetPtDensity swig_types[7]
#define SWIGTYPE_p_fastjet__BackgroundJetPtMDensity swig_types[8]
#define SWIGTYPE_p_fastjet__BackgroundJetScalarPtDensity swig_types[9]
#define SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial swig_types[10]
#define SWIGTYPE_p_fastjet__BasicRandomT_double_t swig_types[11]
#define SWIGTYPE_p_fastjet__BasicRandomT_int_t swig_types[12]
#define SWIGTYPE_p_fastjet__Boost swig_types[13]
#define SWIGTYPE_p_fastjet__CASubJetTagger swig_types[14]
#define SWIGTYPE_p_fastjet__CASubJetTaggerStructure swig_types[15]
#define SWIGTYPE_p_fastjet__ClusterSequence swig_types[16]
#define SWIGTYPE_p_fastjet__ClusterSequence1GhostPassiveArea swig_types[17]
#define SWIGTYPE_p_fastjet__ClusterSequenceActiveArea swig_types[18]
#define SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts swig_types[19]
#define SWIGTYPE_p_fastjet__ClusterSequenceArea swig_types[20]
#define SWIGTYPE_p_fastjet__ClusterSequenceAreaBase swig_types[21]
#define SWIGTYPE_p_fastjet__ClusterSequencePassiveArea swig_types[22]
#define SWIGTYPE_p_fastjet__ClusterSequenceStructure swig_types[23]
#define SWIGTYPE_p_fastjet__ClusterSequenceVoronoiArea swig_types[24]
#define SWIGTYPE_p_fastjet__ClusterSequence__Extras swig_types[25]
#define SWIGTYPE_p_fastjet__CompositeJetStructure swig_types[26]
#define SWIGTYPE_p_fastjet__Error swig_types[27]
#define SWIGTYPE_p_fastjet__Filter swig_types[28]
#define SWIGTYPE_p_fastjet__FilterStructure swig_types[29]
#define SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t swig_types[30]
#define SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t swig_types[31]
#define SWIGTYPE_p_fastjet__GhostedAreaSpec swig_types[32]
#define SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator swig_types[33]
#define SWIGTYPE_p_fastjet__IndexedSortHelper swig_types[34]
#define SWIGTYPE_p_fastjet__InternalError swig_types[35]
#define SWIGTYPE_p_fastjet__JHTopTagger swig_types[36]
#define SWIGTYPE_p_fastjet__JHTopTaggerStructure swig_types[37]
#define SWIGTYPE_p_fastjet__JetAlgorithm swig_types[38]
#define SWIGTYPE_p_fastjet__JetDefinition swig_types[39]
#define SWIGTYPE_p_fastjet__JetDefinition__Plugin swig_types[40]
#define SWIGTYPE_p_fastjet__JetDefinition__Recombiner swig_types[41]
#define SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator swig_types[42]
#define SWIGTYPE_p_fastjet__LimitedWarning swig_types[43]
#define SWIGTYPE_p_fastjet__MassDropTagger swig_types[44]
#define SWIGTYPE_p_fastjet__MassDropTaggerStructure swig_types[45]
#define SWIGTYPE_p_fastjet__Pruner swig_types[46]
#define SWIGTYPE_p_fastjet__PrunerStructure swig_types[47]
#define SWIGTYPE_p_fastjet__PruningPlugin swig_types[48]
#define SWIGTYPE_p_fastjet__PruningRecombiner swig_types[49]
#define SWIGTYPE_p_fastjet__PseudoJet swig_types[50]
#define SWIGTYPE_p_fastjet__PseudoJetStructureBase swig_types[51]
#define SWIGTYPE_p_fastjet__PseudoJet__UserInfoBase swig_types[52]
#define SWIGTYPE_p_fastjet__RangeDefinition swig_types[53]
#define SWIGTYPE_p_fastjet__Recluster swig_types[54]
#define SWIGTYPE_p_fastjet__RecombinerPython swig_types[55]
#define SWIGTYPE_p_fastjet__RectangularGrid swig_types[56]
#define SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger swig_types[57]
#define SWIGTYPE_p_fastjet__RestFrameNSubjettinessTaggerStructure swig_types[58]
#define SWIGTYPE_p_fastjet__Selector swig_types[59]
#define SWIGTYPE_p_fastjet__SelectorWorker swig_types[60]
#define SWIGTYPE_p_fastjet__SelectorWorkerPython swig_types[61]
#define SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t swig_types[62]
#define SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t swig_types[63]
#define SWIGTYPE_p_fastjet__SharedPtrT_fastjet__SelectorWorker_t swig_types[64]
#define SWIGTYPE_p_fastjet__Subtractor swig_types[65]
#define SWIGTYPE_p_fastjet__TilingBase swig_types[66]
#define SWIGTYPE_p_fastjet__TopTaggerBase swig_types[67]
#define SWIGTYPE_p_fastjet__TopTaggerBaseStructure swig_types[68]
#define SWIGTYPE_p_fastjet__Transformer swig_types[69]
#define SWIGTYPE_p_fastjet__Unboost swig_types[70]
#define SWIGTYPE_p_fastjet__UserInfoPython swig_types[71]
#define SWIGTYPE_p_fastjet__VoronoiAreaSpec swig_types[72]
#define SWIGTYPE_p_fastjet___NoInfo swig_types[73]
#define SWIGTYPE_p_int swig_types[74]
#define SWIGTYPE_p_p_PyObject swig_types[75]
#define SWIGTYPE_p_p_fastjet__PseudoJet swig_types[76]
#define SWIGTYPE_p_size_type swig_types[77]
#define SWIGTYPE_p_std__allocatorT_fastjet__PseudoJet_t swig_types[78]
#define SWIGTYPE_p_std__invalid_argument swig_types[79]
#define SWIGTYPE_p_std__ostream swig_types[80]
#define SWIGTYPE_p_std__valarrayT_double_t swig_types[81]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[82]
#define SWIGTYPE_p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t swig_types[83]
#define SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t swig_types[84]
#define SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t swig_types[85]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[86]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[87]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[88]
#define SWIGTYPE_p_value_type swig_types[89]
static swig_type_info *swig_types[91];
static swig_module_info swig_module = {swig_types, 90, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _fastjet.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__fastjet

#else
#  define SWIG_init    init_fastjet

#endif
#define SWIG_name    "_fastjet"

#define SWIGVERSION 0x030010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include "fastjet/config_auto.h"
#include "fastjet/config.h"
#include "fastjet/internal/base.hh"
#include "fastjet/internal/numconsts.hh"
#include "fastjet/internal/IsBase.hh"
#include "fastjet/internal/deprecated.hh"
#include "fastjet/internal/BasicRandom.hh"
#include "fastjet/SharedPtr.hh"
#include "fastjet/LimitedWarning.hh"
#include "fastjet/Error.hh"
#include "fastjet/PseudoJetStructureBase.hh"
#include "fastjet/PseudoJet.hh"
#include "fastjet/FunctionOfPseudoJet.hh"
#include "fastjet/RangeDefinition.hh"
#include "fastjet/Selector.hh"
#include "fastjet/JetDefinition.hh"
#include "fastjet/CompositeJetStructure.hh"
#include "fastjet/WrappedStructure.hh"
#include "fastjet/ClusterSequenceStructure.hh"
#include "fastjet/ClusterSequence.hh"
#include "fastjet/RectangularGrid.hh"
#include "fastjet/NNBase.hh"
#include "fastjet/NNH.hh"
#include "fastjet/NNFJN2Plain.hh"
#include "fastjet/NNFJN2Tiled.hh"
#include "fastjet/GhostedAreaSpec.hh"
#include "fastjet/AreaDefinition.hh"
#include "fastjet/ClusterSequenceAreaBase.hh"
#include "fastjet/ClusterSequenceActiveAreaExplicitGhosts.hh"
#include "fastjet/ClusterSequenceActiveArea.hh"
#include "fastjet/ClusterSequence1GhostPassiveArea.hh"
#include "fastjet/ClusterSequencePassiveArea.hh"
#include "fastjet/ClusterSequenceVoronoiArea.hh"
#include "fastjet/ClusterSequenceArea.hh"
#include "FastJetPythonExtensions.hh"
  

namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type>
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits< fastjet::PseudoJet > {
      typedef pointer_category category;
      static const char* type_name() { return"fastjet::PseudoJet"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< fastjet::PseudoJet, std::allocator< fastjet::PseudoJet > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "fastjet::PseudoJet" "," "std::allocator< fastjet::PseudoJet >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_fastjet_PseudoJet_Sg__iterator(std::vector< fastjet::PseudoJet > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_fastjet_PseudoJet_Sg____nonzero__(std::vector< fastjet::PseudoJet > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_fastjet_PseudoJet_Sg____bool__(std::vector< fastjet::PseudoJet > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< fastjet::PseudoJet >::size_type std_vector_Sl_fastjet_PseudoJet_Sg____len__(std::vector< fastjet::PseudoJet > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *std_vector_Sl_fastjet_PseudoJet_Sg____getslice__(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setslice____SWIG_0(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >());
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setslice____SWIG_1(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::difference_type j,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____delslice__(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____delitem____SWIG_0(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *std_vector_Sl_fastjet_PseudoJet_Sg____getitem____SWIG_0(std::vector< fastjet::PseudoJet > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type id = i;
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_0(std::vector< fastjet::PseudoJet > *self,PySliceObject *slice,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type id = i;
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_1(std::vector< fastjet::PseudoJet > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type id = i;
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____delitem____SWIG_1(std::vector< fastjet::PseudoJet > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type id = i;
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< fastjet::PseudoJet >::value_type const &std_vector_Sl_fastjet_PseudoJet_Sg____getitem____SWIG_1(std::vector< fastjet::PseudoJet > const *self,std::vector< fastjet::PseudoJet >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_2(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::difference_type i,std::vector< fastjet::PseudoJet >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< fastjet::PseudoJet >::value_type std_vector_Sl_fastjet_PseudoJet_Sg__pop(std::vector< fastjet::PseudoJet > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg__append(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< fastjet::PseudoJet >::iterator std_vector_Sl_fastjet_PseudoJet_Sg__erase__SWIG_0(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< fastjet::PseudoJet >::iterator std_vector_Sl_fastjet_PseudoJet_Sg__erase__SWIG_1(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::iterator first,std::vector< fastjet::PseudoJet >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< fastjet::PseudoJet >::iterator std_vector_Sl_fastjet_PseudoJet_Sg__insert__SWIG_0(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::iterator pos,std::vector< fastjet::PseudoJet >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_fastjet_PseudoJet_Sg__insert__SWIG_1(std::vector< fastjet::PseudoJet > *self,std::vector< fastjet::PseudoJet >::iterator pos,std::vector< fastjet::PseudoJet >::size_type n,std::vector< fastjet::PseudoJet >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN std::string fastjet_Error___str__(fastjet::Error const *self){return self->description();}
SWIGINTERN std::string fastjet_PseudoJet___str__(fastjet::PseudoJet *self){
    const unsigned int len_max=4096;
    char temp[len_max];
    snprintf(temp,len_max, "[%f, %f, %f, %f]",self->px(), self->py(), self->pz(), self->E());
    return std::string(temp);
  }
SWIGINTERN void fastjet_PseudoJet_set_python_info(fastjet::PseudoJet *self,PyObject *pyobj){
    fastjet::UserInfoPython * new_python_info = new fastjet::UserInfoPython(pyobj);
    self->set_user_info(new_python_info);
  }
SWIGINTERN PyObject *fastjet_PseudoJet_python_info(fastjet::PseudoJet const *self){
    return self->user_info<fastjet::UserInfoPython>().get_pyobj();
  }
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___add__(fastjet::PseudoJet *self,fastjet::PseudoJet const &p){return *(self) + p;}
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___sub__(fastjet::PseudoJet *self,fastjet::PseudoJet const &p){return *(self) - p;}
SWIGINTERN bool fastjet_PseudoJet___eq____SWIG_0(fastjet::PseudoJet *self,fastjet::PseudoJet const &p){return *(self) == p;}
SWIGINTERN bool fastjet_PseudoJet___ne____SWIG_0(fastjet::PseudoJet *self,fastjet::PseudoJet const &p){return *(self) != p;}
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___mul__(fastjet::PseudoJet *self,double x){return *(self) * x;}
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___rmul__(fastjet::PseudoJet *self,double x){return *(self) * x;}
SWIGINTERN fastjet::PseudoJet fastjet_PseudoJet___div__(fastjet::PseudoJet *self,double x){return *(self) / x;}
SWIGINTERN bool fastjet_PseudoJet___eq____SWIG_1(fastjet::PseudoJet *self,double x){return *(self) == x;}
SWIGINTERN bool fastjet_PseudoJet___ne____SWIG_1(fastjet::PseudoJet *self,double x){return *(self) != x;}

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}

SWIGINTERN std::string fastjet_Selector___str____SWIG_0(fastjet::Selector const *self){return self->description();}
SWIGINTERN std::string fastjet_Selector___str____SWIG_1(fastjet::Selector *self){return self->description();}
SWIGINTERN fastjet::Selector fastjet_Selector___mul__(fastjet::Selector *self,fastjet::Selector const &other){return *(self) *  other;}
SWIGINTERN fastjet::Selector fastjet_Selector___and__(fastjet::Selector *self,fastjet::Selector const &other){return *(self) && other;}
SWIGINTERN fastjet::Selector fastjet_Selector___or__(fastjet::Selector *self,fastjet::Selector const &other){return *(self) || other;}
SWIGINTERN fastjet::Selector fastjet_Selector___invert__(fastjet::Selector *self){return !(*(self));}

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::string fastjet_JetDefinition___str__(fastjet::JetDefinition const *self){return self->description();}
SWIGINTERN std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > fastjet_JetDefinition___call__(fastjet::JetDefinition *self,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &particles){
    return (*self)(particles);
  }
SWIGINTERN void fastjet_JetDefinition_set_python_recombiner(fastjet::JetDefinition *self,PyObject *pyobj){
    fastjet::RecombinerPython *new_python_recombiner = new fastjet::RecombinerPython(pyobj);
    self->set_recombiner(new_python_recombiner);
    self->delete_recombiner_when_unused();
  }
SWIGINTERN std::string fastjet_RectangularGrid___str__(fastjet::RectangularGrid const *self){return self->description();}
SWIGINTERN std::string fastjet_GhostedAreaSpec___str__(fastjet::GhostedAreaSpec const *self){return self->description();}
SWIGINTERN std::string fastjet_AreaDefinition___str__(fastjet::AreaDefinition const *self){return self->description();}
SWIGINTERN std::string fastjet_FunctionOfPseudoJet_Sl_double_Sg____str__(fastjet::FunctionOfPseudoJet< double > const *self){return self->description();}
SWIGINTERN std::string fastjet_FunctionOfPseudoJet_Sl_fastjet_PseudoJet_Sg____str__(fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *self){return self->description();}

#include "fastjet/tools/Transformer.hh"
#include "fastjet/tools/Boost.hh"
#include "fastjet/tools/Recluster.hh"
#include "fastjet/tools/Filter.hh"
#include "fastjet/tools/Pruner.hh"
#include "fastjet/tools/CASubJetTagger.hh"
#include "fastjet/tools/MassDropTagger.hh"
#include "fastjet/tools/RestFrameNSubjettinessTagger.hh"
#include "fastjet/tools/TopTaggerBase.hh"
#include "fastjet/tools/JHTopTagger.hh"
#include "fastjet/tools/BackgroundEstimatorBase.hh"
#include "fastjet/tools/JetMedianBackgroundEstimator.hh"
#include "fastjet/tools/GridMedianBackgroundEstimator.hh"
#include "fastjet/tools/Subtractor.hh"

SWIGINTERN std::string fastjet_Boost___str__(fastjet::Boost const *self){return self->description();}
SWIGINTERN std::string fastjet_Unboost___str__(fastjet::Unboost const *self){return self->description();}
SWIGINTERN std::string fastjet_Recluster___str__(fastjet::Recluster const *self){return self->description();}
SWIGINTERN std::string fastjet_Filter___str__(fastjet::Filter const *self){return self->description();}
SWIGINTERN std::string fastjet_Pruner___str__(fastjet::Pruner const *self){return self->description();}
SWIGINTERN std::string fastjet_CASubJetTagger___str__(fastjet::CASubJetTagger const *self){return self->description();}
SWIGINTERN std::string fastjet_MassDropTagger___str__(fastjet::MassDropTagger const *self){return self->description();}
SWIGINTERN std::string fastjet_RestFrameNSubjettinessTagger___str__(fastjet::RestFrameNSubjettinessTagger const *self){return self->description();}
SWIGINTERN std::string fastjet_JHTopTagger___str__(fastjet::JHTopTagger const *self){return self->description();}
SWIGINTERN std::string fastjet_Subtractor___str__(fastjet::Subtractor const *self){return self->description();}
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorPJ_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_iterator" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_fastjet_PseudoJet_Sg__iterator(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___nonzero__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_fastjet_PseudoJet_Sg____nonzero__((std::vector< fastjet::PseudoJet > const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___bool__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_fastjet_PseudoJet_Sg____bool__((std::vector< fastjet::PseudoJet > const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___len__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = std_vector_Sl_fastjet_PseudoJet_Sg____len__((std::vector< fastjet::PseudoJet > const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorPJ___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___getslice__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ___getslice__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPJ___getslice__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)std_vector_Sl_fastjet_PseudoJet_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorPJ___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___setslice__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ___setslice__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPJ___setslice__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_fastjet_PseudoJet_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::difference_type arg3 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorPJ___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___setslice__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ___setslice__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPJ___setslice__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val3);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPJ___setslice__" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ___setslice__" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_fastjet_PseudoJet_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectorPJ___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorPJ___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorPJ___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::__setslice__(std::vector< fastjet::PseudoJet >::difference_type,std::vector< fastjet::PseudoJet >::difference_type)\n"
    "    std::vector< fastjet::PseudoJet >::__setslice__(std::vector< fastjet::PseudoJet >::difference_type,std::vector< fastjet::PseudoJet >::difference_type,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPJ___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorPJ___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___delslice__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ___delslice__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPJ___delslice__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_fastjet_PseudoJet_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___delitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ___delitem__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_fastjet_PseudoJet_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___getitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)std_vector_Sl_fastjet_PseudoJet_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorPJ___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___setitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPJ___setitem__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ___setitem__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___setitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___delitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_fastjet_PseudoJet_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorPJ___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorPJ___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorPJ___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::__delitem__(std::vector< fastjet::PseudoJet >::difference_type)\n"
    "    std::vector< fastjet::PseudoJet >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPJ___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___getitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ___getitem__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< fastjet::PseudoJet >::value_type *) &std_vector_Sl_fastjet_PseudoJet_Sg____getitem____SWIG_1((std::vector< fastjet::PseudoJet > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorPJ___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorPJ___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorPJ___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::__getitem__(PySliceObject *)\n"
    "    std::vector< fastjet::PseudoJet >::__getitem__(std::vector< fastjet::PseudoJet >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPJ___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::difference_type arg2 ;
  std::vector< fastjet::PseudoJet >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorPJ___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ___setitem__" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ___setitem__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPJ___setitem__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ___setitem__" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_fastjet_PseudoJet_Sg____setitem____SWIG_2(arg1,arg2,(fastjet::PseudoJet const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorPJ___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorPJ___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorPJ___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorPJ___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::__setitem__(PySliceObject *,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)\n"
    "    std::vector< fastjet::PseudoJet >::__setitem__(PySliceObject *)\n"
    "    std::vector< fastjet::PseudoJet >::__setitem__(std::vector< fastjet::PseudoJet >::difference_type,std::vector< fastjet::PseudoJet >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPJ_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_pop" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_fastjet_PseudoJet_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new std::vector< fastjet::PseudoJet >::value_type(static_cast< const std::vector< fastjet::PseudoJet >::value_type& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_append" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPJ_append" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ_append" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_fastjet_PseudoJet_Sg__append(arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorPJ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorPJ")) SWIG_fail;
  {
    try {
      result = (std::vector< fastjet::PseudoJet > *)new std::vector< fastjet::PseudoJet >();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorPJ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorPJ",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorPJ" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPJ" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< fastjet::PseudoJet > *)new std::vector< fastjet::PseudoJet >((std::vector< fastjet::PseudoJet > const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_empty" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (bool)((std::vector< fastjet::PseudoJet > const *)arg1)->empty();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_size" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = ((std::vector< fastjet::PseudoJet > const *)arg1)->size();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_swap" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPJ_swap" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ_swap" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_begin" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_end" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_rbegin" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_rend" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_clear" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_get_allocator" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = ((std::vector< fastjet::PseudoJet > const *)arg1)->get_allocator();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new std::vector< fastjet::PseudoJet >::allocator_type(static_cast< const std::vector< fastjet::PseudoJet >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_fastjet__PseudoJet_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorPJ__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorPJ",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPJ" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg1 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val1);
  {
    try {
      result = (std::vector< fastjet::PseudoJet > *)new std::vector< fastjet::PseudoJet >(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_pop_back" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_resize" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ_resize" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_erase" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_erase" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_erase" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_fastjet_PseudoJet_Sg__erase__SWIG_0(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::iterator arg2 ;
  std::vector< fastjet::PseudoJet >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorPJ_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_erase" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_erase" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_erase" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_erase" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_erase" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_fastjet_PseudoJet_Sg__erase__SWIG_1(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorPJ_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorPJ_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorPJ_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::erase(std::vector< fastjet::PseudoJet >::iterator)\n"
    "    std::vector< fastjet::PseudoJet >::erase(std::vector< fastjet::PseudoJet >::iterator,std::vector< fastjet::PseudoJet >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vectorPJ__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet >::size_type arg1 ;
  std::vector< fastjet::PseudoJet >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorPJ",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPJ" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg1 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorPJ" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPJ" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp2);
  {
    try {
      result = (std::vector< fastjet::PseudoJet > *)new std::vector< fastjet::PseudoJet >(arg1,(std::vector< fastjet::PseudoJet >::value_type const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorPJ(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorPJ__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorPJ__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorPJ__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorPJ__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_vectorPJ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::vector()\n"
    "    std::vector< fastjet::PseudoJet >::vector(std::vector< fastjet::PseudoJet > const &)\n"
    "    std::vector< fastjet::PseudoJet >::vector(std::vector< fastjet::PseudoJet >::size_type)\n"
    "    std::vector< fastjet::PseudoJet >::vector(std::vector< fastjet::PseudoJet >::size_type,std::vector< fastjet::PseudoJet >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPJ_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_push_back" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPJ_push_back" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ_push_back" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< fastjet::PseudoJet >::value_type const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_front" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (std::vector< fastjet::PseudoJet >::value_type *) &((std::vector< fastjet::PseudoJet > const *)arg1)->front();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_back" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = (std::vector< fastjet::PseudoJet >::value_type *) &((std::vector< fastjet::PseudoJet > const *)arg1)->back();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::size_type arg2 ;
  std::vector< fastjet::PseudoJet >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorPJ_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_assign" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ_assign" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPJ_assign" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ_assign" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< fastjet::PseudoJet >::value_type const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::size_type arg2 ;
  std::vector< fastjet::PseudoJet >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorPJ_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_resize" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ_resize" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPJ_resize" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ_resize" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< fastjet::PseudoJet >::value_type const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorPJ_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorPJ_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorPJ_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::resize(std::vector< fastjet::PseudoJet >::size_type)\n"
    "    std::vector< fastjet::PseudoJet >::resize(std::vector< fastjet::PseudoJet >::size_type,std::vector< fastjet::PseudoJet >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPJ_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::iterator arg2 ;
  std::vector< fastjet::PseudoJet >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorPJ_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_insert" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_insert" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_insert" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPJ_insert" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ_insert" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_fastjet_PseudoJet_Sg__insert__SWIG_0(arg1,arg2,(fastjet::PseudoJet const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< fastjet::PseudoJet >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::iterator arg2 ;
  std::vector< fastjet::PseudoJet >::size_type arg3 ;
  std::vector< fastjet::PseudoJet >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorPJ_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_insert" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_insert" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPJ_insert" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPJ_insert" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg3 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPJ_insert" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPJ_insert" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< fastjet::PseudoJet >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_fastjet_PseudoJet_Sg__insert__SWIG_1(arg1,arg2,arg3,(fastjet::PseudoJet const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorPJ_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< fastjet::PseudoJet >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorPJ_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'vectorPJ_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< fastjet::PseudoJet >::insert(std::vector< fastjet::PseudoJet >::iterator,std::vector< fastjet::PseudoJet >::value_type const &)\n"
    "    std::vector< fastjet::PseudoJet >::insert(std::vector< fastjet::PseudoJet >::iterator,std::vector< fastjet::PseudoJet >::size_type,std::vector< fastjet::PseudoJet >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vectorPJ_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorPJ_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_reserve" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPJ_reserve" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet >::size_type""'");
  } 
  arg2 = static_cast< std::vector< fastjet::PseudoJet >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorPJ_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorPJ_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPJ_capacity" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = ((std::vector< fastjet::PseudoJet > const *)arg1)->capacity();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorPJ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet > *arg1 = (std::vector< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorPJ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorPJ" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< fastjet::PseudoJet > * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorPJ_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_pi_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable pi is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_pi_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::pi));
  return pyobj;
}


SWIGINTERN int Swig_var_twopi_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable twopi is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_twopi_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::twopi));
  return pyobj;
}


SWIGINTERN int Swig_var_pisq_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable pisq is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_pisq_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::pisq));
  return pyobj;
}


SWIGINTERN int Swig_var_zeta2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable zeta2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_zeta2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::zeta2));
  return pyobj;
}


SWIGINTERN int Swig_var_zeta3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable zeta3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_zeta3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::zeta3));
  return pyobj;
}


SWIGINTERN int Swig_var_eulergamma_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable eulergamma is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_eulergamma_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::eulergamma));
  return pyobj;
}


SWIGINTERN int Swig_var_ln2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ln2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ln2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::ln2));
  return pyobj;
}


SWIGINTERN PyObject *_wrap___default_random_generator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:__default_random_generator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__default_random_generator" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  {
    try {
      result = (int)fastjet::__default_random_generator(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var__G_random_int_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_fastjet__BasicRandomT_int_t,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""fastjet::_G_random_int""' of type '""fastjet::BasicRandom< int >""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""fastjet::_G_random_int""' of type '""fastjet::BasicRandom< int >""'");
    } else {
      fastjet::BasicRandom< int > * temp;
      temp  = reinterpret_cast< fastjet::BasicRandom< int > * >(argp);
      fastjet::_G_random_int = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var__G_random_int_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&fastjet::_G_random_int), SWIGTYPE_p_fastjet__BasicRandomT_int_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var__G_random_double_set(PyObject *_val) {
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(_val, &argp, SWIGTYPE_p_fastjet__BasicRandomT_double_t,  0  | 0);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""fastjet::_G_random_double""' of type '""fastjet::BasicRandom< double >""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""fastjet::_G_random_double""' of type '""fastjet::BasicRandom< double >""'");
    } else {
      fastjet::BasicRandom< double > * temp;
      temp  = reinterpret_cast< fastjet::BasicRandom< double > * >(argp);
      fastjet::_G_random_double = *temp;
      if (SWIG_IsNewObj(res)) delete temp;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var__G_random_double_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&fastjet::_G_random_double), SWIGTYPE_p_fastjet__BasicRandomT_double_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_LimitedWarning__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::LimitedWarning *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LimitedWarning")) SWIG_fail;
  {
    try {
      result = (fastjet::LimitedWarning *)new fastjet::LimitedWarning();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__LimitedWarning, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LimitedWarning__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::LimitedWarning *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LimitedWarning",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LimitedWarning" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (fastjet::LimitedWarning *)new fastjet::LimitedWarning(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__LimitedWarning, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LimitedWarning(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LimitedWarning__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LimitedWarning__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LimitedWarning'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::LimitedWarning::LimitedWarning()\n"
    "    fastjet::LimitedWarning::LimitedWarning(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_warn__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::LimitedWarning *arg1 = (fastjet::LimitedWarning *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LimitedWarning_warn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__LimitedWarning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LimitedWarning_warn" "', argument " "1"" of type '" "fastjet::LimitedWarning *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::LimitedWarning * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LimitedWarning_warn" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->warn((char const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_warn__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::LimitedWarning *arg1 = (fastjet::LimitedWarning *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LimitedWarning_warn",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__LimitedWarning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LimitedWarning_warn" "', argument " "1"" of type '" "fastjet::LimitedWarning *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::LimitedWarning * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LimitedWarning_warn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LimitedWarning_warn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->warn((std::string const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_warn__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::LimitedWarning *arg1 = (fastjet::LimitedWarning *) 0 ;
  char *arg2 = (char *) 0 ;
  std::ostream *arg3 = (std::ostream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LimitedWarning_warn",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__LimitedWarning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LimitedWarning_warn" "', argument " "1"" of type '" "fastjet::LimitedWarning *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::LimitedWarning * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LimitedWarning_warn" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__ostream, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LimitedWarning_warn" "', argument " "3"" of type '" "std::ostream *""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  {
    try {
      (arg1)->warn((char const *)arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_warn__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::LimitedWarning *arg1 = (fastjet::LimitedWarning *) 0 ;
  std::string *arg2 = 0 ;
  std::ostream *arg3 = (std::ostream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LimitedWarning_warn",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__LimitedWarning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LimitedWarning_warn" "', argument " "1"" of type '" "fastjet::LimitedWarning *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::LimitedWarning * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LimitedWarning_warn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LimitedWarning_warn" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__ostream, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LimitedWarning_warn" "', argument " "3"" of type '" "std::ostream *""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  {
    try {
      (arg1)->warn((std::string const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_warn(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__LimitedWarning, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LimitedWarning_warn__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__LimitedWarning, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LimitedWarning_warn__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__LimitedWarning, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LimitedWarning_warn__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__LimitedWarning, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LimitedWarning_warn__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LimitedWarning_warn'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::LimitedWarning::warn(char const *)\n"
    "    fastjet::LimitedWarning::warn(std::string const &)\n"
    "    fastjet::LimitedWarning::warn(char const *,std::ostream *)\n"
    "    fastjet::LimitedWarning::warn(std::string const &,std::ostream *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_set_default_stream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = (std::ostream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LimitedWarning_set_default_stream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ostream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LimitedWarning_set_default_stream" "', argument " "1"" of type '" "std::ostream *""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    try {
      fastjet::LimitedWarning::set_default_stream(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_set_default_max_warn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LimitedWarning_set_default_max_warn",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LimitedWarning_set_default_max_warn" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      fastjet::LimitedWarning::set_default_max_warn(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_max_warn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::LimitedWarning *arg1 = (fastjet::LimitedWarning *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LimitedWarning_max_warn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__LimitedWarning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LimitedWarning_max_warn" "', argument " "1"" of type '" "fastjet::LimitedWarning const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::LimitedWarning * >(argp1);
  {
    try {
      result = (int)((fastjet::LimitedWarning const *)arg1)->max_warn();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_n_warn_so_far(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::LimitedWarning *arg1 = (fastjet::LimitedWarning *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LimitedWarning_n_warn_so_far",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__LimitedWarning, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LimitedWarning_n_warn_so_far" "', argument " "1"" of type '" "fastjet::LimitedWarning const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::LimitedWarning * >(argp1);
  {
    try {
      result = (int)((fastjet::LimitedWarning const *)arg1)->n_warn_so_far();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LimitedWarning_summary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":LimitedWarning_summary")) SWIG_fail;
  {
    try {
      result = fastjet::LimitedWarning::summary();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LimitedWarning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::LimitedWarning *arg1 = (fastjet::LimitedWarning *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LimitedWarning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__LimitedWarning, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LimitedWarning" "', argument " "1"" of type '" "fastjet::LimitedWarning *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::LimitedWarning * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LimitedWarning_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__LimitedWarning, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Error__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Error *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Error")) SWIG_fail;
  {
    try {
      result = (fastjet::Error *)new fastjet::Error();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Error, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Error__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  fastjet::Error *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Error",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Error" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Error" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (fastjet::Error *)new fastjet::Error((std::string const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Error, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Error(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Error__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Error__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Error'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Error::Error()\n"
    "    fastjet::Error::Error(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Error *arg1 = (fastjet::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Error, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Error" "', argument " "1"" of type '" "fastjet::Error *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Error * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Error *arg1 = (fastjet::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_message",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error_message" "', argument " "1"" of type '" "fastjet::Error const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Error * >(argp1);
  {
    try {
      result = ((fastjet::Error const *)arg1)->message();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Error *arg1 = (fastjet::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error_description" "', argument " "1"" of type '" "fastjet::Error const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Error * >(argp1);
  {
    try {
      result = ((fastjet::Error const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_set_print_errors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_set_print_errors",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Error_set_print_errors" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      fastjet::Error::set_print_errors(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_set_print_backtrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_set_print_backtrace",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Error_set_print_backtrace" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      fastjet::Error::set_print_backtrace(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error_set_default_stream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = (std::ostream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error_set_default_stream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ostream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error_set_default_stream" "', argument " "1"" of type '" "std::ostream *""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    try {
      fastjet::Error::set_default_stream(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Error___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Error *arg1 = (fastjet::Error *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Error___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Error, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Error___str__" "', argument " "1"" of type '" "fastjet::Error const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Error * >(argp1);
  {
    try {
      result = fastjet_Error___str__((fastjet::Error const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Error_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Error, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InternalError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  fastjet::InternalError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InternalError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InternalError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InternalError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (fastjet::InternalError *)new fastjet::InternalError((std::string const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__InternalError, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InternalError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::InternalError *arg1 = (fastjet::InternalError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InternalError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__InternalError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InternalError" "', argument " "1"" of type '" "fastjet::InternalError *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::InternalError * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InternalError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__InternalError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PseudoJetStructureBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PseudoJetStructureBase")) SWIG_fail;
  {
    try {
      result = (fastjet::PseudoJetStructureBase *)new fastjet::PseudoJetStructureBase();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJetStructureBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PseudoJetStructureBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PseudoJetStructureBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PseudoJetStructureBase" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJetStructureBase_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_description" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJetStructureBase_has_associated_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_associated_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJetStructureBase_associated_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJetStructureBase const *)arg1)->associated_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_valid_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJetStructureBase_has_valid_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_valid_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_valid_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_validated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJetStructureBase_validated_cs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_validated_cs" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJetStructureBase const *)arg1)->validated_cs();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_validated_csab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequenceAreaBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJetStructureBase_validated_csab",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_validated_csab" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceAreaBase *)((fastjet::PseudoJetStructureBase const *)arg1)->validated_csab();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_partner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJetStructureBase_has_partner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_partner" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJetStructureBase_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_partner((fastjet::PseudoJet const &)*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJetStructureBase_has_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_child" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJetStructureBase_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_child((fastjet::PseudoJet const &)*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PseudoJetStructureBase_has_parents",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_parents" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJetStructureBase_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PseudoJetStructureBase_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_parents((fastjet::PseudoJet const &)*arg2,*arg3,*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_object_in_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJetStructureBase_object_in_jet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->object_in_jet((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJetStructureBase_has_constituents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_constituents" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_constituents();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJetStructureBase_constituents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_constituents" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->constituents((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJetStructureBase_has_exclusive_subjets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_exclusive_subjets();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJetStructureBase_exclusive_subjets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->exclusive_subjets((fastjet::PseudoJet const &)*arg2,(double const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_n_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJetStructureBase_n_exclusive_subjets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_n_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_n_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      result = (int)((fastjet::PseudoJetStructureBase const *)arg1)->n_exclusive_subjets((fastjet::PseudoJet const &)*arg2,(double const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_exclusive_subjets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJetStructureBase_exclusive_subjets_up_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_exclusive_subjets_up_to" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_exclusive_subjets_up_to" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->exclusive_subjets_up_to((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_exclusive_subdmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJetStructureBase_exclusive_subdmerge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_exclusive_subdmerge" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_exclusive_subdmerge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::PseudoJetStructureBase const *)arg1)->exclusive_subdmerge((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_exclusive_subdmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJetStructureBase_exclusive_subdmerge_max",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_exclusive_subdmerge_max" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJetStructureBase_exclusive_subdmerge_max" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::PseudoJetStructureBase const *)arg1)->exclusive_subdmerge_max((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJetStructureBase_has_pieces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_pieces" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_pieces((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJetStructureBase_pieces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_pieces" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->pieces((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_has_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJetStructureBase_has_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_has_area" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->has_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJetStructureBase_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_area" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJetStructureBase const *)arg1)->area((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJetStructureBase_area_error",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_area_error" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJetStructureBase const *)arg1)->area_error((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJetStructureBase_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_area_4vector" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::PseudoJetStructureBase const *)arg1)->area_4vector((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJetStructureBase_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJetStructureBase *arg1 = (fastjet::PseudoJetStructureBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJetStructureBase_is_pure_ghost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJetStructureBase_is_pure_ghost" "', argument " "1"" of type '" "fastjet::PseudoJetStructureBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJetStructureBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJetStructureBase_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJetStructureBase_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJetStructureBase const *)arg1)->is_pure_ghost((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PseudoJetStructureBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__PseudoJetStructureBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_MaxRap_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MaxRap is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MaxRap_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::MaxRap));
  return pyobj;
}


SWIGINTERN int Swig_var_pseudojet_invalid_phi_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable pseudojet_invalid_phi is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_pseudojet_invalid_phi_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::pseudojet_invalid_phi));
  return pyobj;
}


SWIGINTERN int Swig_var_pseudojet_invalid_rap_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable pseudojet_invalid_rap is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_pseudojet_invalid_rap_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::pseudojet_invalid_rap));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_PseudoJet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PseudoJet")) SWIG_fail;
  {
    try {
      result = (fastjet::PseudoJet *)new fastjet::PseudoJet();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PseudoJet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_PseudoJet",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PseudoJet" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PseudoJet" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PseudoJet" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PseudoJet" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::PseudoJet *)new fastjet::PseudoJet(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PseudoJet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PseudoJet",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PseudoJet" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    try {
      result = (fastjet::PseudoJet *)new fastjet::PseudoJet(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PseudoJet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PseudoJet__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PseudoJet__SWIG_2(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_PseudoJet__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PseudoJet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::PseudoJet()\n"
    "    fastjet::PseudoJet::PseudoJet(double const,double const,double const,double const)\n"
    "    fastjet::PseudoJet::PseudoJet(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_PseudoJet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PseudoJet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PseudoJet" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_E(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_E",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_E" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->E();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_e(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_e",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_e" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->e();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_px(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_px",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_px" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->px();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_py(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_py",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_py" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->py();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_pz",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pz" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->pz();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_phi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_phi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_phi" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->phi();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_phi_std(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_phi_std",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_phi_std" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->phi_std();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_phi_02pi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_phi_02pi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_phi_02pi" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->phi_02pi();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_rap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_rap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_rap" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->rap();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_rapidity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_rapidity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_rapidity" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->rapidity();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pseudorapidity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_pseudorapidity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pseudorapidity" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->pseudorapidity();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_eta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_eta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_eta" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->eta();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pt2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_pt2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pt2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->pt2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_pt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pt" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->pt();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_perp2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_perp2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_perp2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->perp2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_perp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_perp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_perp" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->perp();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_kt2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_kt2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_kt2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->kt2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_m2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_m2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_m2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->m2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_m" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_mperp2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_mperp2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_mperp2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->mperp2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_mperp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_mperp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_mperp" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->mperp();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_mt2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_mt2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_mt2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->mt2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_mt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_mt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_mt" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->mt();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_modp2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_modp2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_modp2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->modp2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_modp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_modp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_modp" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->modp();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_Et(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_Et",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_Et" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->Et();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_Et2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_Et2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_Et2" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->Et2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___call__" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->operator ()(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_kt_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_kt_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_kt_distance" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_kt_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_kt_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->kt_distance((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_plain_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_plain_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_plain_distance" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_plain_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_plain_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->plain_distance((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_squared_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_squared_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_squared_distance" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_squared_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_squared_distance" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->squared_distance((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_delta_R(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_delta_R",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_delta_R" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_delta_R" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_delta_R" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->delta_R((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_delta_phi_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_delta_phi_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_delta_phi_to" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_delta_phi_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_delta_phi_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->delta_phi_to((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_beam_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_beam_distance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_beam_distance" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->beam_distance();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_four_mom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::valarray< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_four_mom",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_four_mom" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->four_mom();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new std::valarray< double >(static_cast< const std::valarray< double >& >(result))), SWIGTYPE_p_std__valarrayT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_boost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_boost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_boost" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_boost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_boost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->boost((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_unboost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_unboost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_unboost" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_unboost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_unboost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->unboost((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___imul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___imul__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->operator *=(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___idiv__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___idiv__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->operator /=(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___iadd__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___iadd__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___iadd__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->operator +=((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___isub__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___isub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___isub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::PseudoJet *) &(arg1)->operator -=((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PseudoJet_reset",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PseudoJet_reset" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->reset(arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_reset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_reset" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_reset" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      (arg1)->reset((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PseudoJet_reset__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PseudoJet_reset__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PseudoJet_reset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::reset(double,double,double,double)\n"
    "    fastjet::PseudoJet::reset(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_PtYPhiM__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PseudoJet_reset_PtYPhiM",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->reset_PtYPhiM(arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_PtYPhiM__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PseudoJet_reset_PtYPhiM",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset_PtYPhiM" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->reset_PtYPhiM(arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_PtYPhiM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PseudoJet_reset_PtYPhiM__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PseudoJet_reset_PtYPhiM__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PseudoJet_reset_PtYPhiM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::reset_PtYPhiM(double,double,double,double)\n"
    "    fastjet::PseudoJet::reset_PtYPhiM(double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PseudoJet_reset_momentum",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_momentum" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset_momentum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset_momentum" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset_momentum" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PseudoJet_reset_momentum" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->reset_momentum(arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_reset_momentum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_momentum" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_reset_momentum" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_reset_momentum" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      (arg1)->reset_momentum((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PseudoJet_reset_momentum__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PseudoJet_reset_momentum__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PseudoJet_reset_momentum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::reset_momentum(double,double,double,double)\n"
    "    fastjet::PseudoJet::reset_momentum(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum_PtYPhiM__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:PseudoJet_reset_momentum_PtYPhiM",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->reset_momentum_PtYPhiM(arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum_PtYPhiM__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PseudoJet_reset_momentum_PtYPhiM",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PseudoJet_reset_momentum_PtYPhiM" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->reset_momentum_PtYPhiM(arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_reset_momentum_PtYPhiM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PseudoJet_reset_momentum_PtYPhiM__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_PseudoJet_reset_momentum_PtYPhiM__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PseudoJet_reset_momentum_PtYPhiM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::reset_momentum_PtYPhiM(double,double,double,double)\n"
    "    fastjet::PseudoJet::reset_momentum_PtYPhiM(double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_cached_rap_phi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJet_set_cached_rap_phi",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_cached_rap_phi" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_set_cached_rap_phi" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PseudoJet_set_cached_rap_phi" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->set_cached_rap_phi(arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_user_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_user_index" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (int)((fastjet::PseudoJet const *)arg1)->user_index();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_user_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_set_user_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_user_index" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_set_user_index" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_user_index(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_user_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet::UserInfoBase *arg2 = (fastjet::PseudoJet::UserInfoBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_set_user_info",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_user_info" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__PseudoJet__UserInfoBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_set_user_info" "', argument " "2"" of type '" "fastjet::PseudoJet::UserInfoBase *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet::UserInfoBase * >(argp2);
  {
    try {
      (arg1)->set_user_info(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_user_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_user_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_user_info" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_user_info();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_info_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet::UserInfoBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_user_info_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_user_info_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::PseudoJet::UserInfoBase *)((fastjet::PseudoJet const *)arg1)->user_info_ptr();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet__UserInfoBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_info_shared_ptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_user_info_shared_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_user_info_shared_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *) &((fastjet::PseudoJet const *)arg1)->user_info_shared_ptr();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_info_shared_ptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_user_info_shared_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_user_info_shared_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *) &(arg1)->user_info_shared_ptr();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_user_info_shared_ptr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PseudoJet_user_info_shared_ptr__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PseudoJet_user_info_shared_ptr__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PseudoJet_user_info_shared_ptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::user_info_shared_ptr() const\n"
    "    fastjet::PseudoJet::user_info_shared_ptr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_description" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_associated_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_associated_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_associated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_associated_cs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_associated_cs" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_associated_cs();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_valid_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_valid_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_valid_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_valid_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_valid_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_valid_cs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_valid_cs" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_valid_cs();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_associated_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJet const *)arg1)->associated_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_associated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_associated_cs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_associated_cs" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJet const *)arg1)->associated_cs();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_validated_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_cluster_sequence" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJet const *)arg1)->validated_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_validated_cs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_cs" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::PseudoJet const *)arg1)->validated_cs();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_cluster_sequence_area_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequenceAreaBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_validated_cluster_sequence_area_base",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_cluster_sequence_area_base" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceAreaBase *)((fastjet::PseudoJet const *)arg1)->validated_cluster_sequence_area_base();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_csab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequenceAreaBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_validated_csab",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_csab" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceAreaBase *)((fastjet::PseudoJet const *)arg1)->validated_csab();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_structure_shared_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_set_structure_shared_ptr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_structure_shared_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_set_structure_shared_ptr" "', argument " "2"" of type '" "fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_set_structure_shared_ptr" "', argument " "2"" of type '" "fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::SharedPtr< fastjet::PseudoJetStructureBase > * >(argp2);
  {
    try {
      (arg1)->set_structure_shared_ptr((fastjet::SharedPtr< fastjet::PseudoJetStructureBase > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_structure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_structure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_structure" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_structure();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_structure_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJetStructureBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_structure_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_structure_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::PseudoJetStructureBase *)((fastjet::PseudoJet const *)arg1)->structure_ptr();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_structure_non_const_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJetStructureBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_structure_non_const_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_structure_non_const_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::PseudoJetStructureBase *)(arg1)->structure_non_const_ptr();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_validated_structure_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJetStructureBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_validated_structure_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_validated_structure_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::PseudoJetStructureBase *)((fastjet::PseudoJet const *)arg1)->validated_structure_ptr();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJetStructureBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_structure_shared_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_structure_shared_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_structure_shared_ptr" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *) &((fastjet::PseudoJet const *)arg1)->structure_shared_ptr();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_partner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_has_partner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_partner" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_partner(*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_has_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_child" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_child(*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PseudoJet_has_parents",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_parents" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PseudoJet_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_parents(*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_contains" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_contains" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_contains" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->contains((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_is_inside(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_is_inside",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_is_inside" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet_is_inside" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet_is_inside" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->is_inside((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_constituents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_constituents" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_constituents();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_constituents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_constituents" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->constituents();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_exclusive_subjets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_exclusive_subjets();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subjets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_exclusive_subjets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subjets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->exclusive_subjets(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_n_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_n_exclusive_subjets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_n_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_n_exclusive_subjets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (int)((fastjet::PseudoJet const *)arg1)->n_exclusive_subjets(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subjets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_exclusive_subjets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subjets" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subjets" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->exclusive_subjets(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subjets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PseudoJet_exclusive_subjets__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PseudoJet_exclusive_subjets__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PseudoJet_exclusive_subjets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PseudoJet::exclusive_subjets(double const) const\n"
    "    fastjet::PseudoJet::exclusive_subjets(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subjets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_exclusive_subjets_up_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subjets_up_to" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subjets_up_to" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->exclusive_subjets_up_to(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subdmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_exclusive_subdmerge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subdmerge" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subdmerge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->exclusive_subdmerge(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_exclusive_subdmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_exclusive_subdmerge_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_exclusive_subdmerge_max" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_exclusive_subdmerge_max" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->exclusive_subdmerge_max(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_pieces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_pieces" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_pieces();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_pieces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_pieces" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->pieces();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_has_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_has_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_has_area" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->has_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_area" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_area_error",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_area_error" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (double)((fastjet::PseudoJet const *)arg1)->area_error();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_area_4vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_area_4vector" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = ((fastjet::PseudoJet const *)arg1)->area_4vector();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_is_pure_ghost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_is_pure_ghost" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (bool)((fastjet::PseudoJet const *)arg1)->is_pure_ghost();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_cluster_hist_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_cluster_hist_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_cluster_hist_index" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (int)((fastjet::PseudoJet const *)arg1)->cluster_hist_index();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_cluster_hist_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_set_cluster_hist_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_cluster_hist_index" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_set_cluster_hist_index" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_cluster_hist_index(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_cluster_sequence_history_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_cluster_sequence_history_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_cluster_sequence_history_index" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (int)((fastjet::PseudoJet const *)arg1)->cluster_sequence_history_index();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_cluster_sequence_history_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_set_cluster_sequence_history_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_cluster_sequence_history_index" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet_set_cluster_sequence_history_index" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_cluster_sequence_history_index(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___str__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = fastjet_PseudoJet___str__(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_set_python_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet_set_python_info",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_set_python_info" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  arg2 = obj1;
  {
    try {
      fastjet_PseudoJet_set_python_info(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet_python_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PseudoJet_python_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet_python_info" "', argument " "1"" of type '" "fastjet::PseudoJet const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (PyObject *)fastjet_PseudoJet_python_info((fastjet::PseudoJet const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___add__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___add__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___add__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = fastjet_PseudoJet___add__(arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___sub__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___sub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___sub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = fastjet_PseudoJet___sub__(arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___eq__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___eq__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___eq__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet_PseudoJet___eq____SWIG_0(arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___ne__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PseudoJet___ne__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PseudoJet___ne__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet_PseudoJet___ne____SWIG_0(arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___mul__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet_PseudoJet___mul__(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___rmul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___rmul__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___rmul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet_PseudoJet___rmul__(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___div__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet_PseudoJet___div__(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___eq__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___eq__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)fastjet_PseudoJet___eq____SWIG_1(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PseudoJet___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PseudoJet___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PseudoJet___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = (fastjet::PseudoJet *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PseudoJet___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PseudoJet___ne__" "', argument " "1"" of type '" "fastjet::PseudoJet *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PseudoJet___ne__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)fastjet_PseudoJet___ne____SWIG_1(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PseudoJet___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PseudoJet___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PseudoJet___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *PseudoJet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__PseudoJet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__add__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__add__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__add__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = fastjet::operator +((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__sub__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__sub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__sub__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = fastjet::operator -((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__mul__",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = fastjet::operator *(arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::operator *((fastjet::PseudoJet const &)*arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___div__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__div__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__div__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__div__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::operator /((fastjet::PseudoJet const &)*arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
        (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
        SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
      "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet::operator ==((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet::operator !=((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__eq__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)fastjet::operator ==((fastjet::PseudoJet const &)*arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__eq__" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet::operator ==(arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap___eq____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_3(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "__ne__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)fastjet::operator !=((fastjet::PseudoJet const &)*arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__ne__" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet::operator !=(arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap___ne____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_3(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_dot_product(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dot_product",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dot_product" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dot_product" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dot_product" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dot_product" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)fastjet::dot_product((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_have_same_momentum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:have_same_momentum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "have_same_momentum" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "have_same_momentum" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "have_same_momentum" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "have_same_momentum" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)fastjet::have_same_momentum((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PtYPhiM__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PtYPhiM",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PtYPhiM" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PtYPhiM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PtYPhiM" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PtYPhiM" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = fastjet::PtYPhiM(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PtYPhiM__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PtYPhiM",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PtYPhiM" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PtYPhiM" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PtYPhiM" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = fastjet::PtYPhiM(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PtYPhiM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PtYPhiM__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PtYPhiM__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'PtYPhiM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::PtYPhiM(double,double,double,double)\n"
    "    fastjet::PtYPhiM(double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sorted_by_pt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sorted_by_pt",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sorted_by_pt" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sorted_by_pt" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::sorted_by_pt((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sorted_by_rapidity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sorted_by_rapidity",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sorted_by_rapidity" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sorted_by_rapidity" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::sorted_by_rapidity((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sorted_by_E(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sorted_by_E",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sorted_by_E" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sorted_by_E" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::sorted_by_E((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sorted_by_pz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sorted_by_pz",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sorted_by_pz" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sorted_by_pz" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::sorted_by_pz((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sort_indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sort_indices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sort_indices" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sort_indices" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sort_indices" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sort_indices" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  {
    try {
      fastjet::sort_indices(*arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedSortHelper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = (std::vector< double,std::allocator< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::IndexedSortHelper *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IndexedSortHelper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedSortHelper" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  {
    try {
      result = (fastjet::IndexedSortHelper *)new fastjet::IndexedSortHelper((std::vector< double,std::allocator< double > > const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__IndexedSortHelper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedSortHelper___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::IndexedSortHelper *arg1 = (fastjet::IndexedSortHelper *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedSortHelper___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__IndexedSortHelper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedSortHelper___call__" "', argument " "1"" of type '" "fastjet::IndexedSortHelper const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::IndexedSortHelper * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexedSortHelper___call__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedSortHelper___call__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)((fastjet::IndexedSortHelper const *)arg1)->operator ()(arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IndexedSortHelper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::IndexedSortHelper *arg1 = (fastjet::IndexedSortHelper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexedSortHelper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__IndexedSortHelper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexedSortHelper" "', argument " "1"" of type '" "fastjet::IndexedSortHelper *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::IndexedSortHelper * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IndexedSortHelper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__IndexedSortHelper, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_join__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:join",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = fastjet::join((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:join",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:join",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:join",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:join",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "join" "', argument " "4"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "4"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3,(fastjet::PseudoJet const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeDefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RangeDefinition")) SWIG_fail;
  {
    try {
      result = (fastjet::RangeDefinition *)new fastjet::RangeDefinition();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RangeDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeDefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::RangeDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RangeDefinition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RangeDefinition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (fastjet::RangeDefinition *)new fastjet::RangeDefinition(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RangeDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RangeDefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = (fastjet::RangeDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RangeDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RangeDefinition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RangeDefinition" "', argument " "1"" of type '" "fastjet::RangeDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeDefinition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::RangeDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RangeDefinition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RangeDefinition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RangeDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RangeDefinition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RangeDefinition" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::RangeDefinition *)new fastjet::RangeDefinition(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RangeDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeDefinition__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::RangeDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RangeDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RangeDefinition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RangeDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RangeDefinition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::RangeDefinition *)new fastjet::RangeDefinition(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RangeDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeDefinition__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::RangeDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RangeDefinition",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RangeDefinition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RangeDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::RangeDefinition *)new fastjet::RangeDefinition(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RangeDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RangeDefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RangeDefinition__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RangeDefinition__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RangeDefinition__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RangeDefinition__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RangeDefinition__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RangeDefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::RangeDefinition::RangeDefinition()\n"
    "    fastjet::RangeDefinition::RangeDefinition(double)\n"
    "    fastjet::RangeDefinition::RangeDefinition(double,double,double,double)\n"
    "    fastjet::RangeDefinition::RangeDefinition(double,double,double)\n"
    "    fastjet::RangeDefinition::RangeDefinition(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_is_localizable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = (fastjet::RangeDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeDefinition_is_localizable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RangeDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeDefinition_is_localizable" "', argument " "1"" of type '" "fastjet::RangeDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  {
    try {
      result = (bool)((fastjet::RangeDefinition const *)arg1)->is_localizable();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_set_position__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = (fastjet::RangeDefinition *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RangeDefinition_set_position",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RangeDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeDefinition_set_position" "', argument " "1"" of type '" "fastjet::RangeDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RangeDefinition_set_position" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RangeDefinition_set_position" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->set_position((double const &)*arg2,(double const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_set_position__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = (fastjet::RangeDefinition *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RangeDefinition_set_position",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RangeDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeDefinition_set_position" "', argument " "1"" of type '" "fastjet::RangeDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RangeDefinition_set_position" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RangeDefinition_set_position" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      (arg1)->set_position((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_set_position(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__RangeDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RangeDefinition_set_position__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__RangeDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RangeDefinition_set_position__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RangeDefinition_set_position'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::RangeDefinition::set_position(double const &,double const &)\n"
    "    fastjet::RangeDefinition::set_position(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_is_in_range__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = (fastjet::RangeDefinition *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RangeDefinition_is_in_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RangeDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeDefinition_is_in_range" "', argument " "1"" of type '" "fastjet::RangeDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RangeDefinition_is_in_range" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RangeDefinition_is_in_range" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::RangeDefinition const *)arg1)->is_in_range((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_is_in_range__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = (fastjet::RangeDefinition *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RangeDefinition_is_in_range",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RangeDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeDefinition_is_in_range" "', argument " "1"" of type '" "fastjet::RangeDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RangeDefinition_is_in_range" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RangeDefinition_is_in_range" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)((fastjet::RangeDefinition const *)arg1)->is_in_range(arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_is_in_range(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__RangeDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RangeDefinition_is_in_range__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__RangeDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RangeDefinition_is_in_range__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RangeDefinition_is_in_range'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::RangeDefinition::is_in_range(fastjet::PseudoJet const &) const\n"
    "    fastjet::RangeDefinition::is_in_range(double,double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_get_rap_limits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = (fastjet::RangeDefinition *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RangeDefinition_get_rap_limits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RangeDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeDefinition_get_rap_limits" "', argument " "1"" of type '" "fastjet::RangeDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RangeDefinition_get_rap_limits" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RangeDefinition_get_rap_limits" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RangeDefinition_get_rap_limits" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RangeDefinition_get_rap_limits" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((fastjet::RangeDefinition const *)arg1)->get_rap_limits(*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = (fastjet::RangeDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeDefinition_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RangeDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeDefinition_area" "', argument " "1"" of type '" "fastjet::RangeDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  {
    try {
      result = (double)((fastjet::RangeDefinition const *)arg1)->area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RangeDefinition_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = (fastjet::RangeDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RangeDefinition_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RangeDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RangeDefinition_description" "', argument " "1"" of type '" "fastjet::RangeDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  {
    try {
      result = ((fastjet::RangeDefinition const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RangeDefinition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__RangeDefinition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_SelectorWorker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SelectorWorker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SelectorWorker" "', argument " "1"" of type '" "fastjet::SelectorWorker *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker__pass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorWorker__pass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker__pass" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelectorWorker__pass" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelectorWorker__pass" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::SelectorWorker const *)arg1)->pass((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_terminator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorWorker_terminator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_terminator" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelectorWorker_terminator" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelectorWorker_terminator" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > * >(argp2);
  {
    try {
      ((fastjet::SelectorWorker const *)arg1)->terminator(*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_applies_jet_by_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorWorker_applies_jet_by_jet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_applies_jet_by_jet" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = (bool)((fastjet::SelectorWorker const *)arg1)->applies_jet_by_jet();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorWorker_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_description" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = ((fastjet::SelectorWorker const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_takes_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorWorker_takes_reference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_takes_reference" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = (bool)((fastjet::SelectorWorker const *)arg1)->takes_reference();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorWorker_set_reference",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_set_reference" "', argument " "1"" of type '" "fastjet::SelectorWorker *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelectorWorker_set_reference" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelectorWorker_set_reference" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      (arg1)->set_reference((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::SelectorWorker *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorWorker_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_copy" "', argument " "1"" of type '" "fastjet::SelectorWorker *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = (fastjet::SelectorWorker *)(arg1)->copy();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_get_rapidity_extent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SelectorWorker_get_rapidity_extent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_get_rapidity_extent" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelectorWorker_get_rapidity_extent" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelectorWorker_get_rapidity_extent" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SelectorWorker_get_rapidity_extent" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelectorWorker_get_rapidity_extent" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((fastjet::SelectorWorker const *)arg1)->get_rapidity_extent(*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_is_geometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorWorker_is_geometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_is_geometric" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = (bool)((fastjet::SelectorWorker const *)arg1)->is_geometric();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_has_finite_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorWorker_has_finite_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_has_finite_area" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = (bool)((fastjet::SelectorWorker const *)arg1)->has_finite_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_has_known_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorWorker_has_known_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_has_known_area" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = (bool)((fastjet::SelectorWorker const *)arg1)->has_known_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorker_known_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorWorker_known_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorker_known_area" "', argument " "1"" of type '" "fastjet::SelectorWorker const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = (double)((fastjet::SelectorWorker const *)arg1)->known_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SelectorWorker_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__SelectorWorker, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Selector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Selector")) SWIG_fail;
  {
    try {
      result = (fastjet::Selector *)new fastjet::Selector();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Selector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorker *arg1 = (fastjet::SelectorWorker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Selector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Selector" "', argument " "1"" of type '" "fastjet::SelectorWorker *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorker * >(argp1);
  {
    try {
      result = (fastjet::Selector *)new fastjet::Selector(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Selector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RangeDefinition *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Selector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__RangeDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Selector" "', argument " "1"" of type '" "fastjet::RangeDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Selector" "', argument " "1"" of type '" "fastjet::RangeDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RangeDefinition * >(argp1);
  {
    try {
      result = (fastjet::Selector *)new fastjet::Selector((fastjet::RangeDefinition const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Selector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Selector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__SelectorWorker, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Selector__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__RangeDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Selector__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Selector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Selector::Selector()\n"
    "    fastjet::Selector::Selector(fastjet::SelectorWorker *)\n"
    "    fastjet::Selector::Selector(fastjet::RangeDefinition const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Selector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Selector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Selector" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector__pass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector__pass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector__pass" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector__pass" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector__pass" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->pass((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___call__" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___call__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___call__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->operator ()((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_count" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_count" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_count" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (unsigned int)((fastjet::Selector const *)arg1)->count((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector_sum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_sum" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_sum" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_sum" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((fastjet::Selector const *)arg1)->sum((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_scalar_pt_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector_scalar_pt_sum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_scalar_pt_sum" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_scalar_pt_sum" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_scalar_pt_sum" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (double)((fastjet::Selector const *)arg1)->scalar_pt_sum((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_sift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Selector_sift",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_sift" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_sift" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_sift" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Selector_sift" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_sift" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Selector_sift" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_sift" "', argument " "4"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > * >(argp4);
  {
    try {
      ((fastjet::Selector const *)arg1)->sift((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,*arg3,*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_applies_jet_by_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector_applies_jet_by_jet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_applies_jet_by_jet" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->applies_jet_by_jet();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___call__" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((fastjet::Selector const *)arg1)->operator ()((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Selector___call____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Selector___call____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Selector___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Selector::operator ()(fastjet::PseudoJet const &) const\n"
    "    fastjet::Selector::operator ()(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Selector_nullify_non_selected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector_nullify_non_selected",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_nullify_non_selected" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_nullify_non_selected" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_nullify_non_selected" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > * >(argp2);
  {
    try {
      ((fastjet::Selector const *)arg1)->nullify_non_selected(*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_get_rapidity_extent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Selector_get_rapidity_extent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_get_rapidity_extent" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_get_rapidity_extent" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_get_rapidity_extent" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Selector_get_rapidity_extent" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_get_rapidity_extent" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      ((fastjet::Selector const *)arg1)->get_rapidity_extent(*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_description" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = ((fastjet::Selector const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_is_geometric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector_is_geometric",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_is_geometric" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->is_geometric();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_has_finite_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector_has_finite_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_has_finite_area" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->has_finite_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_area__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_area" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (double)((fastjet::Selector const *)arg1)->area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_area__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_area" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Selector_area" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((fastjet::Selector const *)arg1)->area(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_area(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Selector_area__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Selector_area__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Selector_area'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Selector::area() const\n"
    "    fastjet::Selector::area(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Selector_worker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::SharedPtr< fastjet::SelectorWorker > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector_worker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_worker" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::SelectorWorker > *) &((fastjet::Selector const *)arg1)->worker();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__SelectorWorker_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_validated_worker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::SelectorWorker *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector_validated_worker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_validated_worker" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (fastjet::SelectorWorker *)((fastjet::Selector const *)arg1)->validated_worker();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SelectorWorker, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_takes_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector_takes_reference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_takes_reference" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (bool)((fastjet::Selector const *)arg1)->takes_reference();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector_set_reference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector_set_reference",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector_set_reference" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector_set_reference" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector_set_reference" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (fastjet::Selector *) &(arg1)->set_reference((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___iand__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector___iand__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___iand__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___iand__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___iand__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (fastjet::Selector *) &(arg1)->operator &=((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___ior__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector___ior__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___ior__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___ior__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___ior__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (fastjet::Selector *) &(arg1)->operator |=((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___str____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___str__" "', argument " "1"" of type '" "fastjet::Selector const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = fastjet_Selector___str____SWIG_0((fastjet::Selector const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___str____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___str__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = fastjet_Selector___str____SWIG_1(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___str__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Selector___str____SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Selector___str____SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Selector___str__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Selector::__str__() const\n"
    "    fastjet::Selector::__str__()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Selector___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector___mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___mul__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___mul__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___mul__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = fastjet_Selector___mul__(arg1,(fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___and__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector___and__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___and__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___and__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___and__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = fastjet_Selector___and__(arg1,(fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___or__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Selector___or__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___or__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Selector___or__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Selector___or__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = fastjet_Selector___or__(arg1,(fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Selector___invert__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = (fastjet::Selector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Selector___invert__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Selector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Selector___invert__" "', argument " "1"" of type '" "fastjet::Selector *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = fastjet_Selector___invert__(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Selector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Selector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SelectorIdentity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)":SelectorIdentity")) SWIG_fail;
  {
    try {
      result = fastjet::SelectorIdentity();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__mul__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = fastjet::operator *((fastjet::Selector const &)*arg1,(fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___mul__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap___mul____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___mul____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___mul____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SelectorPtMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorPtMin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPtMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorPtMin(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorPtMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorPtMax",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPtMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorPtMax(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorPtRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorPtRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPtRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorPtRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorPtRange(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorEtMin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEtMin(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorEtMax",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEtMax(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorEtRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorEtRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorEtRange(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorEMin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEMin(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorEMax",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEMax(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorERange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorERange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorERange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorERange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorERange(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorMassMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorMassMin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorMassMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorMassMin(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorMassMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorMassMax",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorMassMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorMassMax(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorMassRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorMassRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorMassRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorMassRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorMassRange(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRapMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorRapMin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRapMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorRapMin(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRapMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorRapMax",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRapMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorRapMax(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRapRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorRapRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRapRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorRapRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorRapRange(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsRapMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorAbsRapMin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsRapMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorAbsRapMin(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsRapMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorAbsRapMax",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsRapMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorAbsRapMax(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsRapRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorAbsRapRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsRapRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorAbsRapRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorAbsRapRange(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorEtaMin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtaMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEtaMin(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorEtaMax",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtaMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorEtaMax(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorEtaRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorEtaRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorEtaRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorEtaRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorEtaRange(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsEtaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorAbsEtaMin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsEtaMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorAbsEtaMin(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsEtaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorAbsEtaMax",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsEtaMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorAbsEtaMax(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorAbsEtaRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorAbsEtaRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorAbsEtaRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorAbsEtaRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorAbsEtaRange(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorPhiRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorPhiRange",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPhiRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorPhiRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorPhiRange(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRapPhiRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SelectorRapPhiRange",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRapPhiRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorRapPhiRange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SelectorRapPhiRange" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SelectorRapPhiRange" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = fastjet::SelectorRapPhiRange(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorNHardest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorNHardest",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorNHardest" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = fastjet::SelectorNHardest(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorCircle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorCircle",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorCircle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorCircle(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorDoughnut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorDoughnut",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorDoughnut" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorDoughnut" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorDoughnut(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorStrip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorStrip",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorStrip" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorStrip(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorRectangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorRectangle",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorRectangle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelectorRectangle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::SelectorRectangle(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorPtFractionMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorPtFractionMin",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SelectorPtFractionMin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = fastjet::SelectorPtFractionMin(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorIsZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)":SelectorIsZero")) SWIG_fail;
  {
    try {
      result = fastjet::SelectorIsZero();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorIsPureGhost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)":SelectorIsPureGhost")) SWIG_fail;
  {
    try {
      result = fastjet::SelectorIsPureGhost();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fastjet_version_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":fastjet_version_string")) SWIG_fail;
  {
    try {
      result = fastjet::fastjet_version_string();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_aachen_algorithm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable aachen_algorithm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_aachen_algorithm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(fastjet::aachen_algorithm));
  return pyobj;
}


SWIGINTERN int Swig_var_cambridge_aachen_algorithm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cambridge_aachen_algorithm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cambridge_aachen_algorithm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(fastjet::cambridge_aachen_algorithm));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::RecombinationScheme arg3 ;
  fastjet::Strategy arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_JetDefinition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg3 = static_cast< fastjet::RecombinationScheme >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::Strategy""'");
  } 
  arg4 = static_cast< fastjet::Strategy >(val4);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::RecombinationScheme arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_JetDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg3 = static_cast< fastjet::RecombinationScheme >(val3);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_JetDefinition",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::RecombinationScheme arg2 ;
  fastjet::Strategy arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_JetDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg2 = static_cast< fastjet::RecombinationScheme >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::Strategy""'");
  } 
  arg3 = static_cast< fastjet::Strategy >(val3);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::RecombinationScheme arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_JetDefinition",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg2 = static_cast< fastjet::RecombinationScheme >(val2);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_JetDefinition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  fastjet::RecombinationScheme arg4 ;
  fastjet::Strategy arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_JetDefinition",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg4 = static_cast< fastjet::RecombinationScheme >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_JetDefinition" "', argument " "5"" of type '" "fastjet::Strategy""'");
  } 
  arg5 = static_cast< fastjet::Strategy >(val5);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  fastjet::RecombinationScheme arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_JetDefinition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg4 = static_cast< fastjet::RecombinationScheme >(val4);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_JetDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::JetDefinition::Recombiner *arg3 = (fastjet::JetDefinition::Recombiner *) 0 ;
  fastjet::Strategy arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_JetDefinition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg3 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::Strategy""'");
  } 
  arg4 = static_cast< fastjet::Strategy >(val4);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,(fastjet::JetDefinition::Recombiner const *)arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::JetDefinition::Recombiner *arg3 = (fastjet::JetDefinition::Recombiner *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_JetDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg3 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp3);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,(fastjet::JetDefinition::Recombiner const *)arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::JetDefinition::Recombiner *arg2 = (fastjet::JetDefinition::Recombiner *) 0 ;
  fastjet::Strategy arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_JetDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::Strategy""'");
  } 
  arg3 = static_cast< fastjet::Strategy >(val3);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,(fastjet::JetDefinition::Recombiner const *)arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::JetDefinition::Recombiner *arg2 = (fastjet::JetDefinition::Recombiner *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_JetDefinition",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,(fastjet::JetDefinition::Recombiner const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  fastjet::JetDefinition::Recombiner *arg4 = (fastjet::JetDefinition::Recombiner *) 0 ;
  fastjet::Strategy arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_JetDefinition",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg4 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_JetDefinition" "', argument " "5"" of type '" "fastjet::Strategy""'");
  } 
  arg5 = static_cast< fastjet::Strategy >(val5);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,(fastjet::JetDefinition::Recombiner const *)arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  fastjet::JetDefinition::Recombiner *arg4 = (fastjet::JetDefinition::Recombiner *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_JetDefinition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg4 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp4);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,(fastjet::JetDefinition::Recombiner const *)arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JetDefinition")) SWIG_fail;
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition::Plugin *arg1 = (fastjet::JetDefinition::Plugin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_JetDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition__Plugin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetDefinition::Plugin const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition::Plugin * >(argp1);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition((fastjet::JetDefinition::Plugin const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::RecombinationScheme arg3 ;
  fastjet::Strategy arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_JetDefinition",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg3 = static_cast< fastjet::RecombinationScheme >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::Strategy""'");
  } 
  arg4 = static_cast< fastjet::Strategy >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_JetDefinition" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::Strategy arg3 ;
  fastjet::RecombinationScheme arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_JetDefinition",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::Strategy""'");
  } 
  arg3 = static_cast< fastjet::Strategy >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg4 = static_cast< fastjet::RecombinationScheme >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_JetDefinition" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::Strategy arg3 ;
  fastjet::RecombinationScheme arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_JetDefinition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::Strategy""'");
  } 
  arg3 = static_cast< fastjet::Strategy >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JetDefinition" "', argument " "4"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg4 = static_cast< fastjet::RecombinationScheme >(val4);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition__SWIG_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::Strategy arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_JetDefinition",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JetDefinition" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JetDefinition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JetDefinition" "', argument " "3"" of type '" "fastjet::Strategy""'");
  } 
  arg3 = static_cast< fastjet::Strategy >(val3);
  {
    try {
      result = (fastjet::JetDefinition *)new fastjet::JetDefinition(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetDefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_JetDefinition__SWIG_15(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Plugin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JetDefinition__SWIG_16(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_JetDefinition__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_JetDefinition__SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_JetDefinition__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_JetDefinition__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JetDefinition__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JetDefinition__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_JetDefinition__SWIG_10(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JetDefinition__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JetDefinition__SWIG_20(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JetDefinition__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JetDefinition__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JetDefinition__SWIG_19(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JetDefinition__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_JetDefinition__SWIG_14(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JetDefinition__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_JetDefinition__SWIG_17(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_JetDefinition__SWIG_18(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_JetDefinition__SWIG_13(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_JetDefinition__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_JetDefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::RecombinationScheme,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::RecombinationScheme)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,fastjet::RecombinationScheme,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,fastjet::RecombinationScheme)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,double,fastjet::RecombinationScheme,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,double,fastjet::RecombinationScheme)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,double)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::JetDefinition::Recombiner const *,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::JetDefinition::Recombiner const *)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,fastjet::JetDefinition::Recombiner const *,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,fastjet::JetDefinition::Recombiner const *)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,double,fastjet::JetDefinition::Recombiner const *,fastjet::Strategy)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,double,fastjet::JetDefinition::Recombiner const *)\n"
    "    fastjet::JetDefinition::JetDefinition()\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetDefinition::Plugin const *)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::RecombinationScheme,fastjet::Strategy,int)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::Strategy,fastjet::RecombinationScheme,int)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::Strategy,fastjet::RecombinationScheme)\n"
    "    fastjet::JetDefinition::JetDefinition(fastjet::JetAlgorithm,double,fastjet::Strategy)\n");
  return 0;
}


SWIGINTERN int Swig_var_JetDefinition_max_allowable_R_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable JetDefinition_max_allowable_R is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_JetDefinition_max_allowable_R_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::JetDefinition::max_allowable_R));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_recombination_scheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::RecombinationScheme arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition_set_recombination_scheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_recombination_scheme" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition_set_recombination_scheme" "', argument " "2"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg2 = static_cast< fastjet::RecombinationScheme >(val2);
  {
    try {
      (arg1)->set_recombination_scheme(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_recombiner__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetDefinition::Recombiner *arg2 = (fastjet::JetDefinition::Recombiner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition_set_recombiner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetDefinition_set_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      (arg1)->set_recombiner((fastjet::JetDefinition::Recombiner const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_recombiner__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition_set_recombiner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetDefinition_set_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetDefinition_set_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  {
    try {
      (arg1)->set_recombiner((fastjet::JetDefinition const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_recombiner(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JetDefinition_set_recombiner__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JetDefinition_set_recombiner__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetDefinition_set_recombiner'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetDefinition::set_recombiner(fastjet::JetDefinition::Recombiner const *)\n"
    "    fastjet::JetDefinition::set_recombiner(fastjet::JetDefinition const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetDefinition_delete_recombiner_when_unused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_delete_recombiner_when_unused",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_delete_recombiner_when_unused" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      (arg1)->delete_recombiner_when_unused();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_plugin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JetDefinition::Plugin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_plugin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_plugin" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::JetDefinition::Plugin *)((fastjet::JetDefinition const *)arg1)->plugin();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition__Plugin, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_delete_plugin_when_unused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_delete_plugin_when_unused",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_delete_plugin_when_unused" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      (arg1)->delete_plugin_when_unused();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_jet_algorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JetAlgorithm result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_jet_algorithm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_jet_algorithm" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::JetAlgorithm)((fastjet::JetDefinition const *)arg1)->jet_algorithm();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_jet_finder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JetAlgorithm result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_jet_finder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_jet_finder" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::JetAlgorithm)((fastjet::JetDefinition const *)arg1)->jet_finder();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_R(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_R",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_R" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (double)((fastjet::JetDefinition const *)arg1)->R();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_extra_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_extra_param",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_extra_param" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (double)((fastjet::JetDefinition const *)arg1)->extra_param();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_strategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Strategy result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_strategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_strategy" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::Strategy)((fastjet::JetDefinition const *)arg1)->strategy();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_recombination_scheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::RecombinationScheme result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_recombination_scheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_recombination_scheme" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::RecombinationScheme)((fastjet::JetDefinition const *)arg1)->recombination_scheme();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_jet_algorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition_set_jet_algorithm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_jet_algorithm" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition_set_jet_algorithm" "', argument " "2"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg2 = static_cast< fastjet::JetAlgorithm >(val2);
  {
    try {
      (arg1)->set_jet_algorithm(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_jet_finder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition_set_jet_finder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_jet_finder" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition_set_jet_finder" "', argument " "2"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg2 = static_cast< fastjet::JetAlgorithm >(val2);
  {
    try {
      (arg1)->set_jet_finder(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_extra_param(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition_set_extra_param",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_extra_param" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition_set_extra_param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_extra_param(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_recombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JetDefinition::Recombiner *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_recombiner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::JetDefinition::Recombiner *)((fastjet::JetDefinition const *)arg1)->recombiner();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_has_same_recombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition_has_same_recombiner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_has_same_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetDefinition_has_same_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetDefinition_has_same_recombiner" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  {
    try {
      result = (bool)((fastjet::JetDefinition const *)arg1)->has_same_recombiner((fastjet::JetDefinition const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_is_spherical(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_is_spherical",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_is_spherical" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (bool)((fastjet::JetDefinition const *)arg1)->is_spherical();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_description" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = ((fastjet::JetDefinition const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_description_no_recombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_description_no_recombiner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_description_no_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = ((fastjet::JetDefinition const *)arg1)->description_no_recombiner();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_algorithm_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_algorithm_description",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition_algorithm_description" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  {
    try {
      result = fastjet::JetDefinition::algorithm_description(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_n_parameters_for_algorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition_n_parameters_for_algorithm",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition_n_parameters_for_algorithm" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  {
    try {
      result = (unsigned int)fastjet::JetDefinition::n_parameters_for_algorithm(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition___str__" "', argument " "1"" of type '" "fastjet::JetDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = fastjet_JetDefinition___str__((fastjet::JetDefinition const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition___call__" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetDefinition___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetDefinition___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = fastjet_JetDefinition___call__(arg1,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition_set_python_recombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition_set_python_recombiner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetDefinition_set_python_recombiner" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  arg2 = obj1;
  {
    try {
      fastjet_JetDefinition_set_python_recombiner(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JetDefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = (fastjet::JetDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JetDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JetDefinition" "', argument " "1"" of type '" "fastjet::JetDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JetDefinition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__JetDefinition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_join__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition::Recombiner *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:join",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      result = fastjet::join((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition::Recombiner const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::JetDefinition::Recombiner *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:join",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::JetDefinition::Recombiner const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::JetDefinition::Recombiner *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:join",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp3);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::JetDefinition::Recombiner const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::JetDefinition::Recombiner *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:join",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "join" "', argument " "4"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "4"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp4);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3,(fastjet::JetDefinition::Recombiner const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  fastjet::JetDefinition::Recombiner *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:join",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "join" "', argument " "4"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "4"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_fastjet__JetDefinition__Recombiner,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "join" "', argument " "5"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "join" "', argument " "5"" of type '" "fastjet::JetDefinition::Recombiner const &""'"); 
  }
  arg5 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp5);
  {
    try {
      result = fastjet::join((fastjet::PseudoJet const &)*arg1,(fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3,(fastjet::PseudoJet const &)*arg4,(fastjet::JetDefinition::Recombiner const &)*arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_join(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_join__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_join__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_join__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_join__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_join__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_join__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_join__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_join__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_join__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_join__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'join'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::join(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &)\n"
    "    fastjet::join(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition::Recombiner const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::JetDefinition::Recombiner const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::JetDefinition::Recombiner const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::JetDefinition::Recombiner const &)\n"
    "    fastjet::join(fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::PseudoJet const &,fastjet::JetDefinition::Recombiner const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_CompositeJetStructure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CompositeJetStructure")) SWIG_fail;
  {
    try {
      result = (fastjet::CompositeJetStructure *)new fastjet::CompositeJetStructure();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__CompositeJetStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CompositeJetStructure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition::Recombiner *arg2 = (fastjet::JetDefinition::Recombiner *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::CompositeJetStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CompositeJetStructure",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CompositeJetStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CompositeJetStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CompositeJetStructure" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      result = (fastjet::CompositeJetStructure *)new fastjet::CompositeJetStructure((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition::Recombiner const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__CompositeJetStructure, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CompositeJetStructure__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  fastjet::CompositeJetStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CompositeJetStructure",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CompositeJetStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CompositeJetStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (fastjet::CompositeJetStructure *)new fastjet::CompositeJetStructure((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__CompositeJetStructure, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CompositeJetStructure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CompositeJetStructure__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CompositeJetStructure__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CompositeJetStructure__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CompositeJetStructure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::CompositeJetStructure::CompositeJetStructure()\n"
    "    fastjet::CompositeJetStructure::CompositeJetStructure(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition::Recombiner const *)\n"
    "    fastjet::CompositeJetStructure::CompositeJetStructure(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_CompositeJetStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CompositeJetStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CompositeJetStructure" "', argument " "1"" of type '" "fastjet::CompositeJetStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeJetStructure_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_description" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = ((fastjet::CompositeJetStructure const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_has_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeJetStructure_has_constituents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_has_constituents" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::CompositeJetStructure const *)arg1)->has_constituents();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeJetStructure_constituents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_constituents" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::CompositeJetStructure const *)arg1)->constituents((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_has_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeJetStructure_has_pieces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_has_pieces" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::CompositeJetStructure const *)arg1)->has_pieces((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeJetStructure_pieces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_pieces" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::CompositeJetStructure const *)arg1)->pieces((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_has_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeJetStructure_has_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_has_area" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::CompositeJetStructure const *)arg1)->has_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeJetStructure_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_area" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::CompositeJetStructure const *)arg1)->area((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeJetStructure_area_error",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_area_error" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::CompositeJetStructure const *)arg1)->area_error((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeJetStructure_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_area_4vector" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::CompositeJetStructure const *)arg1)->area_4vector((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CompositeJetStructure_is_pure_ghost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_is_pure_ghost" "', argument " "1"" of type '" "fastjet::CompositeJetStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CompositeJetStructure_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CompositeJetStructure_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::CompositeJetStructure const *)arg1)->is_pure_ghost((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CompositeJetStructure_discard_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CompositeJetStructure *arg1 = (fastjet::CompositeJetStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CompositeJetStructure_discard_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CompositeJetStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CompositeJetStructure_discard_area" "', argument " "1"" of type '" "fastjet::CompositeJetStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CompositeJetStructure * >(argp1);
  {
    try {
      (arg1)->discard_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CompositeJetStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__CompositeJetStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClusterSequenceStructure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClusterSequenceStructure")) SWIG_fail;
  {
    try {
      result = (fastjet::ClusterSequenceStructure *)new fastjet::ClusterSequenceStructure();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceStructure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequenceStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClusterSequenceStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceStructure" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceStructure *)new fastjet::ClusterSequenceStructure((fastjet::ClusterSequence const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceStructure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClusterSequenceStructure__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClusterSequenceStructure__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterSequenceStructure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceStructure::ClusterSequenceStructure()\n"
    "    fastjet::ClusterSequenceStructure::ClusterSequenceStructure(fastjet::ClusterSequence const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequenceStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterSequenceStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequenceStructure" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceStructure_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_description" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceStructure_has_associated_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_associated_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_associated_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceStructure_associated_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_associated_cluster_sequence" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::ClusterSequenceStructure const *)arg1)->associated_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_valid_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceStructure_has_valid_cluster_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_valid_cluster_sequence" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_valid_cluster_sequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_validated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceStructure_validated_cs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_validated_cs" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)((fastjet::ClusterSequenceStructure const *)arg1)->validated_cs();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_validated_csab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequenceAreaBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceStructure_validated_csab",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_validated_csab" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequenceAreaBase *)((fastjet::ClusterSequenceStructure const *)arg1)->validated_csab();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_set_associated_cs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::ClusterSequence *arg2 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceStructure_set_associated_cs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_set_associated_cs" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_set_associated_cs" "', argument " "2"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequence * >(argp2);
  {
    try {
      (arg1)->set_associated_cs((fastjet::ClusterSequence const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_partner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceStructure_has_partner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_partner" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceStructure_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_partner((fastjet::PseudoJet const &)*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceStructure_has_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_child" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceStructure_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_child((fastjet::PseudoJet const &)*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClusterSequenceStructure_has_parents",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_parents" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceStructure_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceStructure_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_parents((fastjet::PseudoJet const &)*arg2,*arg3,*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_object_in_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceStructure_object_in_jet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->object_in_jet((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceStructure_has_constituents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_constituents" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_constituents();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceStructure_constituents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_constituents" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->constituents((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceStructure_has_exclusive_subjets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_exclusive_subjets();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceStructure_exclusive_subjets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->exclusive_subjets((fastjet::PseudoJet const &)*arg2,(double const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_n_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceStructure_n_exclusive_subjets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_n_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_n_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  {
    try {
      result = (int)((fastjet::ClusterSequenceStructure const *)arg1)->n_exclusive_subjets((fastjet::PseudoJet const &)*arg2,(double const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_exclusive_subjets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceStructure_exclusive_subjets_up_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_exclusive_subjets_up_to" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_exclusive_subjets_up_to" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->exclusive_subjets_up_to((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_exclusive_subdmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceStructure_exclusive_subdmerge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_exclusive_subdmerge" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_exclusive_subdmerge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequenceStructure const *)arg1)->exclusive_subdmerge((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_exclusive_subdmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceStructure_exclusive_subdmerge_max",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_exclusive_subdmerge_max" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceStructure_exclusive_subdmerge_max" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequenceStructure const *)arg1)->exclusive_subdmerge_max((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceStructure_has_pieces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_pieces" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_has_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_pieces((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_pieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceStructure_pieces",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_pieces" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_pieces" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->pieces((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_has_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceStructure_has_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_has_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->has_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceStructure_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceStructure const *)arg1)->area((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceStructure_area_error",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_area_error" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceStructure const *)arg1)->area_error((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceStructure_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_area_4vector" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceStructure const *)arg1)->area_4vector((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceStructure_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceStructure *arg1 = (fastjet::ClusterSequenceStructure *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceStructure_is_pure_ghost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceStructure_is_pure_ghost" "', argument " "1"" of type '" "fastjet::ClusterSequenceStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceStructure * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceStructure_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceStructure_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceStructure const *)arg1)->is_pure_ghost((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterSequenceStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequenceStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClusterSequence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClusterSequence")) SWIG_fail;
  {
    try {
      result = (fastjet::ClusterSequence *)new fastjet::ClusterSequence();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClusterSequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__ClusterSequence,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequence" "', argument " "1"" of type '" "fastjet::ClusterSequence const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence" "', argument " "1"" of type '" "fastjet::ClusterSequence const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence *)new fastjet::ClusterSequence((fastjet::ClusterSequence const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterSequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequence" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_inclusive_jets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_inclusive_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_inclusive_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_inclusive_jets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->inclusive_jets(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_inclusive_jets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_inclusive_jets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_inclusive_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->inclusive_jets();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_inclusive_jets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClusterSequence_inclusive_jets__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequence_inclusive_jets__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequence_inclusive_jets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::inclusive_jets(double const) const\n"
    "    fastjet::ClusterSequence::inclusive_jets() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_n_exclusive_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_n_exclusive_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_n_exclusive_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_n_exclusive_jets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (int)((fastjet::ClusterSequence const *)arg1)->n_exclusive_jets(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_exclusive_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_jets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_jets(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_exclusive_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_jets" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_jets(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequence_exclusive_jets__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequence_exclusive_jets__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequence_exclusive_jets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::exclusive_jets(double const) const\n"
    "    fastjet::ClusterSequence::exclusive_jets(int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_exclusive_jets_up_to",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_jets_up_to" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_jets_up_to" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_jets_up_to(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_dmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_exclusive_dmerge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_dmerge" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_dmerge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_dmerge(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_dmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_exclusive_dmerge_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_dmerge_max" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_dmerge_max" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_dmerge_max(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_ymerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_exclusive_ymerge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_ymerge" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_ymerge" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_ymerge(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_ymerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_exclusive_ymerge_max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_ymerge_max" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_ymerge_max" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_ymerge_max(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_n_exclusive_jets_ycut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_n_exclusive_jets_ycut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_n_exclusive_jets_ycut" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_n_exclusive_jets_ycut" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (int)((fastjet::ClusterSequence const *)arg1)->n_exclusive_jets_ycut(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_jets_ycut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_exclusive_jets_ycut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_jets_ycut" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_exclusive_jets_ycut" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_jets_ycut(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subjets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_exclusive_subjets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_subjets((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_n_exclusive_subjets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_n_exclusive_subjets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_n_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_n_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_n_exclusive_subjets" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)((fastjet::ClusterSequence const *)arg1)->n_exclusive_subjets((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subjets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_exclusive_subjets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subjets" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subjets" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_subjets((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subjets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClusterSequence_exclusive_subjets__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClusterSequence_exclusive_subjets__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequence_exclusive_subjets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::exclusive_subjets(fastjet::PseudoJet const &,double const) const\n"
    "    fastjet::ClusterSequence::exclusive_subjets(fastjet::PseudoJet const &,int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subjets_up_to(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_exclusive_subjets_up_to",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subjets_up_to" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subjets_up_to" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subjets_up_to" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->exclusive_subjets_up_to((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subdmerge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_exclusive_subdmerge",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subdmerge" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subdmerge" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subdmerge" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_subdmerge((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_exclusive_subdmerge_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_exclusive_subdmerge_max",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_exclusive_subdmerge_max" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_exclusive_subdmerge_max" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_exclusive_subdmerge_max" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->exclusive_subdmerge_max((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_Q(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_Q",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_Q" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->Q();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_Q2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_Q2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_Q2" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->Q2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_object_in_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_object_in_jet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_object_in_jet" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_object_in_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_object_in_jet" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->object_in_jet((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_parents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClusterSequence_has_parents",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_has_parents" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_parents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_parents" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequence_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_parents" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->has_parents((fastjet::PseudoJet const &)*arg2,*arg3,*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_has_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_has_child" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->has_child((fastjet::PseudoJet const &)*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_has_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_has_child" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_child" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet const *&""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_child" "', argument " "3"" of type '" "fastjet::PseudoJet const *&""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet ** >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->has_child((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const *&)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_fastjet__PseudoJet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequence_has_child__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_p_fastjet__PseudoJet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequence_has_child__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequence_has_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::has_child(fastjet::PseudoJet const &,fastjet::PseudoJet &) const\n"
    "    fastjet::ClusterSequence::has_child(fastjet::PseudoJet const &,fastjet::PseudoJet const *&) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_has_partner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_has_partner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_has_partner" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_partner" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_has_partner" "', argument " "3"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->has_partner((fastjet::PseudoJet const &)*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_constituents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_constituents" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->constituents((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_print_jets_for_root__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  std::ostream *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_print_jets_for_root",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::ostream &""'"); 
  }
  arg3 = reinterpret_cast< std::ostream * >(argp3);
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->print_jets_for_root((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_print_jets_for_root__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_print_jets_for_root",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->print_jets_for_root((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_print_jets_for_root__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClusterSequence_print_jets_for_root",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->print_jets_for_root((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_print_jets_for_root__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_print_jets_for_root",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_print_jets_for_root" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->print_jets_for_root((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,(std::string const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_print_jets_for_root(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterSequence_print_jets_for_root__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__ostream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequence_print_jets_for_root__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequence_print_jets_for_root__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ClusterSequence_print_jets_for_root__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequence_print_jets_for_root'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::print_jets_for_root(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,std::ostream &) const\n"
    "    fastjet::ClusterSequence::print_jets_for_root(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &) const\n"
    "    fastjet::ClusterSequence::print_jets_for_root(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,std::string const &,std::string const &) const\n"
    "    fastjet::ClusterSequence::print_jets_for_root(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_add_constituents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_add_constituents",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_add_constituents" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_add_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_add_constituents" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_add_constituents" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_add_constituents" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > * >(argp3);
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->add_constituents((fastjet::PseudoJet const &)*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_strategy_used(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Strategy result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_strategy_used",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_strategy_used" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::Strategy)((fastjet::ClusterSequence const *)arg1)->strategy_used();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_strategy_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_strategy_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_strategy_string" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->strategy_string();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_strategy_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::Strategy arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_strategy_string",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_strategy_string" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_strategy_string" "', argument " "2"" of type '" "fastjet::Strategy""'");
  } 
  arg2 = static_cast< fastjet::Strategy >(val2);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->strategy_string(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_strategy_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClusterSequence_strategy_string__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequence_strategy_string__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequence_strategy_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::strategy_string() const\n"
    "    fastjet::ClusterSequence::strategy_string(fastjet::Strategy) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_jet_def(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JetDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_jet_def",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_jet_def" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::JetDefinition *) &((fastjet::ClusterSequence const *)arg1)->jet_def();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetDefinition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_delete_self_when_unused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_delete_self_when_unused",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_delete_self_when_unused" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      (arg1)->delete_self_when_unused();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_will_delete_self_when_unused(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_will_delete_self_when_unused",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_will_delete_self_when_unused" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->will_delete_self_when_unused();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_signal_imminent_self_deletion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_signal_imminent_self_deletion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_signal_imminent_self_deletion" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      ((fastjet::ClusterSequence const *)arg1)->signal_imminent_self_deletion();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_jet_scale_for_algorithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_jet_scale_for_algorithm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_jet_scale_for_algorithm" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_jet_scale_for_algorithm" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_jet_scale_for_algorithm" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequence const *)arg1)->jet_scale_for_algorithm((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_record_ij_recombination__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ClusterSequence_plugin_record_ij_recombination",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "5"" of type '" "int &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "5"" of type '" "int &""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  {
    try {
      (arg1)->plugin_record_ij_recombination(arg2,arg3,arg4,*arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_record_ij_recombination__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  fastjet::PseudoJet *arg5 = 0 ;
  int *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ClusterSequence_plugin_record_ij_recombination",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "5"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "5"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg5 = reinterpret_cast< fastjet::PseudoJet * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "6"" of type '" "int &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_plugin_record_ij_recombination" "', argument " "6"" of type '" "int &""'"); 
  }
  arg6 = reinterpret_cast< int * >(argp6);
  {
    try {
      (arg1)->plugin_record_ij_recombination(arg2,arg3,arg4,(fastjet::PseudoJet const &)*arg5,*arg6);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_record_ij_recombination(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_int, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_ClusterSequence_plugin_record_ij_recombination__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_int, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_ClusterSequence_plugin_record_ij_recombination__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequence_plugin_record_ij_recombination'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::plugin_record_ij_recombination(int,int,double,int &)\n"
    "    fastjet::ClusterSequence::plugin_record_ij_recombination(int,int,double,fastjet::PseudoJet const &,int &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_record_iB_recombination(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_plugin_record_iB_recombination",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_record_iB_recombination" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequence_plugin_record_iB_recombination" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequence_plugin_record_iB_recombination" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->plugin_record_iB_recombination(arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_associate_extras(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::ClusterSequence::Extras *arg2 = (fastjet::ClusterSequence::Extras *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_plugin_associate_extras",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_associate_extras" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__ClusterSequence__Extras, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_plugin_associate_extras" "', argument " "2"" of type '" "fastjet::ClusterSequence::Extras *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequence::Extras * >(argp2);
  {
    try {
      (arg1)->plugin_associate_extras(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_plugin_activated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_plugin_activated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_plugin_activated" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->plugin_activated();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_extras(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::ClusterSequence::Extras *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_extras",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_extras" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::ClusterSequence::Extras *)((fastjet::ClusterSequence const *)arg1)->extras();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence__Extras, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_jets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *) &((fastjet::ClusterSequence const *)arg1)->jets();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::ClusterSequence::history_element,std::allocator< fastjet::ClusterSequence::history_element > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_history",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_history" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (std::vector< fastjet::ClusterSequence::history_element,std::allocator< fastjet::ClusterSequence::history_element > > *) &((fastjet::ClusterSequence const *)arg1)->history();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_n_particles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_n_particles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_n_particles" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (unsigned int)((fastjet::ClusterSequence const *)arg1)->n_particles();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_particle_jet_indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_particle_jet_indices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_particle_jet_indices" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_particle_jet_indices" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_particle_jet_indices" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->particle_jet_indices((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(static_cast< const std::vector< int,std::allocator< int > >& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_unique_history_order(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_unique_history_order",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_unique_history_order" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->unique_history_order();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new std::vector< int,std::allocator< int > >(static_cast< const std::vector< int,std::allocator< int > >& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_unclustered_particles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_unclustered_particles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_unclustered_particles" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->unclustered_particles();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_childless_pseudojets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_childless_pseudojets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_childless_pseudojets" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = ((fastjet::ClusterSequence const *)arg1)->childless_pseudojets();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_contains" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_contains" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_contains" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::ClusterSequence const *)arg1)->contains((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_transfer_from_sequence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::ClusterSequence *arg2 = 0 ;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *arg3 = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequence_transfer_from_sequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__ClusterSequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "2"" of type '" "fastjet::ClusterSequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "2"" of type '" "fastjet::ClusterSequence const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequence * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "3"" of type '" "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *""'"); 
  }
  arg3 = reinterpret_cast< fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > * >(argp3);
  {
    try {
      (arg1)->transfer_from_sequence((fastjet::ClusterSequence const &)*arg2,(fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *)arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_transfer_from_sequence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  fastjet::ClusterSequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence_transfer_from_sequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "1"" of type '" "fastjet::ClusterSequence *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__ClusterSequence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "2"" of type '" "fastjet::ClusterSequence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence_transfer_from_sequence" "', argument " "2"" of type '" "fastjet::ClusterSequence const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequence * >(argp2);
  {
    try {
      (arg1)->transfer_from_sequence((fastjet::ClusterSequence const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_transfer_from_sequence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__ClusterSequence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterSequence_transfer_from_sequence__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__ClusterSequence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequence_transfer_from_sequence__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequence_transfer_from_sequence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::transfer_from_sequence(fastjet::ClusterSequence const &,fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *)\n"
    "    fastjet::ClusterSequence::transfer_from_sequence(fastjet::ClusterSequence const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_structure_shared_ptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence *arg1 = (fastjet::ClusterSequence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_structure_shared_ptr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_structure_shared_ptr" "', argument " "1"" of type '" "fastjet::ClusterSequence const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence * >(argp1);
  {
    try {
      result = (fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *) &((fastjet::ClusterSequence const *)arg1)->structure_shared_ptr();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_print_banner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ClusterSequence_print_banner")) SWIG_fail;
  {
    try {
      fastjet::ClusterSequence::print_banner();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_set_fastjet_banner_stream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = (std::ostream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequence_set_fastjet_banner_stream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__ostream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence_set_fastjet_banner_stream" "', argument " "1"" of type '" "std::ostream *""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  {
    try {
      fastjet::ClusterSequence::set_fastjet_banner_stream(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence_fastjet_banner_stream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":ClusterSequence_fastjet_banner_stream")) SWIG_fail;
  {
    try {
      result = (std::ostream *)fastjet::ClusterSequence::fastjet_banner_stream();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequence__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  bool *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterSequence",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequence" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequence" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ClusterSequence" "', argument " "3"" of type '" "bool""'");
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  {
    try {
      result = (fastjet::ClusterSequence *)new fastjet::ClusterSequence((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(bool const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequence__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::ClusterSequence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ClusterSequence",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequence" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequence" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  {
    try {
      result = (fastjet::ClusterSequence *)new fastjet::ClusterSequence((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClusterSequence__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__ClusterSequence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClusterSequence__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ClusterSequence__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ClusterSequence__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterSequence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence::ClusterSequence()\n"
    "    fastjet::ClusterSequence::ClusterSequence(fastjet::ClusterSequence const &)\n"
    "    fastjet::ClusterSequence::ClusterSequence(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,bool const &)\n"
    "    fastjet::ClusterSequence::ClusterSequence(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &)\n");
  return 0;
}


SWIGINTERN PyObject *ClusterSequence_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequence, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TilingBase_tile_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilingBase_tile_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_tile_index" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TilingBase_tile_index" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TilingBase_tile_index" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (int)((fastjet::TilingBase const *)arg1)->tile_index((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_n_tiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilingBase_n_tiles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_n_tiles" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  {
    try {
      result = (int)((fastjet::TilingBase const *)arg1)->n_tiles();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_n_good_tiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilingBase_n_good_tiles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_n_good_tiles" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  {
    try {
      result = (int)((fastjet::TilingBase const *)arg1)->n_good_tiles();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_tile_is_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilingBase_tile_is_good",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_tile_is_good" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TilingBase_tile_is_good" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)((fastjet::TilingBase const *)arg1)->tile_is_good(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_all_tiles_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilingBase_all_tiles_good",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_all_tiles_good" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::TilingBase const *)arg1)->all_tiles_good();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_all_tiles_equal_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilingBase_all_tiles_equal_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_all_tiles_equal_area" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::TilingBase const *)arg1)->all_tiles_equal_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_tile_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TilingBase_tile_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_tile_area" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TilingBase_tile_area" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::TilingBase const *)arg1)->tile_area(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_mean_tile_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilingBase_mean_tile_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_mean_tile_area" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  {
    try {
      result = (double)((fastjet::TilingBase const *)arg1)->mean_tile_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilingBase_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_description" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  {
    try {
      result = ((fastjet::TilingBase const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_is_initialised(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilingBase_is_initialised",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_is_initialised" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::TilingBase const *)arg1)->is_initialised();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TilingBase_is_initialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TilingBase_is_initialized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TilingBase_is_initialized" "', argument " "1"" of type '" "fastjet::TilingBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::TilingBase const *)arg1)->is_initialized();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TilingBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TilingBase *arg1 = (fastjet::TilingBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TilingBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TilingBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TilingBase" "', argument " "1"" of type '" "fastjet::TilingBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TilingBase * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TilingBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__TilingBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RectangularGrid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::RectangularGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RectangularGrid",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RectangularGrid" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RectangularGrid" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::RectangularGrid *)new fastjet::RectangularGrid(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RectangularGrid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectangularGrid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  fastjet::Selector arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::RectangularGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_RectangularGrid",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RectangularGrid" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RectangularGrid" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RectangularGrid" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RectangularGrid" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_fastjet__Selector,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_RectangularGrid" "', argument " "5"" of type '" "fastjet::Selector""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectangularGrid" "', argument " "5"" of type '" "fastjet::Selector""'");
    } else {
      fastjet::Selector * temp = reinterpret_cast< fastjet::Selector * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      result = (fastjet::RectangularGrid *)new fastjet::RectangularGrid(arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RectangularGrid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectangularGrid__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::RectangularGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RectangularGrid",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RectangularGrid" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RectangularGrid" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RectangularGrid" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RectangularGrid" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::RectangularGrid *)new fastjet::RectangularGrid(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RectangularGrid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectangularGrid__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RectangularGrid")) SWIG_fail;
  {
    try {
      result = (fastjet::RectangularGrid *)new fastjet::RectangularGrid();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RectangularGrid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectangularGrid(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RectangularGrid__SWIG_3(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RectangularGrid__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RectangularGrid__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_fastjet__Selector, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_RectangularGrid__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RectangularGrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::RectangularGrid::RectangularGrid(double,double)\n"
    "    fastjet::RectangularGrid::RectangularGrid(double,double,double,double,fastjet::Selector)\n"
    "    fastjet::RectangularGrid::RectangularGrid(double,double,double,double)\n"
    "    fastjet::RectangularGrid::RectangularGrid()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_n_tiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid_n_tiles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_n_tiles" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = (int)((fastjet::RectangularGrid const *)arg1)->n_tiles();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_n_good_tiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid_n_good_tiles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_n_good_tiles" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = (int)((fastjet::RectangularGrid const *)arg1)->n_good_tiles();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_tile_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RectangularGrid_tile_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_tile_index" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RectangularGrid_tile_index" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RectangularGrid_tile_index" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (int)((fastjet::RectangularGrid const *)arg1)->tile_index((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_tile_is_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RectangularGrid_tile_is_good",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_tile_is_good" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RectangularGrid_tile_is_good" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)((fastjet::RectangularGrid const *)arg1)->tile_is_good(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_tile_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RectangularGrid_tile_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_tile_area" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RectangularGrid_tile_area" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)((fastjet::RectangularGrid const *)arg1)->tile_area(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_mean_tile_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid_mean_tile_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_mean_tile_area" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = (double)((fastjet::RectangularGrid const *)arg1)->mean_tile_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_description" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = ((fastjet::RectangularGrid const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_rapmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid_rapmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_rapmin" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = (double)((fastjet::RectangularGrid const *)arg1)->rapmin();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_rapmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid_rapmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_rapmax" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = (double)((fastjet::RectangularGrid const *)arg1)->rapmax();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_drap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid_drap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_drap" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = (double)((fastjet::RectangularGrid const *)arg1)->drap();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_dphi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid_dphi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_dphi" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = (double)((fastjet::RectangularGrid const *)arg1)->dphi();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid_is_initialised(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid_is_initialised",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid_is_initialised" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = (bool)((fastjet::RectangularGrid const *)arg1)->is_initialised();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectangularGrid___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RectangularGrid___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectangularGrid___str__" "', argument " "1"" of type '" "fastjet::RectangularGrid const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = fastjet_RectangularGrid___str__((fastjet::RectangularGrid const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RectangularGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = (fastjet::RectangularGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RectangularGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RectangularGrid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RectangularGrid" "', argument " "1"" of type '" "fastjet::RectangularGrid *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RectangularGrid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__RectangularGrid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new__NoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::_NoInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new__NoInfo")) SWIG_fail;
  {
    try {
      result = (fastjet::_NoInfo *)new fastjet::_NoInfo();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet___NoInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__NoInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::_NoInfo *arg1 = (fastjet::_NoInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete__NoInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet___NoInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__NoInfo" "', argument " "1"" of type '" "fastjet::_NoInfo *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::_NoInfo * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_NoInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet___NoInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_def_ghost_maxrap_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable def_ghost_maxrap is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_def_ghost_maxrap_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::gas::def_ghost_maxrap));
  return pyobj;
}


SWIGINTERN int Swig_var_def_repeat_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable def_repeat is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_def_repeat_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(fastjet::gas::def_repeat));
  return pyobj;
}


SWIGINTERN int Swig_var_def_ghost_area_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable def_ghost_area is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_def_ghost_area_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::gas::def_ghost_area));
  return pyobj;
}


SWIGINTERN int Swig_var_def_grid_scatter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable def_grid_scatter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_def_grid_scatter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::gas::def_grid_scatter));
  return pyobj;
}


SWIGINTERN int Swig_var_def_pt_scatter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable def_pt_scatter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_def_pt_scatter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::gas::def_pt_scatter));
  return pyobj;
}


SWIGINTERN int Swig_var_def_mean_ghost_pt_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable def_mean_ghost_pt is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_def_mean_ghost_pt_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(fastjet::gas::def_mean_ghost_pt));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GhostedAreaSpec")) SWIG_fail;
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GhostedAreaSpec" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_GhostedAreaSpec" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GhostedAreaSpec" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GhostedAreaSpec",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GhostedAreaSpec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GhostedAreaSpec" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_GhostedAreaSpec" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_GhostedAreaSpec" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GhostedAreaSpec" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_GhostedAreaSpec" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GhostedAreaSpec" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GhostedAreaSpec",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GhostedAreaSpec" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_GhostedAreaSpec" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec((fastjet::Selector const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GhostedAreaSpec" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec((fastjet::Selector const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GhostedAreaSpec" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec((fastjet::Selector const &)*arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_GhostedAreaSpec",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GhostedAreaSpec" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec((fastjet::Selector const &)*arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GhostedAreaSpec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GhostedAreaSpec" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec((fastjet::Selector const &)*arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GhostedAreaSpec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (fastjet::GhostedAreaSpec *)new fastjet::GhostedAreaSpec((fastjet::Selector const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GhostedAreaSpec(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GhostedAreaSpec__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GhostedAreaSpec__SWIG_18(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_GhostedAreaSpec__SWIG_6(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GhostedAreaSpec__SWIG_17(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GhostedAreaSpec__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GhostedAreaSpec__SWIG_12(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GhostedAreaSpec__SWIG_16(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GhostedAreaSpec__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GhostedAreaSpec__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_GhostedAreaSpec__SWIG_15(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_GhostedAreaSpec__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_GhostedAreaSpec__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_GhostedAreaSpec__SWIG_14(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_GhostedAreaSpec__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_GhostedAreaSpec__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_GhostedAreaSpec__SWIG_13(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_GhostedAreaSpec__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_GhostedAreaSpec__SWIG_8(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_GhostedAreaSpec__SWIG_7(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GhostedAreaSpec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec()\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,int,double,double,double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,int,double,double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,int,double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,int,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,int)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,double,int,double,double,double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,double,int,double,double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,double,int,double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,double,int,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,double,int)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(fastjet::Selector const &,int,double,double,double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(fastjet::Selector const &,int,double,double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(fastjet::Selector const &,int,double,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(fastjet::Selector const &,int,double)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(fastjet::Selector const &,int)\n"
    "    fastjet::GhostedAreaSpec::GhostedAreaSpec(fastjet::Selector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec__initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec__initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec__initialize" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      (arg1)->_initialize();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_ghost_rapmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_ghost_rapmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_ghost_rapmax" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->ghost_rapmax();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_ghost_maxrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_ghost_maxrap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_ghost_maxrap" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->ghost_maxrap();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_ghost_etamax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_ghost_etamax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_ghost_etamax" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->ghost_etamax();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_ghost_maxeta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_ghost_maxeta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_ghost_maxeta" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->ghost_maxeta();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_ghost_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_ghost_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_ghost_area" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->ghost_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_grid_scatter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_grid_scatter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_grid_scatter" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->grid_scatter();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_pt_scatter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_pt_scatter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_pt_scatter" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->pt_scatter();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_mean_ghost_pt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_mean_ghost_pt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_mean_ghost_pt" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->mean_ghost_pt();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_repeat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_repeat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_repeat" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (int)((fastjet::GhostedAreaSpec const *)arg1)->repeat();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_fj2_placement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_fj2_placement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_fj2_placement" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (bool)((fastjet::GhostedAreaSpec const *)arg1)->fj2_placement();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_kt_scatter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_kt_scatter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_kt_scatter" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->kt_scatter();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_mean_ghost_kt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_mean_ghost_kt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_mean_ghost_kt" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->mean_ghost_kt();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_actual_ghost_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_actual_ghost_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_actual_ghost_area" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->actual_ghost_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_n_ghosts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_n_ghosts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_n_ghosts" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (int)((fastjet::GhostedAreaSpec const *)arg1)->n_ghosts();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_ghost_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_ghost_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_ghost_area" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_ghost_area" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_ghost_area(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_ghost_rapmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_ghost_rapmax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_ghost_rapmax" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_ghost_rapmax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_ghost_rapmax(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_ghost_maxrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_ghost_maxrap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_ghost_maxrap" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_ghost_maxrap" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_ghost_maxrap(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_ghost_etamax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_ghost_etamax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_ghost_etamax" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_ghost_etamax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_ghost_etamax(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_ghost_maxeta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_ghost_maxeta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_ghost_maxeta" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_ghost_maxeta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_ghost_maxeta(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_grid_scatter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_grid_scatter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_grid_scatter" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_grid_scatter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_grid_scatter(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_pt_scatter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_pt_scatter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_pt_scatter" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_pt_scatter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_pt_scatter(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_mean_ghost_pt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_mean_ghost_pt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_mean_ghost_pt" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_mean_ghost_pt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_mean_ghost_pt(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_repeat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_repeat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_repeat" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_repeat" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_repeat(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_kt_scatter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_kt_scatter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_kt_scatter" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_kt_scatter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_kt_scatter(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_mean_ghost_kt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_mean_ghost_kt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_mean_ghost_kt" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_mean_ghost_kt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_mean_ghost_kt(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_fj2_placement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_fj2_placement",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_fj2_placement" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GhostedAreaSpec_set_fj2_placement" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_fj2_placement(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_nphi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_nphi",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_nphi" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (int)((fastjet::GhostedAreaSpec const *)arg1)->nphi();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_nrap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_nrap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_nrap" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (int)((fastjet::GhostedAreaSpec const *)arg1)->nrap();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_get_random_status(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_get_random_status",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_get_random_status" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GhostedAreaSpec_get_random_status" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GhostedAreaSpec_get_random_status" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try {
      ((fastjet::GhostedAreaSpec const *)arg1)->get_random_status(*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_set_random_status(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_set_random_status",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_set_random_status" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GhostedAreaSpec_set_random_status" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GhostedAreaSpec_set_random_status" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  {
    try {
      (arg1)->set_random_status((std::vector< int,std::allocator< int > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_checkpoint_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_checkpoint_random",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_checkpoint_random" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      (arg1)->checkpoint_random();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_restore_checkpoint_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_restore_checkpoint_random",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_restore_checkpoint_random" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      (arg1)->restore_checkpoint_random();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_description" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = ((fastjet::GhostedAreaSpec const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_add_ghosts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GhostedAreaSpec_add_ghosts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_add_ghosts" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GhostedAreaSpec_add_ghosts" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GhostedAreaSpec_add_ghosts" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > * >(argp2);
  {
    try {
      ((fastjet::GhostedAreaSpec const *)arg1)->add_ghosts(*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_random_at_own_risk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_random_at_own_risk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_random_at_own_risk" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::GhostedAreaSpec const *)arg1)->random_at_own_risk();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec_generator_at_own_risk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::BasicRandom< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec_generator_at_own_risk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec_generator_at_own_risk" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (fastjet::BasicRandom< double > *) &((fastjet::GhostedAreaSpec const *)arg1)->generator_at_own_risk();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BasicRandomT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GhostedAreaSpec___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GhostedAreaSpec___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GhostedAreaSpec___str__" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = fastjet_GhostedAreaSpec___str__((fastjet::GhostedAreaSpec const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GhostedAreaSpec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = (fastjet::GhostedAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GhostedAreaSpec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GhostedAreaSpec" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GhostedAreaSpec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__GhostedAreaSpec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VoronoiAreaSpec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::VoronoiAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VoronoiAreaSpec")) SWIG_fail;
  {
    try {
      result = (fastjet::VoronoiAreaSpec *)new fastjet::VoronoiAreaSpec();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__VoronoiAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VoronoiAreaSpec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::VoronoiAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VoronoiAreaSpec",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VoronoiAreaSpec" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (fastjet::VoronoiAreaSpec *)new fastjet::VoronoiAreaSpec(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__VoronoiAreaSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VoronoiAreaSpec(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VoronoiAreaSpec__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VoronoiAreaSpec__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VoronoiAreaSpec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::VoronoiAreaSpec::VoronoiAreaSpec()\n"
    "    fastjet::VoronoiAreaSpec::VoronoiAreaSpec(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VoronoiAreaSpec_effective_Rfact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::VoronoiAreaSpec *arg1 = (fastjet::VoronoiAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VoronoiAreaSpec_effective_Rfact",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__VoronoiAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoronoiAreaSpec_effective_Rfact" "', argument " "1"" of type '" "fastjet::VoronoiAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::VoronoiAreaSpec * >(argp1);
  {
    try {
      result = (double)((fastjet::VoronoiAreaSpec const *)arg1)->effective_Rfact();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VoronoiAreaSpec_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::VoronoiAreaSpec *arg1 = (fastjet::VoronoiAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VoronoiAreaSpec_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__VoronoiAreaSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VoronoiAreaSpec_description" "', argument " "1"" of type '" "fastjet::VoronoiAreaSpec const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::VoronoiAreaSpec * >(argp1);
  {
    try {
      result = ((fastjet::VoronoiAreaSpec const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VoronoiAreaSpec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::VoronoiAreaSpec *arg1 = (fastjet::VoronoiAreaSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VoronoiAreaSpec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__VoronoiAreaSpec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VoronoiAreaSpec" "', argument " "1"" of type '" "fastjet::VoronoiAreaSpec *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::VoronoiAreaSpec * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VoronoiAreaSpec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__VoronoiAreaSpec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AreaDefinition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AreaDefinition")) SWIG_fail;
  {
    try {
      result = (fastjet::AreaDefinition *)new fastjet::AreaDefinition();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__AreaDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AreaDefinition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaType arg1 ;
  fastjet::GhostedAreaSpec *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::AreaDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AreaDefinition",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AreaDefinition" "', argument " "1"" of type '" "fastjet::AreaType""'");
  } 
  arg1 = static_cast< fastjet::AreaType >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AreaDefinition" "', argument " "2"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AreaDefinition" "', argument " "2"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp2);
  {
    try {
      result = (fastjet::AreaDefinition *)new fastjet::AreaDefinition(arg1,(fastjet::GhostedAreaSpec const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__AreaDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AreaDefinition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaType arg1 ;
  fastjet::VoronoiAreaSpec *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::AreaDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AreaDefinition",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AreaDefinition" "', argument " "1"" of type '" "fastjet::AreaType""'");
  } 
  arg1 = static_cast< fastjet::AreaType >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__VoronoiAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AreaDefinition" "', argument " "2"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AreaDefinition" "', argument " "2"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::VoronoiAreaSpec * >(argp2);
  {
    try {
      result = (fastjet::AreaDefinition *)new fastjet::AreaDefinition(arg1,(fastjet::VoronoiAreaSpec const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__AreaDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AreaDefinition__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::AreaDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AreaDefinition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AreaDefinition" "', argument " "1"" of type '" "fastjet::AreaType""'");
  } 
  arg1 = static_cast< fastjet::AreaType >(val1);
  {
    try {
      result = (fastjet::AreaDefinition *)new fastjet::AreaDefinition(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__AreaDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AreaDefinition__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = 0 ;
  fastjet::AreaType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::AreaDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AreaDefinition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AreaDefinition" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AreaDefinition" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AreaDefinition" "', argument " "2"" of type '" "fastjet::AreaType""'");
  } 
  arg2 = static_cast< fastjet::AreaType >(val2);
  {
    try {
      result = (fastjet::AreaDefinition *)new fastjet::AreaDefinition((fastjet::GhostedAreaSpec const &)*arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__AreaDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AreaDefinition__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GhostedAreaSpec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::AreaDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AreaDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AreaDefinition" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AreaDefinition" "', argument " "1"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp1);
  {
    try {
      result = (fastjet::AreaDefinition *)new fastjet::AreaDefinition((fastjet::GhostedAreaSpec const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__AreaDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AreaDefinition__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::VoronoiAreaSpec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::AreaDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AreaDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__VoronoiAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AreaDefinition" "', argument " "1"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AreaDefinition" "', argument " "1"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::VoronoiAreaSpec * >(argp1);
  {
    try {
      result = (fastjet::AreaDefinition *)new fastjet::AreaDefinition((fastjet::VoronoiAreaSpec const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__AreaDefinition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AreaDefinition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AreaDefinition__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AreaDefinition__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__VoronoiAreaSpec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AreaDefinition__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_AreaDefinition__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AreaDefinition__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__VoronoiAreaSpec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_AreaDefinition__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_AreaDefinition__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AreaDefinition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::AreaDefinition::AreaDefinition()\n"
    "    fastjet::AreaDefinition::AreaDefinition(fastjet::AreaType,fastjet::GhostedAreaSpec const &)\n"
    "    fastjet::AreaDefinition::AreaDefinition(fastjet::AreaType,fastjet::VoronoiAreaSpec const &)\n"
    "    fastjet::AreaDefinition::AreaDefinition(fastjet::AreaType)\n"
    "    fastjet::AreaDefinition::AreaDefinition(fastjet::GhostedAreaSpec const &,fastjet::AreaType)\n"
    "    fastjet::AreaDefinition::AreaDefinition(fastjet::GhostedAreaSpec const &)\n"
    "    fastjet::AreaDefinition::AreaDefinition(fastjet::VoronoiAreaSpec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AreaDefinition_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaDefinition *arg1 = (fastjet::AreaDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDefinition_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__AreaDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDefinition_description" "', argument " "1"" of type '" "fastjet::AreaDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::AreaDefinition * >(argp1);
  {
    try {
      result = ((fastjet::AreaDefinition const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDefinition_area_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaDefinition *arg1 = (fastjet::AreaDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::AreaType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDefinition_area_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__AreaDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDefinition_area_type" "', argument " "1"" of type '" "fastjet::AreaDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::AreaDefinition * >(argp1);
  {
    try {
      result = (fastjet::AreaType)((fastjet::AreaDefinition const *)arg1)->area_type();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDefinition_ghost_spec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaDefinition *arg1 = (fastjet::AreaDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDefinition_ghost_spec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__AreaDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDefinition_ghost_spec" "', argument " "1"" of type '" "fastjet::AreaDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::AreaDefinition * >(argp1);
  {
    try {
      result = (fastjet::GhostedAreaSpec *) &((fastjet::AreaDefinition const *)arg1)->ghost_spec();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDefinition_ghost_spec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaDefinition *arg1 = (fastjet::AreaDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::GhostedAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDefinition_ghost_spec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__AreaDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDefinition_ghost_spec" "', argument " "1"" of type '" "fastjet::AreaDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::AreaDefinition * >(argp1);
  {
    try {
      result = (fastjet::GhostedAreaSpec *) &(arg1)->ghost_spec();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GhostedAreaSpec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDefinition_ghost_spec(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__AreaDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AreaDefinition_ghost_spec__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__AreaDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AreaDefinition_ghost_spec__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AreaDefinition_ghost_spec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::AreaDefinition::ghost_spec() const\n"
    "    fastjet::AreaDefinition::ghost_spec()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AreaDefinition_voronoi_spec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaDefinition *arg1 = (fastjet::AreaDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::VoronoiAreaSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDefinition_voronoi_spec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__AreaDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDefinition_voronoi_spec" "', argument " "1"" of type '" "fastjet::AreaDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::AreaDefinition * >(argp1);
  {
    try {
      result = (fastjet::VoronoiAreaSpec *) &((fastjet::AreaDefinition const *)arg1)->voronoi_spec();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__VoronoiAreaSpec, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AreaDefinition___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaDefinition *arg1 = (fastjet::AreaDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AreaDefinition___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__AreaDefinition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AreaDefinition___str__" "', argument " "1"" of type '" "fastjet::AreaDefinition const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::AreaDefinition * >(argp1);
  {
    try {
      result = fastjet_AreaDefinition___str__((fastjet::AreaDefinition const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AreaDefinition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::AreaDefinition *arg1 = (fastjet::AreaDefinition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AreaDefinition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__AreaDefinition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AreaDefinition" "', argument " "1"" of type '" "fastjet::AreaDefinition *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::AreaDefinition * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AreaDefinition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__AreaDefinition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClusterSequenceAreaBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClusterSequenceAreaBase")) SWIG_fail;
  {
    try {
      result = (fastjet::ClusterSequenceAreaBase *)new fastjet::ClusterSequenceAreaBase();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequenceAreaBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterSequenceAreaBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequenceAreaBase" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->area((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_area_error",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_area_error" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->area_error((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_area_4vector" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceAreaBase const *)arg1)->area_4vector((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_is_pure_ghost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_is_pure_ghost" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceAreaBase const *)arg1)->is_pure_ghost((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_has_explicit_ghosts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceAreaBase_has_explicit_ghosts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_has_explicit_ghosts" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceAreaBase const *)arg1)->has_explicit_ghosts();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_empty_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_empty_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_empty_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->empty_area((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_empty_area_from_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  fastjet::Selector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceAreaBase_empty_area_from_jets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_empty_area_from_jets" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_empty_area_from_jets" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_empty_area_from_jets" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceAreaBase_empty_area_from_jets" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_empty_area_from_jets" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::Selector * >(argp3);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->empty_area_from_jets((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,(fastjet::Selector const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_n_empty_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_n_empty_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_n_empty_jets" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_n_empty_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_n_empty_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->n_empty_jets((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_median_pt_per_unit_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_median_pt_per_unit_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->median_pt_per_unit_area((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_median_pt_per_unit_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_median_pt_per_unit_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_area_4vector" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_area_4vector" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_area_4vector" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->median_pt_per_unit_area_4vector((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_median_pt_per_unit_something(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceAreaBase_median_pt_per_unit_something",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_something" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_something" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_something" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceAreaBase_median_pt_per_unit_something" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->median_pt_per_unit_something((fastjet::Selector const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  bool arg3 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ClusterSequenceAreaBase_get_median_rho_and_sigma",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      ((fastjet::ClusterSequenceAreaBase const *)arg1)->get_median_rho_and_sigma((fastjet::Selector const &)*arg2,arg3,*arg4,*arg5,*arg6);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  fastjet::Selector *arg3 = 0 ;
  bool arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:ClusterSequenceAreaBase_get_median_rho_and_sigma",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::Selector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  {
    try {
      ((fastjet::ClusterSequenceAreaBase const *)arg1)->get_median_rho_and_sigma((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,(fastjet::Selector const &)*arg3,arg4,*arg5,*arg6,*arg7,arg8);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  fastjet::Selector *arg3 = 0 ;
  bool arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ClusterSequenceAreaBase_get_median_rho_and_sigma",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::Selector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try {
      ((fastjet::ClusterSequenceAreaBase const *)arg1)->get_median_rho_and_sigma((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,(fastjet::Selector const &)*arg3,arg4,*arg5,*arg6,*arg7);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  bool arg3 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ClusterSequenceAreaBase_get_median_rho_and_sigma",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      ((fastjet::ClusterSequenceAreaBase const *)arg1)->get_median_rho_and_sigma((fastjet::Selector const &)*arg2,arg3,*arg4,*arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__Selector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__Selector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequenceAreaBase_get_median_rho_and_sigma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceAreaBase::get_median_rho_and_sigma(fastjet::Selector const &,bool,double &,double &,double &) const\n"
    "    fastjet::ClusterSequenceAreaBase::get_median_rho_and_sigma(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::Selector const &,bool,double &,double &,double &,bool) const\n"
    "    fastjet::ClusterSequenceAreaBase::get_median_rho_and_sigma(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::Selector const &,bool,double &,double &,double &) const\n"
    "    fastjet::ClusterSequenceAreaBase::get_median_rho_and_sigma(fastjet::Selector const &,bool,double &,double &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_parabolic_pt_per_unit_area__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  fastjet::Selector *arg4 = 0 ;
  double arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ClusterSequenceAreaBase_parabolic_pt_per_unit_area",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::Selector * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      ((fastjet::ClusterSequenceAreaBase const *)arg1)->parabolic_pt_per_unit_area(*arg2,*arg3,(fastjet::Selector const &)*arg4,arg5,arg6);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_parabolic_pt_per_unit_area__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  fastjet::Selector *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ClusterSequenceAreaBase_parabolic_pt_per_unit_area",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::Selector * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      ((fastjet::ClusterSequenceAreaBase const *)arg1)->parabolic_pt_per_unit_area(*arg2,*arg3,(fastjet::Selector const &)*arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_parabolic_pt_per_unit_area__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  fastjet::Selector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClusterSequenceAreaBase_parabolic_pt_per_unit_area",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::Selector * >(argp4);
  {
    try {
      ((fastjet::ClusterSequenceAreaBase const *)arg1)->parabolic_pt_per_unit_area(*arg2,*arg3,(fastjet::Selector const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_parabolic_pt_per_unit_area(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__Selector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ClusterSequenceAreaBase_parabolic_pt_per_unit_area__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__Selector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ClusterSequenceAreaBase_parabolic_pt_per_unit_area__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__Selector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_ClusterSequenceAreaBase_parabolic_pt_per_unit_area__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequenceAreaBase_parabolic_pt_per_unit_area'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceAreaBase::parabolic_pt_per_unit_area(double &,double &,fastjet::Selector const &,double,bool) const\n"
    "    fastjet::ClusterSequenceAreaBase::parabolic_pt_per_unit_area(double &,double &,fastjet::Selector const &,double) const\n"
    "    fastjet::ClusterSequenceAreaBase::parabolic_pt_per_unit_area(double &,double &,fastjet::Selector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_jets__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceAreaBase_subtracted_jets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_jets(arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_jets__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_subtracted_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_jets(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_jets__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceAreaBase_subtracted_jets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_jets((fastjet::Selector const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_jets__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceAreaBase_subtracted_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_jets((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_jets(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterSequenceAreaBase_subtracted_jets__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequenceAreaBase_subtracted_jets__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClusterSequenceAreaBase_subtracted_jets__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClusterSequenceAreaBase_subtracted_jets__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequenceAreaBase_subtracted_jets'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_jets(double const,double const) const\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_jets(double const) const\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_jets(fastjet::Selector const &,double const) const\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_jets(fastjet::Selector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_jet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceAreaBase_subtracted_jet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_jet" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_subtracted_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceAreaBase_subtracted_jet" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_jet((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_jet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::Selector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceAreaBase_subtracted_jet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_jet" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_subtracted_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_jet" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceAreaBase_subtracted_jet" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_jet" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::Selector * >(argp3);
  {
    try {
      result = ((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_jet((fastjet::PseudoJet const &)*arg2,(fastjet::Selector const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_jet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__Selector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequenceAreaBase_subtracted_jet__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClusterSequenceAreaBase_subtracted_jet__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequenceAreaBase_subtracted_jet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_jet(fastjet::PseudoJet const &,double const) const\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_jet(fastjet::PseudoJet const &,fastjet::Selector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_pt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClusterSequenceAreaBase_subtracted_pt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_pt((fastjet::PseudoJet const &)*arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_pt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceAreaBase_subtracted_pt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_pt((fastjet::PseudoJet const &)*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_pt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::Selector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClusterSequenceAreaBase_subtracted_pt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::Selector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_pt((fastjet::PseudoJet const &)*arg2,(fastjet::Selector const &)*arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_pt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceAreaBase *arg1 = (fastjet::ClusterSequenceAreaBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::Selector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceAreaBase_subtracted_pt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "1"" of type '" "fastjet::ClusterSequenceAreaBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceAreaBase_subtracted_pt" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::Selector * >(argp3);
  {
    try {
      result = (double)((fastjet::ClusterSequenceAreaBase const *)arg1)->subtracted_pt((fastjet::PseudoJet const &)*arg2,(fastjet::Selector const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceAreaBase_subtracted_pt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__Selector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterSequenceAreaBase_subtracted_pt__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClusterSequenceAreaBase_subtracted_pt__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__Selector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ClusterSequenceAreaBase_subtracted_pt__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ClusterSequenceAreaBase_subtracted_pt__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequenceAreaBase_subtracted_pt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_pt(fastjet::PseudoJet const &,double const,bool) const\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_pt(fastjet::PseudoJet const &,double const) const\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_pt(fastjet::PseudoJet const &,fastjet::Selector const &,bool) const\n"
    "    fastjet::ClusterSequenceAreaBase::subtracted_pt(fastjet::PseudoJet const &,fastjet::Selector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *ClusterSequenceAreaBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_n_hard_particles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceActiveAreaExplicitGhosts_n_hard_particles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_n_hard_particles" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  {
    try {
      result = (unsigned int)((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->n_hard_particles();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveAreaExplicitGhosts_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceActiveAreaExplicitGhosts_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->area((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveAreaExplicitGhosts_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_area_4vector" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceActiveAreaExplicitGhosts_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->area_4vector((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->is_pure_ghost((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->is_pure_ghost(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceActiveAreaExplicitGhosts::is_pure_ghost(fastjet::PseudoJet const &) const\n"
    "    fastjet::ClusterSequenceActiveAreaExplicitGhosts::is_pure_ghost(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_has_explicit_ghosts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceActiveAreaExplicitGhosts_has_explicit_ghosts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_has_explicit_ghosts" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->has_explicit_ghosts();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_empty_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveAreaExplicitGhosts_empty_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_empty_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceActiveAreaExplicitGhosts_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->empty_area((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_total_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceActiveAreaExplicitGhosts_total_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_total_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->total_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_max_ghost_perp2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceActiveAreaExplicitGhosts_max_ghost_perp2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_max_ghost_perp2" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->max_ghost_perp2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveAreaExplicitGhosts_has_dangerous_particles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceActiveAreaExplicitGhosts_has_dangerous_particles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveAreaExplicitGhosts_has_dangerous_particles" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceActiveAreaExplicitGhosts const *)arg1)->has_dangerous_particles();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceActiveAreaExplicitGhosts__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::GhostedAreaSpec *arg3 = 0 ;
  bool *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool temp4 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ClusterSequenceActiveAreaExplicitGhosts",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "4"" of type '" "bool""'");
  } 
  temp4 = static_cast< bool >(val4);
  arg4 = &temp4;
  {
    try {
      result = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *)new fastjet::ClusterSequenceActiveAreaExplicitGhosts((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::GhostedAreaSpec const &)*arg3,(bool const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceActiveAreaExplicitGhosts__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::GhostedAreaSpec *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterSequenceActiveAreaExplicitGhosts",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp3);
  {
    try {
      result = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *)new fastjet::ClusterSequenceActiveAreaExplicitGhosts((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::GhostedAreaSpec const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceActiveAreaExplicitGhosts__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  double arg4 ;
  bool *arg5 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  bool temp5 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ClusterSequenceActiveAreaExplicitGhosts",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "5"" of type '" "bool""'");
  } 
  temp5 = static_cast< bool >(val5);
  arg5 = &temp5;
  {
    try {
      result = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *)new fastjet::ClusterSequenceActiveAreaExplicitGhosts((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg3,arg4,(bool const &)*arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceActiveAreaExplicitGhosts__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  double arg4 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ClusterSequenceActiveAreaExplicitGhosts",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *)new fastjet::ClusterSequenceActiveAreaExplicitGhosts((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceActiveAreaExplicitGhosts(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClusterSequenceActiveAreaExplicitGhosts__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ClusterSequenceActiveAreaExplicitGhosts__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ClusterSequenceActiveAreaExplicitGhosts__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ClusterSequenceActiveAreaExplicitGhosts__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterSequenceActiveAreaExplicitGhosts'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceActiveAreaExplicitGhosts::ClusterSequenceActiveAreaExplicitGhosts(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::GhostedAreaSpec const &,bool const &)\n"
    "    fastjet::ClusterSequenceActiveAreaExplicitGhosts::ClusterSequenceActiveAreaExplicitGhosts(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::GhostedAreaSpec const &)\n"
    "    fastjet::ClusterSequenceActiveAreaExplicitGhosts::ClusterSequenceActiveAreaExplicitGhosts(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,double,bool const &)\n"
    "    fastjet::ClusterSequenceActiveAreaExplicitGhosts::ClusterSequenceActiveAreaExplicitGhosts(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequenceActiveAreaExplicitGhosts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveAreaExplicitGhosts *arg1 = (fastjet::ClusterSequenceActiveAreaExplicitGhosts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterSequenceActiveAreaExplicitGhosts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequenceActiveAreaExplicitGhosts" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveAreaExplicitGhosts *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveAreaExplicitGhosts * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterSequenceActiveAreaExplicitGhosts_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClusterSequenceActiveArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClusterSequenceActiveArea")) SWIG_fail;
  {
    try {
      result = (fastjet::ClusterSequenceActiveArea *)new fastjet::ClusterSequenceActiveArea();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveArea_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *arg1 = (fastjet::ClusterSequenceActiveArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveArea_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveArea_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceActiveArea_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceActiveArea_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveArea const *)arg1)->area((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveArea_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *arg1 = (fastjet::ClusterSequenceActiveArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveArea_area_error",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveArea_area_error" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceActiveArea_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceActiveArea_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveArea const *)arg1)->area_error((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveArea_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *arg1 = (fastjet::ClusterSequenceActiveArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveArea_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveArea_area_4vector" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceActiveArea_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceActiveArea_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceActiveArea const *)arg1)->area_4vector((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveArea_pt_per_unit_area__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *arg1 = (fastjet::ClusterSequenceActiveArea *) 0 ;
  fastjet::ClusterSequenceActiveArea::mean_pt_strategies arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterSequenceActiveArea_pt_per_unit_area",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveArea_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveArea * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequenceActiveArea_pt_per_unit_area" "', argument " "2"" of type '" "fastjet::ClusterSequenceActiveArea::mean_pt_strategies""'");
  } 
  arg2 = static_cast< fastjet::ClusterSequenceActiveArea::mean_pt_strategies >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceActiveArea_pt_per_unit_area" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveArea const *)arg1)->pt_per_unit_area(arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveArea_pt_per_unit_area__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *arg1 = (fastjet::ClusterSequenceActiveArea *) 0 ;
  fastjet::ClusterSequenceActiveArea::mean_pt_strategies arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveArea_pt_per_unit_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveArea_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveArea * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterSequenceActiveArea_pt_per_unit_area" "', argument " "2"" of type '" "fastjet::ClusterSequenceActiveArea::mean_pt_strategies""'");
  } 
  arg2 = static_cast< fastjet::ClusterSequenceActiveArea::mean_pt_strategies >(val2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveArea const *)arg1)->pt_per_unit_area(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveArea_pt_per_unit_area__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *arg1 = (fastjet::ClusterSequenceActiveArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceActiveArea_pt_per_unit_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveArea_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveArea * >(argp1);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveArea const *)arg1)->pt_per_unit_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveArea_pt_per_unit_area(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClusterSequenceActiveArea_pt_per_unit_area__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClusterSequenceActiveArea_pt_per_unit_area__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClusterSequenceActiveArea_pt_per_unit_area__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequenceActiveArea_pt_per_unit_area'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceActiveArea::pt_per_unit_area(fastjet::ClusterSequenceActiveArea::mean_pt_strategies,double) const\n"
    "    fastjet::ClusterSequenceActiveArea::pt_per_unit_area(fastjet::ClusterSequenceActiveArea::mean_pt_strategies) const\n"
    "    fastjet::ClusterSequenceActiveArea::pt_per_unit_area() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveArea_empty_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *arg1 = (fastjet::ClusterSequenceActiveArea *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveArea_empty_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveArea_empty_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceActiveArea_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceActiveArea_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveArea const *)arg1)->empty_area((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceActiveArea_n_empty_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *arg1 = (fastjet::ClusterSequenceActiveArea *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceActiveArea_n_empty_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceActiveArea_n_empty_jets" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceActiveArea_n_empty_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceActiveArea_n_empty_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceActiveArea const *)arg1)->n_empty_jets((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceActiveArea__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::GhostedAreaSpec *arg3 = 0 ;
  bool *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool temp4 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::ClusterSequenceActiveArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ClusterSequenceActiveArea",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceActiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceActiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceActiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterSequenceActiveArea" "', argument " "4"" of type '" "bool""'");
  } 
  temp4 = static_cast< bool >(val4);
  arg4 = &temp4;
  {
    try {
      result = (fastjet::ClusterSequenceActiveArea *)new fastjet::ClusterSequenceActiveArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::GhostedAreaSpec const &)*arg3,(bool const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceActiveArea__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::GhostedAreaSpec *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::ClusterSequenceActiveArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterSequenceActiveArea",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceActiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceActiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceActiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceActiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp3);
  {
    try {
      result = (fastjet::ClusterSequenceActiveArea *)new fastjet::ClusterSequenceActiveArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::GhostedAreaSpec const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceActiveArea(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClusterSequenceActiveArea__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClusterSequenceActiveArea__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ClusterSequenceActiveArea__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterSequenceActiveArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceActiveArea::ClusterSequenceActiveArea()\n"
    "    fastjet::ClusterSequenceActiveArea::ClusterSequenceActiveArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::GhostedAreaSpec const &,bool const &)\n"
    "    fastjet::ClusterSequenceActiveArea::ClusterSequenceActiveArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::GhostedAreaSpec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequenceActiveArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceActiveArea *arg1 = (fastjet::ClusterSequenceActiveArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterSequenceActiveArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequenceActiveArea" "', argument " "1"" of type '" "fastjet::ClusterSequenceActiveArea *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceActiveArea * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterSequenceActiveArea_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequenceActiveArea, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClusterSequence1GhostPassiveArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence1GhostPassiveArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClusterSequence1GhostPassiveArea")) SWIG_fail;
  {
    try {
      result = (fastjet::ClusterSequence1GhostPassiveArea *)new fastjet::ClusterSequence1GhostPassiveArea();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence1GhostPassiveArea, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequence1GhostPassiveArea_n_empty_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence1GhostPassiveArea *arg1 = (fastjet::ClusterSequence1GhostPassiveArea *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequence1GhostPassiveArea_n_empty_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence1GhostPassiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequence1GhostPassiveArea_n_empty_jets" "', argument " "1"" of type '" "fastjet::ClusterSequence1GhostPassiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence1GhostPassiveArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequence1GhostPassiveArea_n_empty_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequence1GhostPassiveArea_n_empty_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequence1GhostPassiveArea const *)arg1)->n_empty_jets((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequence1GhostPassiveArea__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::GhostedAreaSpec *arg3 = 0 ;
  bool *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool temp4 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::ClusterSequence1GhostPassiveArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ClusterSequence1GhostPassiveArea",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "4"" of type '" "bool""'");
  } 
  temp4 = static_cast< bool >(val4);
  arg4 = &temp4;
  {
    try {
      result = (fastjet::ClusterSequence1GhostPassiveArea *)new fastjet::ClusterSequence1GhostPassiveArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::GhostedAreaSpec const &)*arg3,(bool const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence1GhostPassiveArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequence1GhostPassiveArea__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::GhostedAreaSpec *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::ClusterSequence1GhostPassiveArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterSequence1GhostPassiveArea",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequence1GhostPassiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp3);
  {
    try {
      result = (fastjet::ClusterSequence1GhostPassiveArea *)new fastjet::ClusterSequence1GhostPassiveArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::GhostedAreaSpec const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequence1GhostPassiveArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequence1GhostPassiveArea(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClusterSequence1GhostPassiveArea__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClusterSequence1GhostPassiveArea__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ClusterSequence1GhostPassiveArea__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterSequence1GhostPassiveArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequence1GhostPassiveArea::ClusterSequence1GhostPassiveArea()\n"
    "    fastjet::ClusterSequence1GhostPassiveArea::ClusterSequence1GhostPassiveArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::GhostedAreaSpec const &,bool const &)\n"
    "    fastjet::ClusterSequence1GhostPassiveArea::ClusterSequence1GhostPassiveArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::GhostedAreaSpec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequence1GhostPassiveArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequence1GhostPassiveArea *arg1 = (fastjet::ClusterSequence1GhostPassiveArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterSequence1GhostPassiveArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequence1GhostPassiveArea, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequence1GhostPassiveArea" "', argument " "1"" of type '" "fastjet::ClusterSequence1GhostPassiveArea *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequence1GhostPassiveArea * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterSequence1GhostPassiveArea_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequence1GhostPassiveArea, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ClusterSequencePassiveArea_empty_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequencePassiveArea *arg1 = (fastjet::ClusterSequencePassiveArea *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequencePassiveArea_empty_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequencePassiveArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequencePassiveArea_empty_area" "', argument " "1"" of type '" "fastjet::ClusterSequencePassiveArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequencePassiveArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequencePassiveArea_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequencePassiveArea_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequencePassiveArea const *)arg1)->empty_area((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequencePassiveArea__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::GhostedAreaSpec *arg3 = 0 ;
  bool *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool temp4 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::ClusterSequencePassiveArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ClusterSequencePassiveArea",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequencePassiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequencePassiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequencePassiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequencePassiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequencePassiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequencePassiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterSequencePassiveArea" "', argument " "4"" of type '" "bool""'");
  } 
  temp4 = static_cast< bool >(val4);
  arg4 = &temp4;
  {
    try {
      result = (fastjet::ClusterSequencePassiveArea *)new fastjet::ClusterSequencePassiveArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::GhostedAreaSpec const &)*arg3,(bool const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequencePassiveArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequencePassiveArea__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::GhostedAreaSpec *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::ClusterSequencePassiveArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterSequencePassiveArea",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequencePassiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequencePassiveArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequencePassiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequencePassiveArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequencePassiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequencePassiveArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp3);
  {
    try {
      result = (fastjet::ClusterSequencePassiveArea *)new fastjet::ClusterSequencePassiveArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::GhostedAreaSpec const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequencePassiveArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequencePassiveArea(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClusterSequencePassiveArea__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ClusterSequencePassiveArea__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterSequencePassiveArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequencePassiveArea::ClusterSequencePassiveArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::GhostedAreaSpec const &,bool const &)\n"
    "    fastjet::ClusterSequencePassiveArea::ClusterSequencePassiveArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::GhostedAreaSpec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequencePassiveArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequencePassiveArea *arg1 = (fastjet::ClusterSequencePassiveArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterSequencePassiveArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequencePassiveArea, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequencePassiveArea" "', argument " "1"" of type '" "fastjet::ClusterSequencePassiveArea *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequencePassiveArea * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterSequencePassiveArea_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequencePassiveArea, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ClusterSequenceVoronoiArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceVoronoiArea *arg1 = (fastjet::ClusterSequenceVoronoiArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterSequenceVoronoiArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceVoronoiArea, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequenceVoronoiArea" "', argument " "1"" of type '" "fastjet::ClusterSequenceVoronoiArea *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceVoronoiArea * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceVoronoiArea_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceVoronoiArea *arg1 = (fastjet::ClusterSequenceVoronoiArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceVoronoiArea_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceVoronoiArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceVoronoiArea_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceVoronoiArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceVoronoiArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceVoronoiArea_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceVoronoiArea_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceVoronoiArea const *)arg1)->area((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceVoronoiArea_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceVoronoiArea *arg1 = (fastjet::ClusterSequenceVoronoiArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceVoronoiArea_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceVoronoiArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceVoronoiArea_area_4vector" "', argument " "1"" of type '" "fastjet::ClusterSequenceVoronoiArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceVoronoiArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceVoronoiArea_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceVoronoiArea_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceVoronoiArea const *)arg1)->area_4vector((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceVoronoiArea_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceVoronoiArea *arg1 = (fastjet::ClusterSequenceVoronoiArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceVoronoiArea_area_error",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceVoronoiArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceVoronoiArea_area_error" "', argument " "1"" of type '" "fastjet::ClusterSequenceVoronoiArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceVoronoiArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceVoronoiArea_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceVoronoiArea_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceVoronoiArea const *)arg1)->area_error((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceVoronoiArea__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::VoronoiAreaSpec *arg3 = 0 ;
  bool *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool temp4 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::ClusterSequenceVoronoiArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ClusterSequenceVoronoiArea",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__VoronoiAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "3"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "3"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::VoronoiAreaSpec * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "4"" of type '" "bool""'");
  } 
  temp4 = static_cast< bool >(val4);
  arg4 = &temp4;
  {
    try {
      result = (fastjet::ClusterSequenceVoronoiArea *)new fastjet::ClusterSequenceVoronoiArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::VoronoiAreaSpec const &)*arg3,(bool const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceVoronoiArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceVoronoiArea__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::VoronoiAreaSpec *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::ClusterSequenceVoronoiArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterSequenceVoronoiArea",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__VoronoiAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "3"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "3"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::VoronoiAreaSpec * >(argp3);
  {
    try {
      result = (fastjet::ClusterSequenceVoronoiArea *)new fastjet::ClusterSequenceVoronoiArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::VoronoiAreaSpec const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceVoronoiArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceVoronoiArea__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::ClusterSequenceVoronoiArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ClusterSequenceVoronoiArea",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceVoronoiArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  {
    try {
      result = (fastjet::ClusterSequenceVoronoiArea *)new fastjet::ClusterSequenceVoronoiArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceVoronoiArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceVoronoiArea(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ClusterSequenceVoronoiArea__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__VoronoiAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClusterSequenceVoronoiArea__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__VoronoiAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ClusterSequenceVoronoiArea__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterSequenceVoronoiArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceVoronoiArea::ClusterSequenceVoronoiArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::VoronoiAreaSpec const &,bool const &)\n"
    "    fastjet::ClusterSequenceVoronoiArea::ClusterSequenceVoronoiArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::VoronoiAreaSpec const &)\n"
    "    fastjet::ClusterSequenceVoronoiArea::ClusterSequenceVoronoiArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &)\n");
  return 0;
}


SWIGINTERN PyObject *ClusterSequenceVoronoiArea_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequenceVoronoiArea, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ClusterSequenceArea_area_def(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::AreaDefinition *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceArea_area_def",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_area_def" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  {
    try {
      result = (fastjet::AreaDefinition *) &((fastjet::ClusterSequenceArea const *)arg1)->area_def();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__AreaDefinition, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceArea_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_area" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceArea const *)arg1)->area((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_area_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceArea_area_error",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_area_error" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_area_error" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceArea const *)arg1)->area_error((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceArea_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_area_4vector" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_area_4vector" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::ClusterSequenceArea const *)arg1)->area_4vector((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_empty_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceArea_empty_area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_empty_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_empty_area" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceArea const *)arg1)->empty_area((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_n_empty_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceArea_n_empty_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_n_empty_jets" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_n_empty_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_n_empty_jets" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      result = (double)((fastjet::ClusterSequenceArea const *)arg1)->n_empty_jets((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_is_pure_ghost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterSequenceArea_is_pure_ghost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_is_pure_ghost" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_is_pure_ghost" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceArea const *)arg1)->is_pure_ghost((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_has_explicit_ghosts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterSequenceArea_has_explicit_ghosts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_has_explicit_ghosts" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  {
    try {
      result = (bool)((fastjet::ClusterSequenceArea const *)arg1)->has_explicit_ghosts();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_get_median_rho_and_sigma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  fastjet::Selector *arg3 = 0 ;
  bool arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:ClusterSequenceArea_get_median_rho_and_sigma",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::Selector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  {
    try {
      ((fastjet::ClusterSequenceArea const *)arg1)->get_median_rho_and_sigma((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,(fastjet::Selector const &)*arg3,arg4,*arg5,*arg6,*arg7,arg8);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_get_median_rho_and_sigma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  fastjet::Selector *arg3 = 0 ;
  bool arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ClusterSequenceArea_get_median_rho_and_sigma",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::Selector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "7"" of type '" "double &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "7"" of type '" "double &""'"); 
  }
  arg7 = reinterpret_cast< double * >(argp7);
  {
    try {
      ((fastjet::ClusterSequenceArea const *)arg1)->get_median_rho_and_sigma((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2,(fastjet::Selector const &)*arg3,arg4,*arg5,*arg6,*arg7);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_get_median_rho_and_sigma__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  bool arg3 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ClusterSequenceArea_get_median_rho_and_sigma",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      ((fastjet::ClusterSequenceArea const *)arg1)->get_median_rho_and_sigma((fastjet::Selector const &)*arg2,arg3,*arg4,*arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_get_median_rho_and_sigma__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  bool arg3 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ClusterSequenceArea_get_median_rho_and_sigma",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "5"" of type '" "double &""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_get_median_rho_and_sigma" "', argument " "6"" of type '" "double &""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      ((fastjet::ClusterSequenceArea const *)arg1)->get_median_rho_and_sigma((fastjet::Selector const &)*arg2,arg3,*arg4,*arg5,*arg6);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_get_median_rho_and_sigma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[9] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_ClusterSequenceArea_get_median_rho_and_sigma__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_ClusterSequenceArea_get_median_rho_and_sigma__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__Selector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_ClusterSequenceArea_get_median_rho_and_sigma__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__Selector, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_double, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_double, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_ClusterSequenceArea_get_median_rho_and_sigma__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequenceArea_get_median_rho_and_sigma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceArea::get_median_rho_and_sigma(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::Selector const &,bool,double &,double &,double &,bool) const\n"
    "    fastjet::ClusterSequenceArea::get_median_rho_and_sigma(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::Selector const &,bool,double &,double &,double &) const\n"
    "    fastjet::ClusterSequenceArea::get_median_rho_and_sigma(fastjet::Selector const &,bool,double &,double &) const\n"
    "    fastjet::ClusterSequenceArea::get_median_rho_and_sigma(fastjet::Selector const &,bool,double &,double &,double &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_parabolic_pt_per_unit_area__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  fastjet::Selector *arg4 = 0 ;
  double arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ClusterSequenceArea_parabolic_pt_per_unit_area",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::Selector * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      ((fastjet::ClusterSequenceArea const *)arg1)->parabolic_pt_per_unit_area(*arg2,*arg3,(fastjet::Selector const &)*arg4,arg5,arg6);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_parabolic_pt_per_unit_area__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  fastjet::Selector *arg4 = 0 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ClusterSequenceArea_parabolic_pt_per_unit_area",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::Selector * >(argp4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      ((fastjet::ClusterSequenceArea const *)arg1)->parabolic_pt_per_unit_area(*arg2,*arg3,(fastjet::Selector const &)*arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_parabolic_pt_per_unit_area__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  fastjet::Selector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClusterSequenceArea_parabolic_pt_per_unit_area",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "3"" of type '" "double &""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterSequenceArea_parabolic_pt_per_unit_area" "', argument " "4"" of type '" "fastjet::Selector const &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::Selector * >(argp4);
  {
    try {
      ((fastjet::ClusterSequenceArea const *)arg1)->parabolic_pt_per_unit_area(*arg2,*arg3,(fastjet::Selector const &)*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterSequenceArea_parabolic_pt_per_unit_area(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__Selector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ClusterSequenceArea_parabolic_pt_per_unit_area__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__Selector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ClusterSequenceArea_parabolic_pt_per_unit_area__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__ClusterSequenceArea, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_fastjet__Selector, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_ClusterSequenceArea_parabolic_pt_per_unit_area__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterSequenceArea_parabolic_pt_per_unit_area'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceArea::parabolic_pt_per_unit_area(double &,double &,fastjet::Selector const &,double,bool) const\n"
    "    fastjet::ClusterSequenceArea::parabolic_pt_per_unit_area(double &,double &,fastjet::Selector const &,double) const\n"
    "    fastjet::ClusterSequenceArea::parabolic_pt_per_unit_area(double &,double &,fastjet::Selector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceArea__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::AreaDefinition *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::ClusterSequenceArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterSequenceArea",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__AreaDefinition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceArea" "', argument " "3"" of type '" "fastjet::AreaDefinition const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceArea" "', argument " "3"" of type '" "fastjet::AreaDefinition const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::AreaDefinition * >(argp3);
  {
    try {
      result = (fastjet::ClusterSequenceArea *)new fastjet::ClusterSequenceArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::AreaDefinition const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceArea__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::GhostedAreaSpec *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::ClusterSequenceArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterSequenceArea",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__GhostedAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceArea" "', argument " "3"" of type '" "fastjet::GhostedAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::GhostedAreaSpec * >(argp3);
  {
    try {
      result = (fastjet::ClusterSequenceArea *)new fastjet::ClusterSequenceArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::GhostedAreaSpec const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceArea__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::VoronoiAreaSpec *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::ClusterSequenceArea *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterSequenceArea",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterSequenceArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceArea" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClusterSequenceArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceArea" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__VoronoiAreaSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClusterSequenceArea" "', argument " "3"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterSequenceArea" "', argument " "3"" of type '" "fastjet::VoronoiAreaSpec const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::VoronoiAreaSpec * >(argp3);
  {
    try {
      result = (fastjet::ClusterSequenceArea *)new fastjet::ClusterSequenceArea((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::VoronoiAreaSpec const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__ClusterSequenceArea, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterSequenceArea(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__AreaDefinition, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClusterSequenceArea__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__GhostedAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClusterSequenceArea__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__VoronoiAreaSpec, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClusterSequenceArea__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterSequenceArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::ClusterSequenceArea::ClusterSequenceArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::AreaDefinition const &)\n"
    "    fastjet::ClusterSequenceArea::ClusterSequenceArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::GhostedAreaSpec const &)\n"
    "    fastjet::ClusterSequenceArea::ClusterSequenceArea(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition const &,fastjet::VoronoiAreaSpec const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterSequenceArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::ClusterSequenceArea *arg1 = (fastjet::ClusterSequenceArea *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterSequenceArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__ClusterSequenceArea, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterSequenceArea" "', argument " "1"" of type '" "fastjet::ClusterSequenceArea *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::ClusterSequenceArea * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterSequenceArea_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__ClusterSequenceArea, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UserInfoPython(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  fastjet::UserInfoPython *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UserInfoPython",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = (fastjet::UserInfoPython *)new fastjet::UserInfoPython(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__UserInfoPython, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UserInfoPython_get_pyobj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::UserInfoPython *arg1 = (fastjet::UserInfoPython *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UserInfoPython_get_pyobj",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__UserInfoPython, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UserInfoPython_get_pyobj" "', argument " "1"" of type '" "fastjet::UserInfoPython const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::UserInfoPython * >(argp1);
  {
    try {
      result = (PyObject *)((fastjet::UserInfoPython const *)arg1)->get_pyobj();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UserInfoPython(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::UserInfoPython *arg1 = (fastjet::UserInfoPython *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UserInfoPython",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__UserInfoPython, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UserInfoPython" "', argument " "1"" of type '" "fastjet::UserInfoPython *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::UserInfoPython * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UserInfoPython_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__UserInfoPython, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_cpp_string_from_py_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cpp_string_from_py_str",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = fastjet::cpp_string_from_py_str(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpp_string_from_str_py_obj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cpp_string_from_str_py_obj",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = fastjet::cpp_string_from_str_py_obj(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpp_string_from_name_py_obj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:cpp_string_from_name_py_obj",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = fastjet::cpp_string_from_name_py_obj(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SelectorWorkerPython(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  fastjet::SelectorWorkerPython *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SelectorWorkerPython",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = (fastjet::SelectorWorkerPython *)new fastjet::SelectorWorkerPython(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__SelectorWorkerPython, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SelectorWorkerPython(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorkerPython *arg1 = (fastjet::SelectorWorkerPython *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SelectorWorkerPython",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorkerPython, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SelectorWorkerPython" "', argument " "1"" of type '" "fastjet::SelectorWorkerPython *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorkerPython * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorkerPython_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorkerPython *arg1 = (fastjet::SelectorWorkerPython *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorWorkerPython_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorkerPython, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorkerPython_description" "', argument " "1"" of type '" "fastjet::SelectorWorkerPython const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorkerPython * >(argp1);
  {
    try {
      result = ((fastjet::SelectorWorkerPython const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelectorWorkerPython__pass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::SelectorWorkerPython *arg1 = (fastjet::SelectorWorkerPython *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelectorWorkerPython__pass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__SelectorWorkerPython, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelectorWorkerPython__pass" "', argument " "1"" of type '" "fastjet::SelectorWorkerPython const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::SelectorWorkerPython * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelectorWorkerPython__pass" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelectorWorkerPython__pass" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (bool)((fastjet::SelectorWorkerPython const *)arg1)->pass((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SelectorWorkerPython_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__SelectorWorkerPython, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SelectorPython(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Selector result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelectorPython",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = fastjet::SelectorPython(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::Selector(static_cast< const fastjet::Selector& >(result))), SWIGTYPE_p_fastjet__Selector, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RecombinerPython(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  fastjet::RecombinerPython *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RecombinerPython",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = (fastjet::RecombinerPython *)new fastjet::RecombinerPython(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RecombinerPython, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RecombinerPython(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RecombinerPython *arg1 = (fastjet::RecombinerPython *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RecombinerPython",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RecombinerPython, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RecombinerPython" "', argument " "1"" of type '" "fastjet::RecombinerPython *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RecombinerPython * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RecombinerPython_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RecombinerPython *arg1 = (fastjet::RecombinerPython *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RecombinerPython_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RecombinerPython, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RecombinerPython_description" "', argument " "1"" of type '" "fastjet::RecombinerPython const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RecombinerPython * >(argp1);
  {
    try {
      result = ((fastjet::RecombinerPython const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RecombinerPython_recombine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RecombinerPython *arg1 = (fastjet::RecombinerPython *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RecombinerPython_recombine",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RecombinerPython, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RecombinerPython_recombine" "', argument " "1"" of type '" "fastjet::RecombinerPython const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RecombinerPython * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RecombinerPython_recombine" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RecombinerPython_recombine" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RecombinerPython_recombine" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RecombinerPython_recombine" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RecombinerPython_recombine" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RecombinerPython_recombine" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      ((fastjet::RecombinerPython const *)arg1)->recombine((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3,*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RecombinerPython_preprocess(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RecombinerPython *arg1 = (fastjet::RecombinerPython *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RecombinerPython_preprocess",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RecombinerPython, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RecombinerPython_preprocess" "', argument " "1"" of type '" "fastjet::RecombinerPython const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RecombinerPython * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RecombinerPython_preprocess" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RecombinerPython_preprocess" "', argument " "2"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      ((fastjet::RecombinerPython const *)arg1)->preprocess(*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RecombinerPython_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__RecombinerPython, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_JetDefinition0Param__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::RecombinationScheme arg2 ;
  fastjet::Strategy arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JetDefinition0Param",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition0Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition0Param" "', argument " "2"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg2 = static_cast< fastjet::RecombinationScheme >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetDefinition0Param" "', argument " "3"" of type '" "fastjet::Strategy""'");
  } 
  arg3 = static_cast< fastjet::Strategy >(val3);
  {
    try {
      result = fastjet::JetDefinition0Param(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition0Param__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::RecombinationScheme arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition0Param",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition0Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition0Param" "', argument " "2"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg2 = static_cast< fastjet::RecombinationScheme >(val2);
  {
    try {
      result = fastjet::JetDefinition0Param(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition0Param__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetDefinition0Param",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition0Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  {
    try {
      result = fastjet::JetDefinition0Param(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition0Param(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_JetDefinition0Param__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JetDefinition0Param__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JetDefinition0Param__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetDefinition0Param'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetDefinition0Param(fastjet::JetAlgorithm,fastjet::RecombinationScheme,fastjet::Strategy)\n"
    "    fastjet::JetDefinition0Param(fastjet::JetAlgorithm,fastjet::RecombinationScheme)\n"
    "    fastjet::JetDefinition0Param(fastjet::JetAlgorithm)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetDefinition1Param__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::RecombinationScheme arg3 ;
  fastjet::Strategy arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:JetDefinition1Param",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition1Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition1Param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetDefinition1Param" "', argument " "3"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg3 = static_cast< fastjet::RecombinationScheme >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JetDefinition1Param" "', argument " "4"" of type '" "fastjet::Strategy""'");
  } 
  arg4 = static_cast< fastjet::Strategy >(val4);
  {
    try {
      result = fastjet::JetDefinition1Param(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition1Param__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::RecombinationScheme arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JetDefinition1Param",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition1Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition1Param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetDefinition1Param" "', argument " "3"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg3 = static_cast< fastjet::RecombinationScheme >(val3);
  {
    try {
      result = fastjet::JetDefinition1Param(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition1Param__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetDefinition1Param",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition1Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition1Param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = fastjet::JetDefinition1Param(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition1Param(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JetDefinition1Param__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JetDefinition1Param__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_JetDefinition1Param__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetDefinition1Param'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetDefinition1Param(fastjet::JetAlgorithm,double,fastjet::RecombinationScheme,fastjet::Strategy)\n"
    "    fastjet::JetDefinition1Param(fastjet::JetAlgorithm,double,fastjet::RecombinationScheme)\n"
    "    fastjet::JetDefinition1Param(fastjet::JetAlgorithm,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetDefinition2Param__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  fastjet::RecombinationScheme arg4 ;
  fastjet::Strategy arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:JetDefinition2Param",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition2Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition2Param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetDefinition2Param" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JetDefinition2Param" "', argument " "4"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg4 = static_cast< fastjet::RecombinationScheme >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "JetDefinition2Param" "', argument " "5"" of type '" "fastjet::Strategy""'");
  } 
  arg5 = static_cast< fastjet::Strategy >(val5);
  {
    try {
      result = fastjet::JetDefinition2Param(arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition2Param__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  fastjet::RecombinationScheme arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:JetDefinition2Param",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition2Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition2Param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetDefinition2Param" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JetDefinition2Param" "', argument " "4"" of type '" "fastjet::RecombinationScheme""'");
  } 
  arg4 = static_cast< fastjet::RecombinationScheme >(val4);
  {
    try {
      result = fastjet::JetDefinition2Param(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition2Param__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetDefinition result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JetDefinition2Param",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JetDefinition2Param" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetDefinition2Param" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JetDefinition2Param" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = fastjet::JetDefinition2Param(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::JetDefinition(static_cast< const fastjet::JetDefinition& >(result))), SWIGTYPE_p_fastjet__JetDefinition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetDefinition2Param(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JetDefinition2Param__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_JetDefinition2Param__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_JetDefinition2Param__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetDefinition2Param'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetDefinition2Param(fastjet::JetAlgorithm,double,double,fastjet::RecombinationScheme,fastjet::Strategy)\n"
    "    fastjet::JetDefinition2Param(fastjet::JetAlgorithm,double,double,fastjet::RecombinationScheme)\n"
    "    fastjet::JetDefinition2Param(fastjet::JetAlgorithm,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FunctionOfPseudoJetDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< double > *arg1 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FunctionOfPseudoJetDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FunctionOfPseudoJetDouble" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< double > *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetDouble_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< double > *arg1 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FunctionOfPseudoJetDouble_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetDouble_description" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp1);
  {
    try {
      result = ((fastjet::FunctionOfPseudoJet< double > const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetDouble_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< double > *arg1 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FunctionOfPseudoJetDouble_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetDouble_result" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FunctionOfPseudoJetDouble_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionOfPseudoJetDouble_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::FunctionOfPseudoJet< double > const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetDouble___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< double > *arg1 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FunctionOfPseudoJetDouble___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetDouble___call__" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FunctionOfPseudoJetDouble___call__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionOfPseudoJetDouble___call__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::FunctionOfPseudoJet< double > const *)arg1)->operator ()((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetDouble___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< double > *arg1 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FunctionOfPseudoJetDouble___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetDouble___call__" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FunctionOfPseudoJetDouble___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionOfPseudoJetDouble___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((fastjet::FunctionOfPseudoJet< double > const *)arg1)->operator ()((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new std::vector< double,std::allocator< double > >(static_cast< const std::vector< double,std::allocator< double > >& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetDouble___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FunctionOfPseudoJetDouble___call____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FunctionOfPseudoJetDouble___call____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FunctionOfPseudoJetDouble___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::FunctionOfPseudoJet< double >::operator ()(fastjet::PseudoJet const &) const\n"
    "    fastjet::FunctionOfPseudoJet< double >::operator ()(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetDouble___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< double > *arg1 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FunctionOfPseudoJetDouble___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetDouble___str__" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp1);
  {
    try {
      result = fastjet_FunctionOfPseudoJet_Sl_double_Sg____str__((fastjet::FunctionOfPseudoJet< double > const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FunctionOfPseudoJetDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_FunctionOfPseudoJetPseudoJet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *arg1 = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FunctionOfPseudoJetPseudoJet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FunctionOfPseudoJetPseudoJet" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetPseudoJet_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *arg1 = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FunctionOfPseudoJetPseudoJet_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetPseudoJet_description" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = ((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetPseudoJet_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *arg1 = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FunctionOfPseudoJetPseudoJet_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetPseudoJet_result" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FunctionOfPseudoJetPseudoJet_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionOfPseudoJetPseudoJet_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetPseudoJet___call____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *arg1 = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FunctionOfPseudoJetPseudoJet___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetPseudoJet___call__" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FunctionOfPseudoJetPseudoJet___call__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionOfPseudoJetPseudoJet___call__" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *)arg1)->operator ()((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetPseudoJet___call____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *arg1 = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FunctionOfPseudoJetPseudoJet___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetPseudoJet___call__" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FunctionOfPseudoJetPseudoJet___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctionOfPseudoJetPseudoJet___call__" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *)arg1)->operator ()((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetPseudoJet___call__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FunctionOfPseudoJetPseudoJet___call____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FunctionOfPseudoJetPseudoJet___call____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FunctionOfPseudoJetPseudoJet___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::FunctionOfPseudoJet< fastjet::PseudoJet >::operator ()(fastjet::PseudoJet const &) const\n"
    "    fastjet::FunctionOfPseudoJet< fastjet::PseudoJet >::operator ()(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FunctionOfPseudoJetPseudoJet___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *arg1 = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FunctionOfPseudoJetPseudoJet___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionOfPseudoJetPseudoJet___str__" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > * >(argp1);
  {
    try {
      result = fastjet_FunctionOfPseudoJet_Sl_fastjet_PseudoJet_Sg____str__((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FunctionOfPseudoJetPseudoJet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Transformer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Transformer *arg1 = (fastjet::Transformer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Transformer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Transformer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transformer" "', argument " "1"" of type '" "fastjet::Transformer *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Transformer * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transformer_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Transformer *arg1 = (fastjet::Transformer *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Transformer_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Transformer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transformer_result" "', argument " "1"" of type '" "fastjet::Transformer const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Transformer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transformer_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transformer_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::Transformer const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Transformer_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Transformer *arg1 = (fastjet::Transformer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Transformer_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Transformer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transformer_description" "', argument " "1"" of type '" "fastjet::Transformer const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Transformer * >(argp1);
  {
    try {
      result = ((fastjet::Transformer const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Transformer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Transformer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Boost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Boost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Boost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Boost" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Boost" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::Boost *)new fastjet::Boost((fastjet::PseudoJet const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Boost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boost_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Boost *arg1 = (fastjet::Boost *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boost_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Boost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boost_result" "', argument " "1"" of type '" "fastjet::Boost const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Boost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boost_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boost_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::Boost const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boost___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Boost *arg1 = (fastjet::Boost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Boost___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Boost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boost___str__" "', argument " "1"" of type '" "fastjet::Boost const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Boost * >(argp1);
  {
    try {
      result = fastjet_Boost___str__((fastjet::Boost const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Boost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Boost *arg1 = (fastjet::Boost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Boost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Boost, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Boost" "', argument " "1"" of type '" "fastjet::Boost *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Boost * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Boost_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Boost, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Unboost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Unboost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Unboost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Unboost" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Unboost" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::Unboost *)new fastjet::Unboost((fastjet::PseudoJet const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Unboost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unboost_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Unboost *arg1 = (fastjet::Unboost *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Unboost_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Unboost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unboost_result" "', argument " "1"" of type '" "fastjet::Unboost const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Unboost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Unboost_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Unboost_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::Unboost const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Unboost___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Unboost *arg1 = (fastjet::Unboost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Unboost___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Unboost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Unboost___str__" "', argument " "1"" of type '" "fastjet::Unboost const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Unboost * >(argp1);
  {
    try {
      result = fastjet_Unboost___str__((fastjet::Unboost const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Unboost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Unboost *arg1 = (fastjet::Unboost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Unboost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Unboost, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Unboost" "', argument " "1"" of type '" "fastjet::Unboost *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Unboost * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Unboost_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Unboost, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Recluster__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Recluster")) SWIG_fail;
  {
    try {
      result = (fastjet::Recluster *)new fastjet::Recluster();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Recluster, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Recluster__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = 0 ;
  bool arg2 ;
  fastjet::Recluster::Keep arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::Recluster *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Recluster",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Recluster" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Recluster" "', argument " "3"" of type '" "fastjet::Recluster::Keep""'");
  } 
  arg3 = static_cast< fastjet::Recluster::Keep >(val3);
  {
    try {
      result = (fastjet::Recluster *)new fastjet::Recluster((fastjet::JetDefinition const &)*arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Recluster, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Recluster__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Recluster *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Recluster",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Recluster" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (fastjet::Recluster *)new fastjet::Recluster((fastjet::JetDefinition const &)*arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Recluster, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Recluster__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Recluster *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Recluster",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  {
    try {
      result = (fastjet::Recluster *)new fastjet::Recluster((fastjet::JetDefinition const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Recluster, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Recluster__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  fastjet::Recluster::Keep arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::Recluster *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Recluster",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Recluster" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Recluster" "', argument " "3"" of type '" "fastjet::Recluster::Keep""'");
  } 
  arg3 = static_cast< fastjet::Recluster::Keep >(val3);
  {
    try {
      result = (fastjet::Recluster *)new fastjet::Recluster(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Recluster, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Recluster__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Recluster *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Recluster",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Recluster" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::Recluster *)new fastjet::Recluster(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Recluster, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Recluster__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  fastjet::Recluster::Keep arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Recluster *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Recluster",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Recluster" "', argument " "2"" of type '" "fastjet::Recluster::Keep""'");
  } 
  arg2 = static_cast< fastjet::Recluster::Keep >(val2);
  {
    try {
      result = (fastjet::Recluster *)new fastjet::Recluster(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Recluster, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Recluster__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Recluster *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Recluster",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Recluster" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  {
    try {
      result = (fastjet::Recluster *)new fastjet::Recluster(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Recluster, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Recluster(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Recluster__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Recluster__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Recluster__SWIG_7(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Recluster__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Recluster__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Recluster__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Recluster__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Recluster__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Recluster'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Recluster::Recluster()\n"
    "    fastjet::Recluster::Recluster(fastjet::JetDefinition const &,bool,fastjet::Recluster::Keep)\n"
    "    fastjet::Recluster::Recluster(fastjet::JetDefinition const &,bool)\n"
    "    fastjet::Recluster::Recluster(fastjet::JetDefinition const &)\n"
    "    fastjet::Recluster::Recluster(fastjet::JetAlgorithm,double,fastjet::Recluster::Keep)\n"
    "    fastjet::Recluster::Recluster(fastjet::JetAlgorithm,double)\n"
    "    fastjet::Recluster::Recluster(fastjet::JetAlgorithm,fastjet::Recluster::Keep)\n"
    "    fastjet::Recluster::Recluster(fastjet::JetAlgorithm)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Recluster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Recluster",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Recluster" "', argument " "1"" of type '" "fastjet::Recluster *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_set_acquire_recombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Recluster_set_acquire_recombiner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_set_acquire_recombiner" "', argument " "1"" of type '" "fastjet::Recluster *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recluster_set_acquire_recombiner" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_acquire_recombiner(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_acquire_recombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Recluster_acquire_recombiner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_acquire_recombiner" "', argument " "1"" of type '" "fastjet::Recluster const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  {
    try {
      result = (bool)((fastjet::Recluster const *)arg1)->acquire_recombiner();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_set_cambridge_optimisation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Recluster_set_cambridge_optimisation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_set_cambridge_optimisation" "', argument " "1"" of type '" "fastjet::Recluster *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recluster_set_cambridge_optimisation" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_cambridge_optimisation(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_set_cambridge_optimization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Recluster_set_cambridge_optimization",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_set_cambridge_optimization" "', argument " "1"" of type '" "fastjet::Recluster *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recluster_set_cambridge_optimization" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_cambridge_optimization(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_cambridge_optimization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Recluster_cambridge_optimization",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_cambridge_optimization" "', argument " "1"" of type '" "fastjet::Recluster *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  {
    try {
      result = (bool)(arg1)->cambridge_optimization();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_cambridge_optimisation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Recluster_cambridge_optimisation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_cambridge_optimisation" "', argument " "1"" of type '" "fastjet::Recluster *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  {
    try {
      result = (bool)(arg1)->cambridge_optimisation();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_set_keep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  fastjet::Recluster::Keep arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Recluster_set_keep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_set_keep" "', argument " "1"" of type '" "fastjet::Recluster *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Recluster_set_keep" "', argument " "2"" of type '" "fastjet::Recluster::Keep""'");
  } 
  arg2 = static_cast< fastjet::Recluster::Keep >(val2);
  {
    try {
      (arg1)->set_keep(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_keep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Recluster::Keep result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Recluster_keep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_keep" "', argument " "1"" of type '" "fastjet::Recluster const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  {
    try {
      result = (fastjet::Recluster::Keep)((fastjet::Recluster const *)arg1)->keep();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Recluster_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_description" "', argument " "1"" of type '" "fastjet::Recluster const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  {
    try {
      result = ((fastjet::Recluster const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Recluster_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_result" "', argument " "1"" of type '" "fastjet::Recluster const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Recluster_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Recluster_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::Recluster const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_get_new_jets_and_def(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Recluster_get_new_jets_and_def",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_get_new_jets_and_def" "', argument " "1"" of type '" "fastjet::Recluster const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Recluster_get_new_jets_and_def" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Recluster_get_new_jets_and_def" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Recluster_get_new_jets_and_def" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Recluster_get_new_jets_and_def" "', argument " "3"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > * >(argp3);
  {
    try {
      result = (bool)((fastjet::Recluster const *)arg1)->get_new_jets_and_def((fastjet::PseudoJet const &)*arg2,*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster_generate_output_jet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Recluster_generate_output_jet",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster_generate_output_jet" "', argument " "1"" of type '" "fastjet::Recluster const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Recluster_generate_output_jet" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Recluster_generate_output_jet" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Recluster_generate_output_jet" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = ((fastjet::Recluster const *)arg1)->generate_output_jet(*arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Recluster___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Recluster *arg1 = (fastjet::Recluster *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Recluster___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Recluster, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Recluster___str__" "', argument " "1"" of type '" "fastjet::Recluster const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Recluster * >(argp1);
  {
    try {
      result = fastjet_Recluster___str__((fastjet::Recluster const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Recluster_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Recluster, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Filter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Filter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Filter")) SWIG_fail;
  {
    try {
      result = (fastjet::Filter *)new fastjet::Filter();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition arg1 ;
  fastjet::Selector arg2 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::Filter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Filter",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Filter" "', argument " "1"" of type '" "fastjet::JetDefinition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Filter" "', argument " "1"" of type '" "fastjet::JetDefinition""'");
    } else {
      fastjet::JetDefinition * temp = reinterpret_cast< fastjet::JetDefinition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'");
    } else {
      fastjet::Selector * temp = reinterpret_cast< fastjet::Selector * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Filter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::Filter *)new fastjet::Filter(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition arg1 ;
  fastjet::Selector arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Filter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Filter",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Filter" "', argument " "1"" of type '" "fastjet::JetDefinition""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Filter" "', argument " "1"" of type '" "fastjet::JetDefinition""'");
    } else {
      fastjet::JetDefinition * temp = reinterpret_cast< fastjet::JetDefinition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'");
    } else {
      fastjet::Selector * temp = reinterpret_cast< fastjet::Selector * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (fastjet::Filter *)new fastjet::Filter(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  fastjet::Selector arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::Filter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Filter",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Filter" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'");
    } else {
      fastjet::Selector * temp = reinterpret_cast< fastjet::Selector * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Filter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::Filter *)new fastjet::Filter(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  fastjet::Selector arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Filter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Filter",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Filter" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'");
    } else {
      fastjet::Selector * temp = reinterpret_cast< fastjet::Selector * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (fastjet::Filter *)new fastjet::Filter(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< double > *arg1 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  fastjet::Selector arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::Filter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Filter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Filter" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< double > *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'");
    } else {
      fastjet::Selector * temp = reinterpret_cast< fastjet::Selector * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Filter" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::Filter *)new fastjet::Filter(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FunctionOfPseudoJet< double > *arg1 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  fastjet::Selector arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Filter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Filter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Filter" "', argument " "1"" of type '" "fastjet::FunctionOfPseudoJet< double > *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Filter" "', argument " "2"" of type '" "fastjet::Selector""'");
    } else {
      fastjet::Selector * temp = reinterpret_cast< fastjet::Selector * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (fastjet::Filter *)new fastjet::Filter(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Filter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Filter(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Filter__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Filter__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Filter__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Filter__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Filter__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Filter__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__Selector, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Filter__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Filter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Filter::Filter()\n"
    "    fastjet::Filter::Filter(fastjet::JetDefinition,fastjet::Selector,double)\n"
    "    fastjet::Filter::Filter(fastjet::JetDefinition,fastjet::Selector)\n"
    "    fastjet::Filter::Filter(double,fastjet::Selector,double)\n"
    "    fastjet::Filter::Filter(double,fastjet::Selector)\n"
    "    fastjet::Filter::Filter(fastjet::FunctionOfPseudoJet< double > *,fastjet::Selector,double)\n"
    "    fastjet::Filter::Filter(fastjet::FunctionOfPseudoJet< double > *,fastjet::Selector)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Filter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Filter *arg1 = (fastjet::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Filter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Filter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Filter" "', argument " "1"" of type '" "fastjet::Filter *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Filter * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_set_subtractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Filter *arg1 = (fastjet::Filter *) 0 ;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *arg2 = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Filter_set_subtractor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_set_subtractor" "', argument " "1"" of type '" "fastjet::Filter *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Filter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Filter_set_subtractor" "', argument " "2"" of type '" "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > * >(argp2);
  {
    try {
      (arg1)->set_subtractor((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_subtractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Filter *arg1 = (fastjet::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Filter_subtractor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_subtractor" "', argument " "1"" of type '" "fastjet::Filter const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Filter * >(argp1);
  {
    try {
      result = (fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *)((fastjet::Filter const *)arg1)->subtractor();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Filter *arg1 = (fastjet::Filter *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Filter_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_result" "', argument " "1"" of type '" "fastjet::Filter const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Filter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Filter_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Filter_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::Filter const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Filter *arg1 = (fastjet::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Filter_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter_description" "', argument " "1"" of type '" "fastjet::Filter const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Filter * >(argp1);
  {
    try {
      result = ((fastjet::Filter const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Filter___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Filter *arg1 = (fastjet::Filter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Filter___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Filter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Filter___str__" "', argument " "1"" of type '" "fastjet::Filter const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Filter * >(argp1);
  {
    try {
      result = fastjet_Filter___str__((fastjet::Filter const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Filter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Filter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FilterStructure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  fastjet::JetDefinition::Recombiner *arg2 = (fastjet::JetDefinition::Recombiner *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::FilterStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FilterStructure",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FilterStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FilterStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FilterStructure" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      result = (fastjet::FilterStructure *)new fastjet::FilterStructure((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1,(fastjet::JetDefinition::Recombiner const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__FilterStructure, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterStructure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  fastjet::FilterStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FilterStructure",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FilterStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FilterStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (fastjet::FilterStructure *)new fastjet::FilterStructure((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__FilterStructure, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FilterStructure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FilterStructure__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FilterStructure__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FilterStructure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::FilterStructure::FilterStructure(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &,fastjet::JetDefinition::Recombiner const *)\n"
    "    fastjet::FilterStructure::FilterStructure(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FilterStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FilterStructure *arg1 = (fastjet::FilterStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FilterStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FilterStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FilterStructure" "', argument " "1"" of type '" "fastjet::FilterStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FilterStructure * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterStructure_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FilterStructure *arg1 = (fastjet::FilterStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterStructure_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FilterStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterStructure_description" "', argument " "1"" of type '" "fastjet::FilterStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FilterStructure * >(argp1);
  {
    try {
      result = ((fastjet::FilterStructure const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FilterStructure_rejected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::FilterStructure *arg1 = (fastjet::FilterStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FilterStructure_rejected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__FilterStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FilterStructure_rejected" "', argument " "1"" of type '" "fastjet::FilterStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::FilterStructure * >(argp1);
  {
    try {
      result = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *) &((fastjet::FilterStructure const *)arg1)->rejected();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FilterStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__FilterStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Pruner__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetAlgorithm arg1 ;
  double arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::Pruner *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Pruner",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pruner" "', argument " "1"" of type '" "fastjet::JetAlgorithm""'");
  } 
  arg1 = static_cast< fastjet::JetAlgorithm >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pruner" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pruner" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::Pruner *)new fastjet::Pruner(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Pruner, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pruner__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::Pruner *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Pruner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pruner" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pruner" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pruner" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pruner" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::Pruner *)new fastjet::Pruner((fastjet::JetDefinition const &)*arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Pruner, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pruner__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = 0 ;
  fastjet::FunctionOfPseudoJet< double > *arg2 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  fastjet::FunctionOfPseudoJet< double > *arg3 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::Pruner *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Pruner",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pruner" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pruner" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Pruner" "', argument " "2"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Pruner" "', argument " "3"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg3 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp3);
  {
    try {
      result = (fastjet::Pruner *)new fastjet::Pruner((fastjet::JetDefinition const &)*arg1,(fastjet::FunctionOfPseudoJet< double > const *)arg2,(fastjet::FunctionOfPseudoJet< double > const *)arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Pruner, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pruner(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Pruner__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Pruner__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Pruner__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Pruner'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Pruner::Pruner(fastjet::JetAlgorithm const,double,double)\n"
    "    fastjet::Pruner::Pruner(fastjet::JetDefinition const &,double,double)\n"
    "    fastjet::Pruner::Pruner(fastjet::JetDefinition const &,fastjet::FunctionOfPseudoJet< double > const *,fastjet::FunctionOfPseudoJet< double > const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Pruner_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Pruner *arg1 = (fastjet::Pruner *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pruner_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Pruner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pruner_result" "', argument " "1"" of type '" "fastjet::Pruner const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Pruner * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pruner_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pruner_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::Pruner const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pruner_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Pruner *arg1 = (fastjet::Pruner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pruner_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Pruner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pruner_description" "', argument " "1"" of type '" "fastjet::Pruner const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Pruner * >(argp1);
  {
    try {
      result = ((fastjet::Pruner const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pruner___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Pruner *arg1 = (fastjet::Pruner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pruner___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Pruner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pruner___str__" "', argument " "1"" of type '" "fastjet::Pruner const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Pruner * >(argp1);
  {
    try {
      result = fastjet_Pruner___str__((fastjet::Pruner const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Pruner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Pruner *arg1 = (fastjet::Pruner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Pruner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Pruner, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Pruner" "', argument " "1"" of type '" "fastjet::Pruner *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Pruner * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Pruner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Pruner, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PrunerStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PrunerStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PrunerStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PrunerStructure" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PrunerStructure" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::PrunerStructure *)new fastjet::PrunerStructure((fastjet::PseudoJet const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PrunerStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PrunerStructure_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PrunerStructure *arg1 = (fastjet::PrunerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PrunerStructure_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PrunerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PrunerStructure_description" "', argument " "1"" of type '" "fastjet::PrunerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PrunerStructure * >(argp1);
  {
    try {
      result = ((fastjet::PrunerStructure const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PrunerStructure_rejected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PrunerStructure *arg1 = (fastjet::PrunerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PrunerStructure_rejected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PrunerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PrunerStructure_rejected" "', argument " "1"" of type '" "fastjet::PrunerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PrunerStructure * >(argp1);
  {
    try {
      result = ((fastjet::PrunerStructure const *)arg1)->rejected();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PrunerStructure_extra_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PrunerStructure *arg1 = (fastjet::PrunerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PrunerStructure_extra_jets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PrunerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PrunerStructure_extra_jets" "', argument " "1"" of type '" "fastjet::PrunerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PrunerStructure * >(argp1);
  {
    try {
      result = ((fastjet::PrunerStructure const *)arg1)->extra_jets();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PrunerStructure_Rcut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PrunerStructure *arg1 = (fastjet::PrunerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PrunerStructure_Rcut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PrunerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PrunerStructure_Rcut" "', argument " "1"" of type '" "fastjet::PrunerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PrunerStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::PrunerStructure const *)arg1)->Rcut();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PrunerStructure_zcut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PrunerStructure *arg1 = (fastjet::PrunerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PrunerStructure_zcut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PrunerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PrunerStructure_zcut" "', argument " "1"" of type '" "fastjet::PrunerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PrunerStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::PrunerStructure const *)arg1)->zcut();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PrunerStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PrunerStructure *arg1 = (fastjet::PrunerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PrunerStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PrunerStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PrunerStructure" "', argument " "1"" of type '" "fastjet::PrunerStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PrunerStructure * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PrunerStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__PrunerStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PruningRecombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  fastjet::JetDefinition::Recombiner *arg3 = (fastjet::JetDefinition::Recombiner *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::PruningRecombiner *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_PruningRecombiner",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PruningRecombiner" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PruningRecombiner" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PruningRecombiner" "', argument " "3"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg3 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp3);
  {
    try {
      result = (fastjet::PruningRecombiner *)new fastjet::PruningRecombiner(arg1,arg2,(fastjet::JetDefinition::Recombiner const *)arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PruningRecombiner, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PruningRecombiner_recombine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PruningRecombiner *arg1 = (fastjet::PruningRecombiner *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  fastjet::PseudoJet *arg3 = 0 ;
  fastjet::PseudoJet *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PruningRecombiner_recombine",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PruningRecombiner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PruningRecombiner_recombine" "', argument " "1"" of type '" "fastjet::PruningRecombiner const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PruningRecombiner * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PruningRecombiner_recombine" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PruningRecombiner_recombine" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PruningRecombiner_recombine" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PruningRecombiner_recombine" "', argument " "3"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::PseudoJet * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_fastjet__PseudoJet,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PruningRecombiner_recombine" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PruningRecombiner_recombine" "', argument " "4"" of type '" "fastjet::PseudoJet &""'"); 
  }
  arg4 = reinterpret_cast< fastjet::PseudoJet * >(argp4);
  {
    try {
      ((fastjet::PruningRecombiner const *)arg1)->recombine((fastjet::PseudoJet const &)*arg2,(fastjet::PseudoJet const &)*arg3,*arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PruningRecombiner_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PruningRecombiner *arg1 = (fastjet::PruningRecombiner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PruningRecombiner_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PruningRecombiner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PruningRecombiner_description" "', argument " "1"" of type '" "fastjet::PruningRecombiner const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PruningRecombiner * >(argp1);
  {
    try {
      result = ((fastjet::PruningRecombiner const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PruningRecombiner_rejected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PruningRecombiner *arg1 = (fastjet::PruningRecombiner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PruningRecombiner_rejected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PruningRecombiner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PruningRecombiner_rejected" "', argument " "1"" of type '" "fastjet::PruningRecombiner const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PruningRecombiner * >(argp1);
  {
    try {
      result = (std::vector< unsigned int,std::allocator< unsigned int > > *) &((fastjet::PruningRecombiner const *)arg1)->rejected();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PruningRecombiner_clear_rejected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PruningRecombiner *arg1 = (fastjet::PruningRecombiner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PruningRecombiner_clear_rejected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PruningRecombiner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PruningRecombiner_clear_rejected" "', argument " "1"" of type '" "fastjet::PruningRecombiner *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PruningRecombiner * >(argp1);
  {
    try {
      (arg1)->clear_rejected();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PruningRecombiner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PruningRecombiner *arg1 = (fastjet::PruningRecombiner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PruningRecombiner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PruningRecombiner, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PruningRecombiner" "', argument " "1"" of type '" "fastjet::PruningRecombiner *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PruningRecombiner * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PruningRecombiner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__PruningRecombiner, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PruningPlugin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::PruningPlugin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_PruningPlugin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PruningPlugin" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PruningPlugin" "', argument " "1"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetDefinition * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PruningPlugin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PruningPlugin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::PruningPlugin *)new fastjet::PruningPlugin((fastjet::JetDefinition const &)*arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PruningPlugin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PruningPlugin_run_clustering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PruningPlugin *arg1 = (fastjet::PruningPlugin *) 0 ;
  fastjet::ClusterSequence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PruningPlugin_run_clustering",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PruningPlugin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PruningPlugin_run_clustering" "', argument " "1"" of type '" "fastjet::PruningPlugin const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PruningPlugin * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__ClusterSequence,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PruningPlugin_run_clustering" "', argument " "2"" of type '" "fastjet::ClusterSequence &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PruningPlugin_run_clustering" "', argument " "2"" of type '" "fastjet::ClusterSequence &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequence * >(argp2);
  {
    try {
      ((fastjet::PruningPlugin const *)arg1)->run_clustering(*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PruningPlugin_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PruningPlugin *arg1 = (fastjet::PruningPlugin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PruningPlugin_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PruningPlugin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PruningPlugin_description" "', argument " "1"" of type '" "fastjet::PruningPlugin const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PruningPlugin * >(argp1);
  {
    try {
      result = ((fastjet::PruningPlugin const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PruningPlugin_R(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PruningPlugin *arg1 = (fastjet::PruningPlugin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PruningPlugin_R",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PruningPlugin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PruningPlugin_R" "', argument " "1"" of type '" "fastjet::PruningPlugin const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PruningPlugin * >(argp1);
  {
    try {
      result = (double)((fastjet::PruningPlugin const *)arg1)->R();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PruningPlugin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PruningPlugin *arg1 = (fastjet::PruningPlugin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PruningPlugin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__PruningPlugin, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PruningPlugin" "', argument " "1"" of type '" "fastjet::PruningPlugin *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PruningPlugin * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PruningPlugin_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__PruningPlugin, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CASubJetTagger__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger::ScaleChoice arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::CASubJetTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CASubJetTagger",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CASubJetTagger" "', argument " "1"" of type '" "fastjet::CASubJetTagger::ScaleChoice""'");
  } 
  arg1 = static_cast< fastjet::CASubJetTagger::ScaleChoice >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CASubJetTagger" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::CASubJetTagger *)new fastjet::CASubJetTagger(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__CASubJetTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CASubJetTagger__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger::ScaleChoice arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::CASubJetTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CASubJetTagger",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CASubJetTagger" "', argument " "1"" of type '" "fastjet::CASubJetTagger::ScaleChoice""'");
  } 
  arg1 = static_cast< fastjet::CASubJetTagger::ScaleChoice >(val1);
  {
    try {
      result = (fastjet::CASubJetTagger *)new fastjet::CASubJetTagger(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__CASubJetTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CASubJetTagger__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CASubJetTagger")) SWIG_fail;
  {
    try {
      result = (fastjet::CASubJetTagger *)new fastjet::CASubJetTagger();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__CASubJetTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CASubJetTagger(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CASubJetTagger__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CASubJetTagger__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CASubJetTagger__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CASubJetTagger'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::CASubJetTagger::CASubJetTagger(fastjet::CASubJetTagger::ScaleChoice,double)\n"
    "    fastjet::CASubJetTagger::CASubJetTagger(fastjet::CASubJetTagger::ScaleChoice)\n"
    "    fastjet::CASubJetTagger::CASubJetTagger()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CASubJetTagger_set_dr_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger *arg1 = (fastjet::CASubJetTagger *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CASubJetTagger_set_dr_min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTagger_set_dr_min" "', argument " "1"" of type '" "fastjet::CASubJetTagger *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTagger * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CASubJetTagger_set_dr_min" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_dr_min(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CASubJetTagger_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger *arg1 = (fastjet::CASubJetTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CASubJetTagger_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTagger_description" "', argument " "1"" of type '" "fastjet::CASubJetTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTagger * >(argp1);
  {
    try {
      result = ((fastjet::CASubJetTagger const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CASubJetTagger_set_absolute_z_cut__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger *arg1 = (fastjet::CASubJetTagger *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CASubJetTagger_set_absolute_z_cut",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTagger_set_absolute_z_cut" "', argument " "1"" of type '" "fastjet::CASubJetTagger *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTagger * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CASubJetTagger_set_absolute_z_cut" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_absolute_z_cut(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CASubJetTagger_set_absolute_z_cut__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger *arg1 = (fastjet::CASubJetTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CASubJetTagger_set_absolute_z_cut",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTagger_set_absolute_z_cut" "', argument " "1"" of type '" "fastjet::CASubJetTagger *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTagger * >(argp1);
  {
    try {
      (arg1)->set_absolute_z_cut();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CASubJetTagger_set_absolute_z_cut(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__CASubJetTagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CASubJetTagger_set_absolute_z_cut__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__CASubJetTagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CASubJetTagger_set_absolute_z_cut__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CASubJetTagger_set_absolute_z_cut'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::CASubJetTagger::set_absolute_z_cut(bool)\n"
    "    fastjet::CASubJetTagger::set_absolute_z_cut()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CASubJetTagger_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger *arg1 = (fastjet::CASubJetTagger *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CASubJetTagger_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTagger_result" "', argument " "1"" of type '" "fastjet::CASubJetTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CASubJetTagger_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CASubJetTagger_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::CASubJetTagger const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CASubJetTagger___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger *arg1 = (fastjet::CASubJetTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CASubJetTagger___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTagger___str__" "', argument " "1"" of type '" "fastjet::CASubJetTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTagger * >(argp1);
  {
    try {
      result = fastjet_CASubJetTagger___str__((fastjet::CASubJetTagger const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CASubJetTagger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTagger *arg1 = (fastjet::CASubJetTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CASubJetTagger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTagger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CASubJetTagger" "', argument " "1"" of type '" "fastjet::CASubJetTagger *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTagger * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CASubJetTagger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__CASubJetTagger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CASubJetTaggerStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::CASubJetTaggerStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CASubJetTaggerStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CASubJetTaggerStructure" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CASubJetTaggerStructure" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::CASubJetTaggerStructure *)new fastjet::CASubJetTaggerStructure((fastjet::PseudoJet const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__CASubJetTaggerStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CASubJetTaggerStructure_scale_choice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTaggerStructure *arg1 = (fastjet::CASubJetTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::CASubJetTagger::ScaleChoice result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CASubJetTaggerStructure_scale_choice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTaggerStructure_scale_choice" "', argument " "1"" of type '" "fastjet::CASubJetTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTaggerStructure * >(argp1);
  {
    try {
      result = (fastjet::CASubJetTagger::ScaleChoice)((fastjet::CASubJetTaggerStructure const *)arg1)->scale_choice();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CASubJetTaggerStructure_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTaggerStructure *arg1 = (fastjet::CASubJetTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CASubJetTaggerStructure_distance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTaggerStructure_distance" "', argument " "1"" of type '" "fastjet::CASubJetTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTaggerStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::CASubJetTaggerStructure const *)arg1)->distance();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CASubJetTaggerStructure_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTaggerStructure *arg1 = (fastjet::CASubJetTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CASubJetTaggerStructure_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTaggerStructure_z" "', argument " "1"" of type '" "fastjet::CASubJetTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTaggerStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::CASubJetTaggerStructure const *)arg1)->z();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CASubJetTaggerStructure_absolute_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTaggerStructure *arg1 = (fastjet::CASubJetTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CASubJetTaggerStructure_absolute_z",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CASubJetTaggerStructure_absolute_z" "', argument " "1"" of type '" "fastjet::CASubJetTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTaggerStructure * >(argp1);
  {
    try {
      result = (bool)((fastjet::CASubJetTaggerStructure const *)arg1)->absolute_z();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CASubJetTaggerStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::CASubJetTaggerStructure *arg1 = (fastjet::CASubJetTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CASubJetTaggerStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__CASubJetTaggerStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CASubJetTaggerStructure" "', argument " "1"" of type '" "fastjet::CASubJetTaggerStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::CASubJetTaggerStructure * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CASubJetTaggerStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__CASubJetTaggerStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MassDropTagger__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::MassDropTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MassDropTagger",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MassDropTagger" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MassDropTagger" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::MassDropTagger *)new fastjet::MassDropTagger(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__MassDropTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MassDropTagger__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::MassDropTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MassDropTagger",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MassDropTagger" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (fastjet::MassDropTagger *)new fastjet::MassDropTagger(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__MassDropTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MassDropTagger__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::MassDropTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MassDropTagger")) SWIG_fail;
  {
    try {
      result = (fastjet::MassDropTagger *)new fastjet::MassDropTagger();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__MassDropTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MassDropTagger(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MassDropTagger__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MassDropTagger__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MassDropTagger__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MassDropTagger'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::MassDropTagger::MassDropTagger(double const,double const)\n"
    "    fastjet::MassDropTagger::MassDropTagger(double const)\n"
    "    fastjet::MassDropTagger::MassDropTagger()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MassDropTagger_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::MassDropTagger *arg1 = (fastjet::MassDropTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MassDropTagger_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__MassDropTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MassDropTagger_description" "', argument " "1"" of type '" "fastjet::MassDropTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::MassDropTagger * >(argp1);
  {
    try {
      result = ((fastjet::MassDropTagger const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MassDropTagger_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::MassDropTagger *arg1 = (fastjet::MassDropTagger *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MassDropTagger_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__MassDropTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MassDropTagger_result" "', argument " "1"" of type '" "fastjet::MassDropTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::MassDropTagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MassDropTagger_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MassDropTagger_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::MassDropTagger const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MassDropTagger___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::MassDropTagger *arg1 = (fastjet::MassDropTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MassDropTagger___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__MassDropTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MassDropTagger___str__" "', argument " "1"" of type '" "fastjet::MassDropTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::MassDropTagger * >(argp1);
  {
    try {
      result = fastjet_MassDropTagger___str__((fastjet::MassDropTagger const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MassDropTagger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::MassDropTagger *arg1 = (fastjet::MassDropTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MassDropTagger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__MassDropTagger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MassDropTagger" "', argument " "1"" of type '" "fastjet::MassDropTagger *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::MassDropTagger * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MassDropTagger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__MassDropTagger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MassDropTaggerStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::PseudoJet *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::MassDropTaggerStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MassDropTaggerStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MassDropTaggerStructure" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MassDropTaggerStructure" "', argument " "1"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::PseudoJet * >(argp1);
  {
    try {
      result = (fastjet::MassDropTaggerStructure *)new fastjet::MassDropTaggerStructure((fastjet::PseudoJet const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__MassDropTaggerStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MassDropTaggerStructure_mu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::MassDropTaggerStructure *arg1 = (fastjet::MassDropTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MassDropTaggerStructure_mu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__MassDropTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MassDropTaggerStructure_mu" "', argument " "1"" of type '" "fastjet::MassDropTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::MassDropTaggerStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::MassDropTaggerStructure const *)arg1)->mu();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MassDropTaggerStructure_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::MassDropTaggerStructure *arg1 = (fastjet::MassDropTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MassDropTaggerStructure_y",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__MassDropTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MassDropTaggerStructure_y" "', argument " "1"" of type '" "fastjet::MassDropTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::MassDropTaggerStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::MassDropTaggerStructure const *)arg1)->y();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MassDropTaggerStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::MassDropTaggerStructure *arg1 = (fastjet::MassDropTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MassDropTaggerStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__MassDropTaggerStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MassDropTaggerStructure" "', argument " "1"" of type '" "fastjet::MassDropTaggerStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::MassDropTaggerStructure * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MassDropTaggerStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__MassDropTaggerStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RestFrameNSubjettinessTagger__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::RestFrameNSubjettinessTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RestFrameNSubjettinessTagger",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "1"" of type '" "fastjet::JetDefinition const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "1"" of type '" "fastjet::JetDefinition const""'");
    } else {
      fastjet::JetDefinition * temp = reinterpret_cast< fastjet::JetDefinition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (fastjet::RestFrameNSubjettinessTagger *)new fastjet::RestFrameNSubjettinessTagger(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RestFrameNSubjettinessTagger__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition arg1 ;
  double arg2 ;
  double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::RestFrameNSubjettinessTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RestFrameNSubjettinessTagger",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "1"" of type '" "fastjet::JetDefinition const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "1"" of type '" "fastjet::JetDefinition const""'");
    } else {
      fastjet::JetDefinition * temp = reinterpret_cast< fastjet::JetDefinition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::RestFrameNSubjettinessTagger *)new fastjet::RestFrameNSubjettinessTagger(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RestFrameNSubjettinessTagger__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition arg1 ;
  double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::RestFrameNSubjettinessTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RestFrameNSubjettinessTagger",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "1"" of type '" "fastjet::JetDefinition const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "1"" of type '" "fastjet::JetDefinition const""'");
    } else {
      fastjet::JetDefinition * temp = reinterpret_cast< fastjet::JetDefinition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::RestFrameNSubjettinessTagger *)new fastjet::RestFrameNSubjettinessTagger(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RestFrameNSubjettinessTagger__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetDefinition arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::RestFrameNSubjettinessTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RestFrameNSubjettinessTagger",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "1"" of type '" "fastjet::JetDefinition const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RestFrameNSubjettinessTagger" "', argument " "1"" of type '" "fastjet::JetDefinition const""'");
    } else {
      fastjet::JetDefinition * temp = reinterpret_cast< fastjet::JetDefinition * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (fastjet::RestFrameNSubjettinessTagger *)new fastjet::RestFrameNSubjettinessTagger(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RestFrameNSubjettinessTagger(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RestFrameNSubjettinessTagger__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RestFrameNSubjettinessTagger__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RestFrameNSubjettinessTagger__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RestFrameNSubjettinessTagger__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RestFrameNSubjettinessTagger'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::RestFrameNSubjettinessTagger::RestFrameNSubjettinessTagger(fastjet::JetDefinition const,double const,double const,bool const)\n"
    "    fastjet::RestFrameNSubjettinessTagger::RestFrameNSubjettinessTagger(fastjet::JetDefinition const,double const,double const)\n"
    "    fastjet::RestFrameNSubjettinessTagger::RestFrameNSubjettinessTagger(fastjet::JetDefinition const,double const)\n"
    "    fastjet::RestFrameNSubjettinessTagger::RestFrameNSubjettinessTagger(fastjet::JetDefinition const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RestFrameNSubjettinessTagger_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RestFrameNSubjettinessTagger *arg1 = (fastjet::RestFrameNSubjettinessTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RestFrameNSubjettinessTagger_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RestFrameNSubjettinessTagger_description" "', argument " "1"" of type '" "fastjet::RestFrameNSubjettinessTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RestFrameNSubjettinessTagger * >(argp1);
  {
    try {
      result = ((fastjet::RestFrameNSubjettinessTagger const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RestFrameNSubjettinessTagger_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RestFrameNSubjettinessTagger *arg1 = (fastjet::RestFrameNSubjettinessTagger *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RestFrameNSubjettinessTagger_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RestFrameNSubjettinessTagger_result" "', argument " "1"" of type '" "fastjet::RestFrameNSubjettinessTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RestFrameNSubjettinessTagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RestFrameNSubjettinessTagger_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RestFrameNSubjettinessTagger_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::RestFrameNSubjettinessTagger const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RestFrameNSubjettinessTagger___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RestFrameNSubjettinessTagger *arg1 = (fastjet::RestFrameNSubjettinessTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RestFrameNSubjettinessTagger___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RestFrameNSubjettinessTagger___str__" "', argument " "1"" of type '" "fastjet::RestFrameNSubjettinessTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RestFrameNSubjettinessTagger * >(argp1);
  {
    try {
      result = fastjet_RestFrameNSubjettinessTagger___str__((fastjet::RestFrameNSubjettinessTagger const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RestFrameNSubjettinessTagger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RestFrameNSubjettinessTagger *arg1 = (fastjet::RestFrameNSubjettinessTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RestFrameNSubjettinessTagger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RestFrameNSubjettinessTagger" "', argument " "1"" of type '" "fastjet::RestFrameNSubjettinessTagger *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RestFrameNSubjettinessTagger * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RestFrameNSubjettinessTagger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__RestFrameNSubjettinessTagger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RestFrameNSubjettinessTaggerStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  fastjet::RestFrameNSubjettinessTaggerStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RestFrameNSubjettinessTaggerStructure",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RestFrameNSubjettinessTaggerStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RestFrameNSubjettinessTaggerStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (fastjet::RestFrameNSubjettinessTaggerStructure *)new fastjet::RestFrameNSubjettinessTaggerStructure((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__RestFrameNSubjettinessTaggerStructure, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RestFrameNSubjettinessTaggerStructure_tau2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RestFrameNSubjettinessTaggerStructure *arg1 = (fastjet::RestFrameNSubjettinessTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RestFrameNSubjettinessTaggerStructure_tau2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RestFrameNSubjettinessTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RestFrameNSubjettinessTaggerStructure_tau2" "', argument " "1"" of type '" "fastjet::RestFrameNSubjettinessTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RestFrameNSubjettinessTaggerStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::RestFrameNSubjettinessTaggerStructure const *)arg1)->tau2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RestFrameNSubjettinessTaggerStructure_costhetas(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RestFrameNSubjettinessTaggerStructure *arg1 = (fastjet::RestFrameNSubjettinessTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RestFrameNSubjettinessTaggerStructure_costhetas",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RestFrameNSubjettinessTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RestFrameNSubjettinessTaggerStructure_costhetas" "', argument " "1"" of type '" "fastjet::RestFrameNSubjettinessTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RestFrameNSubjettinessTaggerStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::RestFrameNSubjettinessTaggerStructure const *)arg1)->costhetas();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RestFrameNSubjettinessTaggerStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RestFrameNSubjettinessTaggerStructure *arg1 = (fastjet::RestFrameNSubjettinessTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RestFrameNSubjettinessTaggerStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__RestFrameNSubjettinessTaggerStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RestFrameNSubjettinessTaggerStructure" "', argument " "1"" of type '" "fastjet::RestFrameNSubjettinessTaggerStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RestFrameNSubjettinessTaggerStructure * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RestFrameNSubjettinessTaggerStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__RestFrameNSubjettinessTaggerStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TopTaggerBase_set_top_selector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TopTaggerBase *arg1 = (fastjet::TopTaggerBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TopTaggerBase_set_top_selector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TopTaggerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TopTaggerBase_set_top_selector" "', argument " "1"" of type '" "fastjet::TopTaggerBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TopTaggerBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TopTaggerBase_set_top_selector" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TopTaggerBase_set_top_selector" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      (arg1)->set_top_selector((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TopTaggerBase_set_W_selector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TopTaggerBase *arg1 = (fastjet::TopTaggerBase *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TopTaggerBase_set_W_selector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TopTaggerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TopTaggerBase_set_W_selector" "', argument " "1"" of type '" "fastjet::TopTaggerBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TopTaggerBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TopTaggerBase_set_W_selector" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TopTaggerBase_set_W_selector" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      (arg1)->set_W_selector((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TopTaggerBase_description_of_selectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TopTaggerBase *arg1 = (fastjet::TopTaggerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TopTaggerBase_description_of_selectors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TopTaggerBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TopTaggerBase_description_of_selectors" "', argument " "1"" of type '" "fastjet::TopTaggerBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TopTaggerBase * >(argp1);
  {
    try {
      result = ((fastjet::TopTaggerBase const *)arg1)->description_of_selectors();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TopTaggerBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TopTaggerBase *arg1 = (fastjet::TopTaggerBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TopTaggerBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TopTaggerBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TopTaggerBase" "', argument " "1"" of type '" "fastjet::TopTaggerBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TopTaggerBase * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TopTaggerBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__TopTaggerBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_TopTaggerBaseStructure_W(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TopTaggerBaseStructure *arg1 = (fastjet::TopTaggerBaseStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TopTaggerBaseStructure_W",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TopTaggerBaseStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TopTaggerBaseStructure_W" "', argument " "1"" of type '" "fastjet::TopTaggerBaseStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TopTaggerBaseStructure * >(argp1);
  {
    try {
      result = (fastjet::PseudoJet *) &((fastjet::TopTaggerBaseStructure const *)arg1)->W();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TopTaggerBaseStructure_non_W(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TopTaggerBaseStructure *arg1 = (fastjet::TopTaggerBaseStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TopTaggerBaseStructure_non_W",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TopTaggerBaseStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TopTaggerBaseStructure_non_W" "', argument " "1"" of type '" "fastjet::TopTaggerBaseStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TopTaggerBaseStructure * >(argp1);
  {
    try {
      result = (fastjet::PseudoJet *) &((fastjet::TopTaggerBaseStructure const *)arg1)->non_W();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TopTaggerBaseStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::TopTaggerBaseStructure *arg1 = (fastjet::TopTaggerBaseStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TopTaggerBaseStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__TopTaggerBaseStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TopTaggerBaseStructure" "', argument " "1"" of type '" "fastjet::TopTaggerBaseStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::TopTaggerBaseStructure * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TopTaggerBaseStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__TopTaggerBaseStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_JHTopTagger__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::JHTopTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_JHTopTagger",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JHTopTagger" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JHTopTagger" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JHTopTagger" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JHTopTagger" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::JHTopTagger *)new fastjet::JHTopTagger(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JHTopTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JHTopTagger__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JHTopTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_JHTopTagger",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JHTopTagger" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JHTopTagger" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JHTopTagger" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::JHTopTagger *)new fastjet::JHTopTagger(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JHTopTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JHTopTagger__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::JHTopTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_JHTopTagger",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JHTopTagger" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JHTopTagger" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::JHTopTagger *)new fastjet::JHTopTagger(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JHTopTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JHTopTagger__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JHTopTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_JHTopTagger",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JHTopTagger" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (fastjet::JHTopTagger *)new fastjet::JHTopTagger(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JHTopTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JHTopTagger__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JHTopTagger")) SWIG_fail;
  {
    try {
      result = (fastjet::JHTopTagger *)new fastjet::JHTopTagger();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JHTopTagger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JHTopTagger(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_JHTopTagger__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_JHTopTagger__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_JHTopTagger__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JHTopTagger__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JHTopTagger__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_JHTopTagger'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JHTopTagger::JHTopTagger(double const,double const,double,double)\n"
    "    fastjet::JHTopTagger::JHTopTagger(double const,double const,double)\n"
    "    fastjet::JHTopTagger::JHTopTagger(double const,double const)\n"
    "    fastjet::JHTopTagger::JHTopTagger(double const)\n"
    "    fastjet::JHTopTagger::JHTopTagger()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JHTopTagger_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTagger *arg1 = (fastjet::JHTopTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JHTopTagger_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JHTopTagger_description" "', argument " "1"" of type '" "fastjet::JHTopTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTagger * >(argp1);
  {
    try {
      result = ((fastjet::JHTopTagger const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JHTopTagger_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTagger *arg1 = (fastjet::JHTopTagger *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JHTopTagger_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JHTopTagger_result" "', argument " "1"" of type '" "fastjet::JHTopTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JHTopTagger_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JHTopTagger_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::JHTopTagger const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JHTopTagger___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTagger *arg1 = (fastjet::JHTopTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JHTopTagger___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JHTopTagger___str__" "', argument " "1"" of type '" "fastjet::JHTopTagger const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTagger * >(argp1);
  {
    try {
      result = fastjet_JHTopTagger___str__((fastjet::JHTopTagger const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JHTopTagger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTagger *arg1 = (fastjet::JHTopTagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JHTopTagger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTagger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JHTopTagger" "', argument " "1"" of type '" "fastjet::JHTopTagger *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTagger * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JHTopTagger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__JHTopTagger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_JHTopTaggerStructure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > arg1 ;
  fastjet::JetDefinition::Recombiner *arg2 = (fastjet::JetDefinition::Recombiner *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::JHTopTaggerStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_JHTopTaggerStructure",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_JHTopTaggerStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JHTopTaggerStructure" "', argument " "2"" of type '" "fastjet::JetDefinition::Recombiner const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition::Recombiner * >(argp2);
  {
    try {
      result = (fastjet::JHTopTaggerStructure *)new fastjet::JHTopTaggerStructure(arg1,(fastjet::JetDefinition::Recombiner const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JHTopTaggerStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JHTopTaggerStructure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > arg1 ;
  PyObject * obj0 = 0 ;
  fastjet::JHTopTaggerStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_JHTopTaggerStructure",&obj0)) SWIG_fail;
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_JHTopTaggerStructure" "', argument " "1"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (fastjet::JHTopTaggerStructure *)new fastjet::JHTopTaggerStructure(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JHTopTaggerStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JHTopTaggerStructure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JHTopTaggerStructure__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_fastjet__JetDefinition__Recombiner, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_JHTopTaggerStructure__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_JHTopTaggerStructure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JHTopTaggerStructure::JHTopTaggerStructure(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >,fastjet::JetDefinition::Recombiner const *)\n"
    "    fastjet::JHTopTaggerStructure::JHTopTaggerStructure(std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JHTopTaggerStructure_W(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTaggerStructure *arg1 = (fastjet::JHTopTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JHTopTaggerStructure_W",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JHTopTaggerStructure_W" "', argument " "1"" of type '" "fastjet::JHTopTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTaggerStructure * >(argp1);
  {
    try {
      result = (fastjet::PseudoJet *) &((fastjet::JHTopTaggerStructure const *)arg1)->W();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JHTopTaggerStructure_W1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTaggerStructure *arg1 = (fastjet::JHTopTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JHTopTaggerStructure_W1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JHTopTaggerStructure_W1" "', argument " "1"" of type '" "fastjet::JHTopTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTaggerStructure * >(argp1);
  {
    try {
      result = ((fastjet::JHTopTaggerStructure const *)arg1)->W1();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JHTopTaggerStructure_W2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTaggerStructure *arg1 = (fastjet::JHTopTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JHTopTaggerStructure_W2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JHTopTaggerStructure_W2" "', argument " "1"" of type '" "fastjet::JHTopTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTaggerStructure * >(argp1);
  {
    try {
      result = ((fastjet::JHTopTaggerStructure const *)arg1)->W2();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JHTopTaggerStructure_non_W(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTaggerStructure *arg1 = (fastjet::JHTopTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::PseudoJet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JHTopTaggerStructure_non_W",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JHTopTaggerStructure_non_W" "', argument " "1"" of type '" "fastjet::JHTopTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTaggerStructure * >(argp1);
  {
    try {
      result = (fastjet::PseudoJet *) &((fastjet::JHTopTaggerStructure const *)arg1)->non_W();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__PseudoJet, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JHTopTaggerStructure_cos_theta_W(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTaggerStructure *arg1 = (fastjet::JHTopTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JHTopTaggerStructure_cos_theta_W",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTaggerStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JHTopTaggerStructure_cos_theta_W" "', argument " "1"" of type '" "fastjet::JHTopTaggerStructure const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTaggerStructure * >(argp1);
  {
    try {
      result = (double)((fastjet::JHTopTaggerStructure const *)arg1)->cos_theta_W();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JHTopTaggerStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JHTopTaggerStructure *arg1 = (fastjet::JHTopTaggerStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JHTopTaggerStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JHTopTaggerStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JHTopTaggerStructure" "', argument " "1"" of type '" "fastjet::JHTopTaggerStructure *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JHTopTaggerStructure * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JHTopTaggerStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__JHTopTaggerStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_BackgroundEstimatorBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BackgroundEstimatorBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BackgroundEstimatorBase" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_set_particles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundEstimatorBase_set_particles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_set_particles" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundEstimatorBase_set_particles" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BackgroundEstimatorBase_set_particles" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_particles((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_rho__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundEstimatorBase_rho",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_rho" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      result = (double)((fastjet::BackgroundEstimatorBase const *)arg1)->rho();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_sigma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundEstimatorBase_sigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_sigma" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      result = (double)((fastjet::BackgroundEstimatorBase const *)arg1)->sigma();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_rho__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundEstimatorBase_rho",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_rho" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundEstimatorBase_rho" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BackgroundEstimatorBase_rho" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->rho((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_rho(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BackgroundEstimatorBase_rho__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BackgroundEstimatorBase_rho__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BackgroundEstimatorBase_rho'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::BackgroundEstimatorBase::rho() const\n"
    "    fastjet::BackgroundEstimatorBase::rho(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_sigma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundEstimatorBase_sigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_sigma" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundEstimatorBase_sigma" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BackgroundEstimatorBase_sigma" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->sigma((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_sigma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BackgroundEstimatorBase_sigma__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BackgroundEstimatorBase_sigma__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BackgroundEstimatorBase_sigma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::BackgroundEstimatorBase::sigma() const\n"
    "    fastjet::BackgroundEstimatorBase::sigma(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_has_sigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundEstimatorBase_has_sigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_has_sigma" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      result = (bool)(arg1)->has_sigma();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_rho_m__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundEstimatorBase_rho_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_rho_m" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      result = (double)((fastjet::BackgroundEstimatorBase const *)arg1)->rho_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_sigma_m__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundEstimatorBase_sigma_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_sigma_m" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      result = (double)((fastjet::BackgroundEstimatorBase const *)arg1)->sigma_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_rho_m__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundEstimatorBase_rho_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_rho_m" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundEstimatorBase_rho_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BackgroundEstimatorBase_rho_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->rho_m((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_rho_m(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BackgroundEstimatorBase_rho_m__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BackgroundEstimatorBase_rho_m__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BackgroundEstimatorBase_rho_m'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::BackgroundEstimatorBase::rho_m() const\n"
    "    fastjet::BackgroundEstimatorBase::rho_m(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_sigma_m__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundEstimatorBase_sigma_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_sigma_m" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundEstimatorBase_sigma_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BackgroundEstimatorBase_sigma_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->sigma_m((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_sigma_m(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BackgroundEstimatorBase_sigma_m__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BackgroundEstimatorBase_sigma_m__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BackgroundEstimatorBase_sigma_m'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::BackgroundEstimatorBase::sigma_m() const\n"
    "    fastjet::BackgroundEstimatorBase::sigma_m(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_has_rho_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundEstimatorBase_has_rho_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_has_rho_m" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      result = (bool)((fastjet::BackgroundEstimatorBase const *)arg1)->has_rho_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_set_rescaling_class(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  fastjet::FunctionOfPseudoJet< double > *arg2 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundEstimatorBase_set_rescaling_class",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_set_rescaling_class" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundEstimatorBase_set_rescaling_class" "', argument " "2"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp2);
  {
    try {
      (arg1)->set_rescaling_class((fastjet::FunctionOfPseudoJet< double > const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_rescaling_class(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::FunctionOfPseudoJet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundEstimatorBase_rescaling_class",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_rescaling_class" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      result = (fastjet::FunctionOfPseudoJet< double > *)((fastjet::BackgroundEstimatorBase const *)arg1)->rescaling_class();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundEstimatorBase_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundEstimatorBase_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundEstimatorBase_description" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      result = ((fastjet::BackgroundEstimatorBase const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BackgroundEstimatorBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__BackgroundEstimatorBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BackgroundRescalingYPolynomial__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::BackgroundRescalingYPolynomial *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_BackgroundRescalingYPolynomial",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (fastjet::BackgroundRescalingYPolynomial *)new fastjet::BackgroundRescalingYPolynomial(arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundRescalingYPolynomial__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::BackgroundRescalingYPolynomial *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_BackgroundRescalingYPolynomial",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::BackgroundRescalingYPolynomial *)new fastjet::BackgroundRescalingYPolynomial(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundRescalingYPolynomial__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::BackgroundRescalingYPolynomial *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_BackgroundRescalingYPolynomial",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (fastjet::BackgroundRescalingYPolynomial *)new fastjet::BackgroundRescalingYPolynomial(arg1,arg2,arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundRescalingYPolynomial__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::BackgroundRescalingYPolynomial *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BackgroundRescalingYPolynomial",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::BackgroundRescalingYPolynomial *)new fastjet::BackgroundRescalingYPolynomial(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundRescalingYPolynomial__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::BackgroundRescalingYPolynomial *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BackgroundRescalingYPolynomial",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BackgroundRescalingYPolynomial" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (fastjet::BackgroundRescalingYPolynomial *)new fastjet::BackgroundRescalingYPolynomial(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundRescalingYPolynomial__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundRescalingYPolynomial *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BackgroundRescalingYPolynomial")) SWIG_fail;
  {
    try {
      result = (fastjet::BackgroundRescalingYPolynomial *)new fastjet::BackgroundRescalingYPolynomial();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundRescalingYPolynomial(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BackgroundRescalingYPolynomial__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BackgroundRescalingYPolynomial__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BackgroundRescalingYPolynomial__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_BackgroundRescalingYPolynomial__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_BackgroundRescalingYPolynomial__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_BackgroundRescalingYPolynomial__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BackgroundRescalingYPolynomial'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::BackgroundRescalingYPolynomial::BackgroundRescalingYPolynomial(double,double,double,double,double)\n"
    "    fastjet::BackgroundRescalingYPolynomial::BackgroundRescalingYPolynomial(double,double,double,double)\n"
    "    fastjet::BackgroundRescalingYPolynomial::BackgroundRescalingYPolynomial(double,double,double)\n"
    "    fastjet::BackgroundRescalingYPolynomial::BackgroundRescalingYPolynomial(double,double)\n"
    "    fastjet::BackgroundRescalingYPolynomial::BackgroundRescalingYPolynomial(double)\n"
    "    fastjet::BackgroundRescalingYPolynomial::BackgroundRescalingYPolynomial()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BackgroundRescalingYPolynomial_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundRescalingYPolynomial *arg1 = (fastjet::BackgroundRescalingYPolynomial *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundRescalingYPolynomial_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundRescalingYPolynomial_result" "', argument " "1"" of type '" "fastjet::BackgroundRescalingYPolynomial const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundRescalingYPolynomial * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundRescalingYPolynomial_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BackgroundRescalingYPolynomial_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::BackgroundRescalingYPolynomial const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BackgroundRescalingYPolynomial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundRescalingYPolynomial *arg1 = (fastjet::BackgroundRescalingYPolynomial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BackgroundRescalingYPolynomial",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BackgroundRescalingYPolynomial" "', argument " "1"" of type '" "fastjet::BackgroundRescalingYPolynomial *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundRescalingYPolynomial * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BackgroundRescalingYPolynomial_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__BackgroundRescalingYPolynomial, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_JetMedianBackgroundEstimator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  fastjet::JetDefinition *arg2 = 0 ;
  fastjet::AreaDefinition *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  fastjet::JetMedianBackgroundEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_JetMedianBackgroundEstimator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JetMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JetMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__JetDefinition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JetMedianBackgroundEstimator" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JetMedianBackgroundEstimator" "', argument " "2"" of type '" "fastjet::JetDefinition const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::JetDefinition * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__AreaDefinition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_JetMedianBackgroundEstimator" "', argument " "3"" of type '" "fastjet::AreaDefinition const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JetMedianBackgroundEstimator" "', argument " "3"" of type '" "fastjet::AreaDefinition const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::AreaDefinition * >(argp3);
  {
    try {
      result = (fastjet::JetMedianBackgroundEstimator *)new fastjet::JetMedianBackgroundEstimator((fastjet::Selector const &)*arg1,(fastjet::JetDefinition const &)*arg2,(fastjet::AreaDefinition const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetMedianBackgroundEstimator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  fastjet::ClusterSequenceAreaBase *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::JetMedianBackgroundEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_JetMedianBackgroundEstimator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JetMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JetMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JetMedianBackgroundEstimator" "', argument " "2"" of type '" "fastjet::ClusterSequenceAreaBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JetMedianBackgroundEstimator" "', argument " "2"" of type '" "fastjet::ClusterSequenceAreaBase const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp2);
  {
    try {
      result = (fastjet::JetMedianBackgroundEstimator *)new fastjet::JetMedianBackgroundEstimator((fastjet::Selector const &)*arg1,(fastjet::ClusterSequenceAreaBase const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetMedianBackgroundEstimator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Selector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::JetMedianBackgroundEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_JetMedianBackgroundEstimator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JetMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JetMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::Selector const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Selector * >(argp1);
  {
    try {
      result = (fastjet::JetMedianBackgroundEstimator *)new fastjet::JetMedianBackgroundEstimator((fastjet::Selector const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetMedianBackgroundEstimator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JetMedianBackgroundEstimator")) SWIG_fail;
  {
    try {
      result = (fastjet::JetMedianBackgroundEstimator *)new fastjet::JetMedianBackgroundEstimator();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JetMedianBackgroundEstimator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_JetMedianBackgroundEstimator__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JetMedianBackgroundEstimator__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_JetMedianBackgroundEstimator__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__Selector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__JetDefinition, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_fastjet__AreaDefinition, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_JetMedianBackgroundEstimator__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_JetMedianBackgroundEstimator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetMedianBackgroundEstimator::JetMedianBackgroundEstimator(fastjet::Selector const &,fastjet::JetDefinition const &,fastjet::AreaDefinition const &)\n"
    "    fastjet::JetMedianBackgroundEstimator::JetMedianBackgroundEstimator(fastjet::Selector const &,fastjet::ClusterSequenceAreaBase const &)\n"
    "    fastjet::JetMedianBackgroundEstimator::JetMedianBackgroundEstimator(fastjet::Selector const &)\n"
    "    fastjet::JetMedianBackgroundEstimator::JetMedianBackgroundEstimator()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_JetMedianBackgroundEstimator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JetMedianBackgroundEstimator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JetMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_particles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_set_particles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_particles" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_set_particles" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetMedianBackgroundEstimator_set_particles" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_particles((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_cluster_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  fastjet::ClusterSequenceAreaBase *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_set_cluster_sequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_cluster_sequence" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__ClusterSequenceAreaBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_set_cluster_sequence" "', argument " "2"" of type '" "fastjet::ClusterSequenceAreaBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetMedianBackgroundEstimator_set_cluster_sequence" "', argument " "2"" of type '" "fastjet::ClusterSequenceAreaBase const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::ClusterSequenceAreaBase * >(argp2);
  {
    try {
      (arg1)->set_cluster_sequence((fastjet::ClusterSequenceAreaBase const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_set_jets",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_jets" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_set_jets" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetMedianBackgroundEstimator_set_jets" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_jets((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_selector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_set_selector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_selector" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_set_selector" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetMedianBackgroundEstimator_set_selector" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  {
    try {
      (arg1)->set_selector((fastjet::Selector const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_compute_rho_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_set_compute_rho_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_compute_rho_m" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetMedianBackgroundEstimator_set_compute_rho_m" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_compute_rho_m(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_rho__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_rho",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_rho" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::JetMedianBackgroundEstimator const *)arg1)->rho();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_sigma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_sigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_sigma" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::JetMedianBackgroundEstimator const *)arg1)->sigma();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_rho__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_rho",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_rho" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_rho" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetMedianBackgroundEstimator_rho" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->rho((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_rho(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_JetMedianBackgroundEstimator_rho__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JetMedianBackgroundEstimator_rho__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetMedianBackgroundEstimator_rho'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetMedianBackgroundEstimator::rho() const\n"
    "    fastjet::JetMedianBackgroundEstimator::rho(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_sigma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_sigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_sigma" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_sigma" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetMedianBackgroundEstimator_sigma" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->sigma((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_sigma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_JetMedianBackgroundEstimator_sigma__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JetMedianBackgroundEstimator_sigma__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetMedianBackgroundEstimator_sigma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetMedianBackgroundEstimator::sigma() const\n"
    "    fastjet::JetMedianBackgroundEstimator::sigma(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_has_sigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_has_sigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_has_sigma" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (bool)(arg1)->has_sigma();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_rho_m__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_rho_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_rho_m" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::JetMedianBackgroundEstimator const *)arg1)->rho_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_sigma_m__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_sigma_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_sigma_m" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::JetMedianBackgroundEstimator const *)arg1)->sigma_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_rho_m__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_rho_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_rho_m" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_rho_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetMedianBackgroundEstimator_rho_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->rho_m((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_rho_m(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_JetMedianBackgroundEstimator_rho_m__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JetMedianBackgroundEstimator_rho_m__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetMedianBackgroundEstimator_rho_m'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetMedianBackgroundEstimator::rho_m() const\n"
    "    fastjet::JetMedianBackgroundEstimator::rho_m(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_sigma_m__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_sigma_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_sigma_m" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_sigma_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JetMedianBackgroundEstimator_sigma_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->sigma_m((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_sigma_m(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_JetMedianBackgroundEstimator_sigma_m__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_JetMedianBackgroundEstimator_sigma_m__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetMedianBackgroundEstimator_sigma_m'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetMedianBackgroundEstimator::sigma_m() const\n"
    "    fastjet::JetMedianBackgroundEstimator::sigma_m(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_has_rho_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_has_rho_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_has_rho_m" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (bool)((fastjet::JetMedianBackgroundEstimator const *)arg1)->has_rho_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_mean_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_mean_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_mean_area" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::JetMedianBackgroundEstimator const *)arg1)->mean_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_n_jets_used(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_n_jets_used",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_n_jets_used" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (unsigned int)((fastjet::JetMedianBackgroundEstimator const *)arg1)->n_jets_used();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_jets_used(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_jets_used",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_jets_used" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = ((fastjet::JetMedianBackgroundEstimator const *)arg1)->jets_used();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = swig::from(static_cast< std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_empty_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_empty_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_empty_area" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::JetMedianBackgroundEstimator const *)arg1)->empty_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_n_empty_jets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_n_empty_jets",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_n_empty_jets" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::JetMedianBackgroundEstimator const *)arg1)->n_empty_jets();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_reset" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_use_area_4vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_set_use_area_4vector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_use_area_4vector" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetMedianBackgroundEstimator_set_use_area_4vector" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_use_area_4vector(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_use_area_4vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_set_use_area_4vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_use_area_4vector" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      (arg1)->set_use_area_4vector();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_use_area_4vector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_JetMedianBackgroundEstimator_set_use_area_4vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JetMedianBackgroundEstimator_set_use_area_4vector__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetMedianBackgroundEstimator_set_use_area_4vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetMedianBackgroundEstimator::set_use_area_4vector(bool)\n"
    "    fastjet::JetMedianBackgroundEstimator::set_use_area_4vector()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_use_area_4vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_use_area_4vector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_use_area_4vector" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (bool)((fastjet::JetMedianBackgroundEstimator const *)arg1)->use_area_4vector();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_provide_fj2_sigma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_set_provide_fj2_sigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_provide_fj2_sigma" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JetMedianBackgroundEstimator_set_provide_fj2_sigma" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_provide_fj2_sigma(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_provide_fj2_sigma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_set_provide_fj2_sigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_provide_fj2_sigma" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      (arg1)->set_provide_fj2_sigma();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_provide_fj2_sigma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_JetMedianBackgroundEstimator_set_provide_fj2_sigma__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JetMedianBackgroundEstimator_set_provide_fj2_sigma__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JetMedianBackgroundEstimator_set_provide_fj2_sigma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::JetMedianBackgroundEstimator::set_provide_fj2_sigma(bool)\n"
    "    fastjet::JetMedianBackgroundEstimator::set_provide_fj2_sigma()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_jet_density_class(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  fastjet::FunctionOfPseudoJet< double > *arg2 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_set_jet_density_class",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_jet_density_class" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_set_jet_density_class" "', argument " "2"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp2);
  {
    try {
      (arg1)->set_jet_density_class((fastjet::FunctionOfPseudoJet< double > const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_jet_density_class(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::FunctionOfPseudoJet< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_jet_density_class",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_jet_density_class" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (fastjet::FunctionOfPseudoJet< double > *)((fastjet::JetMedianBackgroundEstimator const *)arg1)->jet_density_class();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_set_rescaling_class(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  fastjet::FunctionOfPseudoJet< double > *arg2 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JetMedianBackgroundEstimator_set_rescaling_class",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_set_rescaling_class" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JetMedianBackgroundEstimator_set_rescaling_class" "', argument " "2"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp2);
  {
    try {
      (arg1)->set_rescaling_class((fastjet::FunctionOfPseudoJet< double > const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JetMedianBackgroundEstimator_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::JetMedianBackgroundEstimator *arg1 = (fastjet::JetMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JetMedianBackgroundEstimator_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JetMedianBackgroundEstimator_description" "', argument " "1"" of type '" "fastjet::JetMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::JetMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = ((fastjet::JetMedianBackgroundEstimator const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JetMedianBackgroundEstimator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__JetMedianBackgroundEstimator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BackgroundJetPtDensity_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetPtDensity *arg1 = (fastjet::BackgroundJetPtDensity *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundJetPtDensity_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundJetPtDensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundJetPtDensity_result" "', argument " "1"" of type '" "fastjet::BackgroundJetPtDensity const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundJetPtDensity * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundJetPtDensity_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BackgroundJetPtDensity_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::BackgroundJetPtDensity const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundJetPtDensity_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetPtDensity *arg1 = (fastjet::BackgroundJetPtDensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundJetPtDensity_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundJetPtDensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundJetPtDensity_description" "', argument " "1"" of type '" "fastjet::BackgroundJetPtDensity const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundJetPtDensity * >(argp1);
  {
    try {
      result = ((fastjet::BackgroundJetPtDensity const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundJetPtDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetPtDensity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BackgroundJetPtDensity")) SWIG_fail;
  {
    try {
      result = (fastjet::BackgroundJetPtDensity *)new fastjet::BackgroundJetPtDensity();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundJetPtDensity, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BackgroundJetPtDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetPtDensity *arg1 = (fastjet::BackgroundJetPtDensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BackgroundJetPtDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundJetPtDensity, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BackgroundJetPtDensity" "', argument " "1"" of type '" "fastjet::BackgroundJetPtDensity *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundJetPtDensity * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BackgroundJetPtDensity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__BackgroundJetPtDensity, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BackgroundJetScalarPtDensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetScalarPtDensity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BackgroundJetScalarPtDensity")) SWIG_fail;
  {
    try {
      result = (fastjet::BackgroundJetScalarPtDensity *)new fastjet::BackgroundJetScalarPtDensity();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundJetScalarPtDensity, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundJetScalarPtDensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::BackgroundJetScalarPtDensity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BackgroundJetScalarPtDensity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BackgroundJetScalarPtDensity" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (fastjet::BackgroundJetScalarPtDensity *)new fastjet::BackgroundJetScalarPtDensity(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundJetScalarPtDensity, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundJetScalarPtDensity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BackgroundJetScalarPtDensity__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BackgroundJetScalarPtDensity__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BackgroundJetScalarPtDensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::BackgroundJetScalarPtDensity::BackgroundJetScalarPtDensity()\n"
    "    fastjet::BackgroundJetScalarPtDensity::BackgroundJetScalarPtDensity(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BackgroundJetScalarPtDensity_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetScalarPtDensity *arg1 = (fastjet::BackgroundJetScalarPtDensity *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundJetScalarPtDensity_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundJetScalarPtDensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundJetScalarPtDensity_result" "', argument " "1"" of type '" "fastjet::BackgroundJetScalarPtDensity const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundJetScalarPtDensity * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundJetScalarPtDensity_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BackgroundJetScalarPtDensity_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::BackgroundJetScalarPtDensity const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundJetScalarPtDensity_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetScalarPtDensity *arg1 = (fastjet::BackgroundJetScalarPtDensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundJetScalarPtDensity_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundJetScalarPtDensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundJetScalarPtDensity_description" "', argument " "1"" of type '" "fastjet::BackgroundJetScalarPtDensity const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundJetScalarPtDensity * >(argp1);
  {
    try {
      result = ((fastjet::BackgroundJetScalarPtDensity const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BackgroundJetScalarPtDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetScalarPtDensity *arg1 = (fastjet::BackgroundJetScalarPtDensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BackgroundJetScalarPtDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundJetScalarPtDensity, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BackgroundJetScalarPtDensity" "', argument " "1"" of type '" "fastjet::BackgroundJetScalarPtDensity *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundJetScalarPtDensity * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BackgroundJetScalarPtDensity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__BackgroundJetScalarPtDensity, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BackgroundJetPtMDensity_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetPtMDensity *arg1 = (fastjet::BackgroundJetPtMDensity *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BackgroundJetPtMDensity_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundJetPtMDensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundJetPtMDensity_result" "', argument " "1"" of type '" "fastjet::BackgroundJetPtMDensity const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundJetPtMDensity * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BackgroundJetPtMDensity_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BackgroundJetPtMDensity_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)((fastjet::BackgroundJetPtMDensity const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BackgroundJetPtMDensity_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetPtMDensity *arg1 = (fastjet::BackgroundJetPtMDensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BackgroundJetPtMDensity_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundJetPtMDensity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BackgroundJetPtMDensity_description" "', argument " "1"" of type '" "fastjet::BackgroundJetPtMDensity const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundJetPtMDensity * >(argp1);
  {
    try {
      result = ((fastjet::BackgroundJetPtMDensity const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BackgroundJetPtMDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetPtMDensity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BackgroundJetPtMDensity")) SWIG_fail;
  {
    try {
      result = (fastjet::BackgroundJetPtMDensity *)new fastjet::BackgroundJetPtMDensity();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__BackgroundJetPtMDensity, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BackgroundJetPtMDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundJetPtMDensity *arg1 = (fastjet::BackgroundJetPtMDensity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BackgroundJetPtMDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundJetPtMDensity, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BackgroundJetPtMDensity" "', argument " "1"" of type '" "fastjet::BackgroundJetPtMDensity *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundJetPtMDensity * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BackgroundJetPtMDensity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__BackgroundJetPtMDensity, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GridMedianBackgroundEstimator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::GridMedianBackgroundEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GridMedianBackgroundEstimator",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::GridMedianBackgroundEstimator *)new fastjet::GridMedianBackgroundEstimator(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridMedianBackgroundEstimator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::RectangularGrid *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::GridMedianBackgroundEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GridMedianBackgroundEstimator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_fastjet__RectangularGrid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::RectangularGrid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GridMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::RectangularGrid const &""'"); 
  }
  arg1 = reinterpret_cast< fastjet::RectangularGrid * >(argp1);
  {
    try {
      result = (fastjet::GridMedianBackgroundEstimator *)new fastjet::GridMedianBackgroundEstimator((fastjet::RectangularGrid const &)*arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridMedianBackgroundEstimator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  fastjet::Selector arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  fastjet::GridMedianBackgroundEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_GridMedianBackgroundEstimator",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_fastjet__Selector,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "5"" of type '" "fastjet::Selector""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GridMedianBackgroundEstimator" "', argument " "5"" of type '" "fastjet::Selector""'");
    } else {
      fastjet::Selector * temp = reinterpret_cast< fastjet::Selector * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      result = (fastjet::GridMedianBackgroundEstimator *)new fastjet::GridMedianBackgroundEstimator(arg1,arg2,arg3,arg4,arg5);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridMedianBackgroundEstimator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  fastjet::GridMedianBackgroundEstimator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_GridMedianBackgroundEstimator",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GridMedianBackgroundEstimator" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (fastjet::GridMedianBackgroundEstimator *)new fastjet::GridMedianBackgroundEstimator(arg1,arg2,arg3,arg4);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridMedianBackgroundEstimator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_fastjet__RectangularGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GridMedianBackgroundEstimator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GridMedianBackgroundEstimator__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_GridMedianBackgroundEstimator__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_fastjet__Selector, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_GridMedianBackgroundEstimator__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GridMedianBackgroundEstimator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::GridMedianBackgroundEstimator::GridMedianBackgroundEstimator(double,double)\n"
    "    fastjet::GridMedianBackgroundEstimator::GridMedianBackgroundEstimator(fastjet::RectangularGrid const &)\n"
    "    fastjet::GridMedianBackgroundEstimator::GridMedianBackgroundEstimator(double,double,double,double,fastjet::Selector)\n"
    "    fastjet::GridMedianBackgroundEstimator::GridMedianBackgroundEstimator(double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_set_particles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridMedianBackgroundEstimator_set_particles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_set_particles" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *ptr = (std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridMedianBackgroundEstimator_set_particles" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridMedianBackgroundEstimator_set_particles" "', argument " "2"" of type '" "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_particles((std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_set_compute_rho_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridMedianBackgroundEstimator_set_compute_rho_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_set_compute_rho_m" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridMedianBackgroundEstimator_set_compute_rho_m" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_compute_rho_m(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_rho__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridMedianBackgroundEstimator_rho",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_rho" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::GridMedianBackgroundEstimator const *)arg1)->rho();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_sigma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridMedianBackgroundEstimator_sigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_sigma" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::GridMedianBackgroundEstimator const *)arg1)->sigma();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_rho__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridMedianBackgroundEstimator_rho",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_rho" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridMedianBackgroundEstimator_rho" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridMedianBackgroundEstimator_rho" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->rho((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_rho(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridMedianBackgroundEstimator_rho__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GridMedianBackgroundEstimator_rho__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridMedianBackgroundEstimator_rho'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::GridMedianBackgroundEstimator::rho() const\n"
    "    fastjet::GridMedianBackgroundEstimator::rho(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_sigma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridMedianBackgroundEstimator_sigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_sigma" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridMedianBackgroundEstimator_sigma" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridMedianBackgroundEstimator_sigma" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->sigma((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_sigma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridMedianBackgroundEstimator_sigma__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GridMedianBackgroundEstimator_sigma__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridMedianBackgroundEstimator_sigma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::GridMedianBackgroundEstimator::sigma() const\n"
    "    fastjet::GridMedianBackgroundEstimator::sigma(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_has_sigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridMedianBackgroundEstimator_has_sigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_has_sigma" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (bool)(arg1)->has_sigma();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_rho_m__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridMedianBackgroundEstimator_rho_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_rho_m" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::GridMedianBackgroundEstimator const *)arg1)->rho_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_sigma_m__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridMedianBackgroundEstimator_sigma_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_sigma_m" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::GridMedianBackgroundEstimator const *)arg1)->sigma_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_rho_m__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridMedianBackgroundEstimator_rho_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_rho_m" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridMedianBackgroundEstimator_rho_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridMedianBackgroundEstimator_rho_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->rho_m((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_rho_m(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridMedianBackgroundEstimator_rho_m__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GridMedianBackgroundEstimator_rho_m__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridMedianBackgroundEstimator_rho_m'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::GridMedianBackgroundEstimator::rho_m() const\n"
    "    fastjet::GridMedianBackgroundEstimator::rho_m(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_sigma_m__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridMedianBackgroundEstimator_sigma_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_sigma_m" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridMedianBackgroundEstimator_sigma_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridMedianBackgroundEstimator_sigma_m" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = (double)(arg1)->sigma_m((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_sigma_m(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridMedianBackgroundEstimator_sigma_m__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_fastjet__PseudoJet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GridMedianBackgroundEstimator_sigma_m__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GridMedianBackgroundEstimator_sigma_m'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::GridMedianBackgroundEstimator::sigma_m() const\n"
    "    fastjet::GridMedianBackgroundEstimator::sigma_m(fastjet::PseudoJet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_has_rho_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridMedianBackgroundEstimator_has_rho_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_has_rho_m" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (bool)((fastjet::GridMedianBackgroundEstimator const *)arg1)->has_rho_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_mean_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridMedianBackgroundEstimator_mean_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_mean_area" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = (double)((fastjet::GridMedianBackgroundEstimator const *)arg1)->mean_area();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_set_rescaling_class(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  fastjet::FunctionOfPseudoJet< double > *arg2 = (fastjet::FunctionOfPseudoJet< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridMedianBackgroundEstimator_set_rescaling_class",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_set_rescaling_class" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_fastjet__FunctionOfPseudoJetT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridMedianBackgroundEstimator_set_rescaling_class" "', argument " "2"" of type '" "fastjet::FunctionOfPseudoJet< double > const *""'"); 
  }
  arg2 = reinterpret_cast< fastjet::FunctionOfPseudoJet< double > * >(argp2);
  {
    try {
      (arg1)->set_rescaling_class((fastjet::FunctionOfPseudoJet< double > const *)arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridMedianBackgroundEstimator_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridMedianBackgroundEstimator_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridMedianBackgroundEstimator_description" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    try {
      result = ((fastjet::GridMedianBackgroundEstimator const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GridMedianBackgroundEstimator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::GridMedianBackgroundEstimator *arg1 = (fastjet::GridMedianBackgroundEstimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GridMedianBackgroundEstimator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GridMedianBackgroundEstimator" "', argument " "1"" of type '" "fastjet::GridMedianBackgroundEstimator *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::GridMedianBackgroundEstimator * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GridMedianBackgroundEstimator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__GridMedianBackgroundEstimator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Subtractor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::BackgroundEstimatorBase *arg1 = (fastjet::BackgroundEstimatorBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Subtractor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Subtractor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Subtractor" "', argument " "1"" of type '" "fastjet::BackgroundEstimatorBase *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::BackgroundEstimatorBase * >(argp1);
  {
    try {
      result = (fastjet::Subtractor *)new fastjet::Subtractor(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Subtractor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Subtractor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  fastjet::Subtractor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Subtractor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Subtractor" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (fastjet::Subtractor *)new fastjet::Subtractor(arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Subtractor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Subtractor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::Subtractor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Subtractor",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Subtractor" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Subtractor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (fastjet::Subtractor *)new fastjet::Subtractor(arg1,arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Subtractor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Subtractor__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Subtractor")) SWIG_fail;
  {
    try {
      result = (fastjet::Subtractor *)new fastjet::Subtractor();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_fastjet__Subtractor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Subtractor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Subtractor__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__BackgroundEstimatorBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Subtractor__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Subtractor__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Subtractor__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Subtractor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Subtractor::Subtractor(fastjet::BackgroundEstimatorBase *)\n"
    "    fastjet::Subtractor::Subtractor(double)\n"
    "    fastjet::Subtractor::Subtractor(double,double)\n"
    "    fastjet::Subtractor::Subtractor()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Subtractor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Subtractor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Subtractor" "', argument " "1"" of type '" "fastjet::Subtractor *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  {
    try {
      delete arg1;
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_set_defaults(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Subtractor_set_defaults",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_set_defaults" "', argument " "1"" of type '" "fastjet::Subtractor *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  {
    try {
      (arg1)->set_defaults();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_set_use_rho_m__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Subtractor_set_use_rho_m",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_set_use_rho_m" "', argument " "1"" of type '" "fastjet::Subtractor *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Subtractor_set_use_rho_m" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_use_rho_m(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_set_use_rho_m__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Subtractor_set_use_rho_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_set_use_rho_m" "', argument " "1"" of type '" "fastjet::Subtractor *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  {
    try {
      (arg1)->set_use_rho_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_set_use_rho_m(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Subtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Subtractor_set_use_rho_m__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Subtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Subtractor_set_use_rho_m__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Subtractor_set_use_rho_m'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Subtractor::set_use_rho_m(bool)\n"
    "    fastjet::Subtractor::set_use_rho_m()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Subtractor_use_rho_m(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Subtractor_use_rho_m",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_use_rho_m" "', argument " "1"" of type '" "fastjet::Subtractor const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  {
    try {
      result = (bool)((fastjet::Subtractor const *)arg1)->use_rho_m();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_set_safe_mass__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Subtractor_set_safe_mass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_set_safe_mass" "', argument " "1"" of type '" "fastjet::Subtractor *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Subtractor_set_safe_mass" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->set_safe_mass(arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_set_safe_mass__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Subtractor_set_safe_mass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_set_safe_mass" "', argument " "1"" of type '" "fastjet::Subtractor *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  {
    try {
      (arg1)->set_safe_mass();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_set_safe_mass(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Subtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Subtractor_set_safe_mass__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_fastjet__Subtractor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Subtractor_set_safe_mass__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Subtractor_set_safe_mass'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fastjet::Subtractor::set_safe_mass(bool)\n"
    "    fastjet::Subtractor::set_safe_mass()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Subtractor_safe_mass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Subtractor_safe_mass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_safe_mass" "', argument " "1"" of type '" "fastjet::Subtractor const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  {
    try {
      result = (bool)((fastjet::Subtractor const *)arg1)->safe_mass();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_set_known_selectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  fastjet::Selector *arg2 = 0 ;
  fastjet::Selector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Subtractor_set_known_selectors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_set_known_selectors" "', argument " "1"" of type '" "fastjet::Subtractor *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Subtractor_set_known_selectors" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Subtractor_set_known_selectors" "', argument " "2"" of type '" "fastjet::Selector const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::Selector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_fastjet__Selector,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Subtractor_set_known_selectors" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Subtractor_set_known_selectors" "', argument " "3"" of type '" "fastjet::Selector const &""'"); 
  }
  arg3 = reinterpret_cast< fastjet::Selector * >(argp3);
  {
    try {
      (arg1)->set_known_selectors((fastjet::Selector const &)*arg2,(fastjet::Selector const &)*arg3);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  fastjet::PseudoJet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  fastjet::PseudoJet result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Subtractor_result",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_result" "', argument " "1"" of type '" "fastjet::Subtractor const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_fastjet__PseudoJet,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Subtractor_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Subtractor_result" "', argument " "2"" of type '" "fastjet::PseudoJet const &""'"); 
  }
  arg2 = reinterpret_cast< fastjet::PseudoJet * >(argp2);
  {
    try {
      result = ((fastjet::Subtractor const *)arg1)->result((fastjet::PseudoJet const &)*arg2);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_NewPointerObj((new fastjet::PseudoJet(static_cast< const fastjet::PseudoJet& >(result))), SWIGTYPE_p_fastjet__PseudoJet, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Subtractor_description",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor_description" "', argument " "1"" of type '" "fastjet::Subtractor const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  {
    try {
      result = ((fastjet::Subtractor const *)arg1)->description();
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Subtractor___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  fastjet::Subtractor *arg1 = (fastjet::Subtractor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Subtractor___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_fastjet__Subtractor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Subtractor___str__" "', argument " "1"" of type '" "fastjet::Subtractor const *""'"); 
  }
  arg1 = reinterpret_cast< fastjet::Subtractor * >(argp1);
  {
    try {
      result = fastjet_Subtractor___str__((fastjet::Subtractor const *)arg1);
    } catch (fastjet::Error &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj(
          (new fastjet::Error(static_cast<const fastjet::Error& >(_e))),  
          SWIGTYPE_p_fastjet__Error,SWIG_POINTER_OWN),
        "fastjet::Error", SWIGTYPE_p_fastjet__Error); 
      SWIG_fail;
    } 
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Subtractor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_fastjet__Subtractor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_iterator", _wrap_vectorPJ_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorPJ___nonzero__", _wrap_vectorPJ___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorPJ___bool__", _wrap_vectorPJ___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorPJ___len__", _wrap_vectorPJ___len__, METH_VARARGS, NULL},
	 { (char *)"vectorPJ___getslice__", _wrap_vectorPJ___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorPJ___setslice__", _wrap_vectorPJ___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorPJ___delslice__", _wrap_vectorPJ___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorPJ___delitem__", _wrap_vectorPJ___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorPJ___getitem__", _wrap_vectorPJ___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorPJ___setitem__", _wrap_vectorPJ___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_pop", _wrap_vectorPJ_pop, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_append", _wrap_vectorPJ_append, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_empty", _wrap_vectorPJ_empty, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_size", _wrap_vectorPJ_size, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_swap", _wrap_vectorPJ_swap, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_begin", _wrap_vectorPJ_begin, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_end", _wrap_vectorPJ_end, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_rbegin", _wrap_vectorPJ_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_rend", _wrap_vectorPJ_rend, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_clear", _wrap_vectorPJ_clear, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_get_allocator", _wrap_vectorPJ_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_pop_back", _wrap_vectorPJ_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_erase", _wrap_vectorPJ_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorPJ", _wrap_new_vectorPJ, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_push_back", _wrap_vectorPJ_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_front", _wrap_vectorPJ_front, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_back", _wrap_vectorPJ_back, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_assign", _wrap_vectorPJ_assign, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_resize", _wrap_vectorPJ_resize, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_insert", _wrap_vectorPJ_insert, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_reserve", _wrap_vectorPJ_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_capacity", _wrap_vectorPJ_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorPJ", _wrap_delete_vectorPJ, METH_VARARGS, NULL},
	 { (char *)"vectorPJ_swigregister", vectorPJ_swigregister, METH_VARARGS, NULL},
	 { (char *)"__default_random_generator", _wrap___default_random_generator, METH_VARARGS, NULL},
	 { (char *)"new_LimitedWarning", _wrap_new_LimitedWarning, METH_VARARGS, (char *)"\n"
		"\n"
		"`LimitedWarning(int max_warn_in)`  \n"
		"\n"
		"constructor that provides a user-set max number of warnings  \n"
		"\n"
		""},
	 { (char *)"LimitedWarning_warn", _wrap_LimitedWarning_warn, METH_VARARGS, (char *)"\n"
		"\n"
		"`warn(const std::string &warning, std::ostream *ostr)`  \n"
		"\n"
		"outputs a warning to the specified stream  \n"
		"\n"
		""},
	 { (char *)"LimitedWarning_set_default_stream", _wrap_LimitedWarning_set_default_stream, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_default_stream(std::ostream *ostr)`  \n"
		"\n"
		"sets the default output stream for all warnings (by default cerr; passing a null\n"
		"pointer prevents warnings from being output)  \n"
		"\n"
		""},
	 { (char *)"LimitedWarning_set_default_max_warn", _wrap_LimitedWarning_set_default_max_warn, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_default_max_warn(int max_warn)`  \n"
		"\n"
		"sets the default maximum number of warnings of a given kind before warning\n"
		"messages are silenced.  \n"
		"\n"
		""},
	 { (char *)"LimitedWarning_max_warn", _wrap_LimitedWarning_max_warn, METH_VARARGS, (char *)"\n"
		"\n"
		"`max_warn() const -> int`  \n"
		"\n"
		"the maximum number of warning messages that will be printed by this instance of\n"
		"the class  \n"
		"\n"
		""},
	 { (char *)"LimitedWarning_n_warn_so_far", _wrap_LimitedWarning_n_warn_so_far, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_warn_so_far() const -> int`  \n"
		"\n"
		"the number of times so far that a warning has been registered with this instance\n"
		"of the class.  \n"
		"\n"
		""},
	 { (char *)"LimitedWarning_summary", _wrap_LimitedWarning_summary, METH_VARARGS, (char *)"\n"
		"\n"
		"`summary() -> std::string`  \n"
		"\n"
		"returns a summary of all the warnings that came through the LimiteWarning class  \n"
		"\n"
		""},
	 { (char *)"delete_LimitedWarning", _wrap_delete_LimitedWarning, METH_VARARGS, NULL},
	 { (char *)"LimitedWarning_swigregister", LimitedWarning_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Error", _wrap_new_Error, METH_VARARGS, (char *)"\n"
		"\n"
		"`Error(const std::string &message)`  \n"
		"\n"
		"ctor from an error message  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `message` :  \n"
		"    to be printed Note: in addition to the error message, one can choose to\n"
		"    print the backtrace (showing the last few calls before the error) by using\n"
		"    set_print_backtrace(true). The default is \"false\".  \n"
		"\n"
		""},
	 { (char *)"delete_Error", _wrap_delete_Error, METH_VARARGS, (char *)"\n"
		"\n"
		"`~Error()`  \n"
		"\n"
		"virtual dummy dtor  \n"
		"\n"
		""},
	 { (char *)"Error_message", _wrap_Error_message, METH_VARARGS, (char *)"\n"
		"\n"
		"`message() const -> std::string`  \n"
		"\n"
		"the error message  \n"
		"\n"
		""},
	 { (char *)"Error_description", _wrap_Error_description, METH_VARARGS, NULL},
	 { (char *)"Error_set_print_errors", _wrap_Error_set_print_errors, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_print_errors(bool print_errors)`  \n"
		"\n"
		"controls whether the error message (and the backtrace, if its printing is\n"
		"enabled) is printed out or not  \n"
		"\n"
		""},
	 { (char *)"Error_set_print_backtrace", _wrap_Error_set_print_backtrace, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_print_backtrace(bool enabled)`  \n"
		"\n"
		"controls whether the backtrace is printed out with the error message or not.  \n"
		"\n"
		"The default is \"false\".  \n"
		"\n"
		""},
	 { (char *)"Error_set_default_stream", _wrap_Error_set_default_stream, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_default_stream(std::ostream *ostr)`  \n"
		"\n"
		"sets the default output stream for all errors; by default cerr; if it's null\n"
		"then error output is suppressed.  \n"
		"\n"
		""},
	 { (char *)"Error___str__", _wrap_Error___str__, METH_VARARGS, NULL},
	 { (char *)"Error_swigregister", Error_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InternalError", _wrap_new_InternalError, METH_VARARGS, (char *)"\n"
		"\n"
		"`InternalError(const std::string &message_in)`  \n"
		"\n"
		"ctor with error message: just add a bit of info to the message and pass it to\n"
		"the base class  \n"
		"\n"
		""},
	 { (char *)"delete_InternalError", _wrap_delete_InternalError, METH_VARARGS, NULL},
	 { (char *)"InternalError_swigregister", InternalError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PseudoJetStructureBase", _wrap_new_PseudoJetStructureBase, METH_VARARGS, (char *)"\n"
		"\n"
		"`PseudoJetStructureBase()`  \n"
		"\n"
		"default ctor  \n"
		"\n"
		""},
	 { (char *)"delete_PseudoJetStructureBase", _wrap_delete_PseudoJetStructureBase, METH_VARARGS, (char *)"\n"
		"\n"
		"`~PseudoJetStructureBase()`  \n"
		"\n"
		"default (virtual) dtor  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_description", _wrap_PseudoJetStructureBase_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"description  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_has_associated_cluster_sequence", _wrap_PseudoJetStructureBase_has_associated_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_associated_cluster_sequence() const -> bool`  \n"
		"\n"
		"returns true if there is an associated ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_associated_cluster_sequence", _wrap_PseudoJetStructureBase_associated_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`associated_cluster_sequence() const -> const ClusterSequence *`  \n"
		"\n"
		"get a (const) pointer to the parent ClusterSequence (NULL if inexistent)  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_has_valid_cluster_sequence", _wrap_PseudoJetStructureBase_has_valid_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_valid_cluster_sequence() const -> bool`  \n"
		"\n"
		"returns true if this PseudoJet has an associated and still valid\n"
		"ClusterSequence.  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_validated_cs", _wrap_PseudoJetStructureBase_validated_cs, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_cs() const -> const ClusterSequence *`  \n"
		"\n"
		"if the jet has a valid associated cluster sequence then return a pointer to it;\n"
		"otherwise throw an error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_validated_csab", _wrap_PseudoJetStructureBase_validated_csab, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_csab() const -> const ClusterSequenceAreaBase *`  \n"
		"\n"
		"if the jet has valid area information then return a pointer to the associated\n"
		"ClusterSequenceAreaBase object; otherwise throw an error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_has_partner", _wrap_PseudoJetStructureBase_has_partner, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_partner(const PseudoJet &reference, PseudoJet &partner) const -> bool`  \n"
		"\n"
		"check if it has been recombined with another PseudoJet in which case, return its\n"
		"partner through the argument.  \n"
		"\n"
		"Otherwise, 'partner' is set to 0.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_has_child", _wrap_PseudoJetStructureBase_has_child, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_child(const PseudoJet &reference, PseudoJet &child) const -> bool`  \n"
		"\n"
		"check if it has been recombined with another PseudoJet in which case, return its\n"
		"child through the argument.  \n"
		"\n"
		"Otherwise, 'child' is set to 0.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_has_parents", _wrap_PseudoJetStructureBase_has_parents, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_parents(const PseudoJet &reference, PseudoJet &parent1, PseudoJet &parent2)\n"
		"    const -> bool`  \n"
		"\n"
		"check if it is the product of a recombination, in which case return the 2\n"
		"parents through the 'parent1' and 'parent2' arguments.  \n"
		"\n"
		"Otherwise, set these to 0.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_object_in_jet", _wrap_PseudoJetStructureBase_object_in_jet, METH_VARARGS, (char *)"\n"
		"\n"
		"`object_in_jet(const PseudoJet &reference, const PseudoJet &jet) const -> bool`  \n"
		"\n"
		"check if the reference PseudoJet is contained the second one passed as argument.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_has_constituents", _wrap_PseudoJetStructureBase_has_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_constituents() const -> bool`  \n"
		"\n"
		"return true if the structure supports constituents.  \n"
		"\n"
		"false by default  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_constituents", _wrap_PseudoJetStructureBase_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`constituents(const PseudoJet &reference) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"retrieve the constituents.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_has_exclusive_subjets", _wrap_PseudoJetStructureBase_has_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_exclusive_subjets() const -> bool`  \n"
		"\n"
		"return true if the structure supports exclusive_subjets.  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_exclusive_subjets", _wrap_PseudoJetStructureBase_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subjets(const PseudoJet &reference, const double &dcut) const ->\n"
		"    std::vector< PseudoJet >`  \n"
		"\n"
		"return a vector of all subjets of the current jet (in the sense of the exclusive\n"
		"algorithm) that would be obtained when running the algorithm with the given\n"
		"dcut.  \n"
		"\n"
		"Time taken is O(m ln m), where m is the number of subjets that are found. If m\n"
		"gets to be of order of the total number of constituents in the jet, this could\n"
		"be substantially slower than just getting that list of constituents.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		"Note: in a future major release of FastJet (4 or higher), \"const double &\n"
		"dcut\" may be replaced with \"const double dcut\", requiring a modification of\n"
		"derived classes that overload this function.  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_n_exclusive_subjets", _wrap_PseudoJetStructureBase_n_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_exclusive_subjets(const PseudoJet &reference, const double &dcut) const ->\n"
		"    int`  \n"
		"\n"
		"return the size of exclusive_subjets(...); still n ln n with same coefficient,\n"
		"but marginally more efficient than manually taking exclusive_subjets.size()  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		"Note: in a future major release of FastJet (4 or higher), \"const double &\n"
		"dcut\" may be replaced with \"const double dcut\", requiring a modification of\n"
		"derived classes that overload this function.  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_exclusive_subjets_up_to", _wrap_PseudoJetStructureBase_exclusive_subjets_up_to, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subjets_up_to(const PseudoJet &reference, int nsub) const ->\n"
		"    std::vector< PseudoJet >`  \n"
		"\n"
		"return the list of subjets obtained by unclustering the supplied jet down to\n"
		"nsub subjets (or all constituents if there are fewer than nsub).  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_exclusive_subdmerge", _wrap_PseudoJetStructureBase_exclusive_subdmerge, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subdmerge(const PseudoJet &reference, int nsub) const -> double`  \n"
		"\n"
		"return the dij that was present in the merging nsub+1 -> nsub subjets inside\n"
		"this jet.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_exclusive_subdmerge_max", _wrap_PseudoJetStructureBase_exclusive_subdmerge_max, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subdmerge_max(const PseudoJet &reference, int nsub) const -> double`  \n"
		"\n"
		"return the maximum dij that occurred in the whole event at the stage that the\n"
		"nsub+1 -> nsub merge of subjets occurred inside this jet.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_has_pieces", _wrap_PseudoJetStructureBase_has_pieces, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_pieces(const PseudoJet &) const -> bool`  \n"
		"\n"
		"return true if the structure supports pieces.  \n"
		"\n"
		"false by default NB: \"reference\" is commented to avoid unused-variable\n"
		"compiler warnings  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_pieces", _wrap_PseudoJetStructureBase_pieces, METH_VARARGS, (char *)"\n"
		"\n"
		"`pieces(const PseudoJet &) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"retrieve the pieces building the jet.  \n"
		"\n"
		"By default, throws an Error. NB: \"reference\" is commented to avoid unused-\n"
		"variable compiler warnings  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_has_area", _wrap_PseudoJetStructureBase_has_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_area() const -> bool`  \n"
		"\n"
		"check if it has a defined area  \n"
		"\n"
		"false by default  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_area", _wrap_PseudoJetStructureBase_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area(const PseudoJet &reference) const -> double`  \n"
		"\n"
		"return the jet (scalar) area.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_area_error", _wrap_PseudoJetStructureBase_area_error, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_error(const PseudoJet &reference) const -> double`  \n"
		"\n"
		"return the error (uncertainty) associated with the determination of the area of\n"
		"this jet.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_area_4vector", _wrap_PseudoJetStructureBase_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_4vector(const PseudoJet &reference) const -> PseudoJet`  \n"
		"\n"
		"return the jet 4-vector area.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_is_pure_ghost", _wrap_PseudoJetStructureBase_is_pure_ghost, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_pure_ghost(const PseudoJet &reference) const -> bool`  \n"
		"\n"
		"true if this jet is made exclusively of ghosts.  \n"
		"\n"
		"By default, throws an Error  \n"
		"\n"
		""},
	 { (char *)"PseudoJetStructureBase_swigregister", PseudoJetStructureBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PseudoJet", _wrap_new_PseudoJet, METH_VARARGS, (char *)"\n"
		"\n"
		"`PseudoJet(const siscone_spherical::CSphmomentum &four_vector)`  \n"
		"\n"
		"shortcut for converting siscone CSphmomentum into PseudoJet  \n"
		"\n"
		""},
	 { (char *)"delete_PseudoJet", _wrap_delete_PseudoJet, METH_VARARGS, (char *)"\n"
		"\n"
		"`~PseudoJet()`  \n"
		"\n"
		"default (virtual) destructor  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_E", _wrap_PseudoJet_E, METH_VARARGS, (char *)"\n"
		"\n"
		"`E() const -> double`  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_e", _wrap_PseudoJet_e, METH_VARARGS, (char *)"\n"
		"\n"
		"`e() const -> double`  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_px", _wrap_PseudoJet_px, METH_VARARGS, (char *)"\n"
		"\n"
		"`px() const -> double`  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_py", _wrap_PseudoJet_py, METH_VARARGS, (char *)"\n"
		"\n"
		"`py() const -> double`  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_pz", _wrap_PseudoJet_pz, METH_VARARGS, (char *)"\n"
		"\n"
		"`pz() const -> double`  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_phi", _wrap_PseudoJet_phi, METH_VARARGS, (char *)"\n"
		"\n"
		"`phi() const -> double`  \n"
		"\n"
		"returns phi (in the range 0..2pi)  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_phi_std", _wrap_PseudoJet_phi_std, METH_VARARGS, (char *)"\n"
		"\n"
		"`phi_std() const -> double`  \n"
		"\n"
		"returns phi in the range -pi..pi  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_phi_02pi", _wrap_PseudoJet_phi_02pi, METH_VARARGS, (char *)"\n"
		"\n"
		"`phi_02pi() const -> double`  \n"
		"\n"
		"returns phi in the range 0..2pi  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_rap", _wrap_PseudoJet_rap, METH_VARARGS, (char *)"\n"
		"\n"
		"`rap() const -> double`  \n"
		"\n"
		"returns the rapidity or some large value when the rapidity is infinite  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_rapidity", _wrap_PseudoJet_rapidity, METH_VARARGS, (char *)"\n"
		"\n"
		"`rapidity() const -> double`  \n"
		"\n"
		"the same as rap()  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_pseudorapidity", _wrap_PseudoJet_pseudorapidity, METH_VARARGS, (char *)"\n"
		"\n"
		"`pseudorapidity() const -> double`  \n"
		"\n"
		"returns the pseudo-rapidity or some large value when the rapidity is infinite  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_eta", _wrap_PseudoJet_eta, METH_VARARGS, (char *)"\n"
		"\n"
		"`eta() const -> double`  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_pt2", _wrap_PseudoJet_pt2, METH_VARARGS, (char *)"\n"
		"\n"
		"`pt2() const -> double`  \n"
		"\n"
		"returns the squared transverse momentum  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_pt", _wrap_PseudoJet_pt, METH_VARARGS, (char *)"\n"
		"\n"
		"`pt() const -> double`  \n"
		"\n"
		"returns the scalar transverse momentum  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_perp2", _wrap_PseudoJet_perp2, METH_VARARGS, (char *)"\n"
		"\n"
		"`perp2() const -> double`  \n"
		"\n"
		"returns the squared transverse momentum  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_perp", _wrap_PseudoJet_perp, METH_VARARGS, (char *)"\n"
		"\n"
		"`perp() const -> double`  \n"
		"\n"
		"returns the scalar transverse momentum  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_kt2", _wrap_PseudoJet_kt2, METH_VARARGS, (char *)"\n"
		"\n"
		"`kt2() const -> double`  \n"
		"\n"
		"returns the squared transverse momentum  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_m2", _wrap_PseudoJet_m2, METH_VARARGS, (char *)"\n"
		"\n"
		"`m2() const -> double`  \n"
		"\n"
		"returns the squared invariant mass // like CLHEP  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_m", _wrap_PseudoJet_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`m() const -> double`  \n"
		"\n"
		"returns the invariant mass (If m2() is negative then -sqrt(-m2()) is returned,\n"
		"as in CLHEP)  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_mperp2", _wrap_PseudoJet_mperp2, METH_VARARGS, (char *)"\n"
		"\n"
		"`mperp2() const -> double`  \n"
		"\n"
		"returns the squared transverse mass = kt^2+m^2  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_mperp", _wrap_PseudoJet_mperp, METH_VARARGS, (char *)"\n"
		"\n"
		"`mperp() const -> double`  \n"
		"\n"
		"returns the transverse mass = sqrt(kt^2+m^2)  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_mt2", _wrap_PseudoJet_mt2, METH_VARARGS, (char *)"\n"
		"\n"
		"`mt2() const -> double`  \n"
		"\n"
		"returns the squared transverse mass = kt^2+m^2  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_mt", _wrap_PseudoJet_mt, METH_VARARGS, (char *)"\n"
		"\n"
		"`mt() const -> double`  \n"
		"\n"
		"returns the transverse mass = sqrt(kt^2+m^2)  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_modp2", _wrap_PseudoJet_modp2, METH_VARARGS, (char *)"\n"
		"\n"
		"`modp2() const -> double`  \n"
		"\n"
		"return the squared 3-vector modulus = px^2+py^2+pz^2  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_modp", _wrap_PseudoJet_modp, METH_VARARGS, (char *)"\n"
		"\n"
		"`modp() const -> double`  \n"
		"\n"
		"return the 3-vector modulus = sqrt(px^2+py^2+pz^2)  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_Et", _wrap_PseudoJet_Et, METH_VARARGS, (char *)"\n"
		"\n"
		"`Et() const -> double`  \n"
		"\n"
		"return the transverse energy  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_Et2", _wrap_PseudoJet_Et2, METH_VARARGS, (char *)"\n"
		"\n"
		"`Et2() const -> double`  \n"
		"\n"
		"return the transverse energy squared  \n"
		"\n"
		""},
	 { (char *)"PseudoJet___call__", _wrap_PseudoJet___call__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet_kt_distance", _wrap_PseudoJet_kt_distance, METH_VARARGS, (char *)"\n"
		"\n"
		"`kt_distance(const PseudoJet &other) const -> double`  \n"
		"\n"
		"returns kt distance (R=1) between this jet and another  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_plain_distance", _wrap_PseudoJet_plain_distance, METH_VARARGS, (char *)"\n"
		"\n"
		"`plain_distance(const PseudoJet &other) const -> double`  \n"
		"\n"
		"returns squared cylinder (rap-phi) distance between this jet and another  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_squared_distance", _wrap_PseudoJet_squared_distance, METH_VARARGS, (char *)"\n"
		"\n"
		"`squared_distance(const PseudoJet &other) const -> double`  \n"
		"\n"
		"returns squared cylinder (rap-phi) distance between this jet and another  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_delta_R", _wrap_PseudoJet_delta_R, METH_VARARGS, (char *)"\n"
		"\n"
		"`delta_R(const PseudoJet &other) const -> double`  \n"
		"\n"
		"return the cylinder (rap-phi) distance between this jet and another, $\\Delta_R\n"
		"= \\sqrt{\\Delta y^2 + \\Delta \\phi^2}$.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_delta_phi_to", _wrap_PseudoJet_delta_phi_to, METH_VARARGS, (char *)"\n"
		"\n"
		"`delta_phi_to(const PseudoJet &other) const -> double`  \n"
		"\n"
		"returns other.phi() - this.phi(), constrained to be in range -pi .  \n"
		"\n"
		"returns other.phi() - this.phi(), i.e.  \n"
		"\n"
		". pi  \n"
		"\n"
		"the phi distance to other, constrained to be in range -pi .. pi  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_beam_distance", _wrap_PseudoJet_beam_distance, METH_VARARGS, (char *)"\n"
		"\n"
		"`beam_distance() const -> double`  \n"
		"\n"
		"returns distance between this jet and the beam  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_four_mom", _wrap_PseudoJet_four_mom, METH_VARARGS, (char *)"\n"
		"\n"
		"`four_mom() const -> std::valarray< double >`  \n"
		"\n"
		"return a valarray containing the four-momentum (components 0-2 are 3-mom,\n"
		"component 3 is energy).  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_boost", _wrap_PseudoJet_boost, METH_VARARGS, (char *)"\n"
		"\n"
		"`boost(const PseudoJet &prest) -> PseudoJet &`  \n"
		"\n"
		"transform this jet (given in the rest frame of prest) into a jet in the lab\n"
		"frame  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_unboost", _wrap_PseudoJet_unboost, METH_VARARGS, (char *)"\n"
		"\n"
		"`unboost(const PseudoJet &prest) -> PseudoJet &`  \n"
		"\n"
		"transform this jet (given in lab) into a jet in the rest frame of prest  \n"
		"\n"
		""},
	 { (char *)"PseudoJet___imul__", _wrap_PseudoJet___imul__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___idiv__", _wrap_PseudoJet___idiv__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___iadd__", _wrap_PseudoJet___iadd__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___isub__", _wrap_PseudoJet___isub__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet_reset", _wrap_PseudoJet_reset, METH_VARARGS, (char *)"\n"
		"\n"
		"`reset(const L &some_four_vector)`  \n"
		"\n"
		"reset the 4-momentum according to the supplied generic 4-vector (accessible via\n"
		"indexing, [0]==px,...[3]==E) and put the user and history indices back to their\n"
		"default values.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_reset_PtYPhiM", _wrap_PseudoJet_reset_PtYPhiM, METH_VARARGS, (char *)"\n"
		"\n"
		"`reset_PtYPhiM(double pt_in, double y_in, double phi_in, double m_in=0.0)`  \n"
		"\n"
		"reset the PseudoJet according to the specified pt, rapidity, azimuth and mass\n"
		"(also resetting indices, etc.) (phi should satisfy -2pi<phi<4pi)  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_reset_momentum", _wrap_PseudoJet_reset_momentum, METH_VARARGS, (char *)"\n"
		"\n"
		"`reset_momentum(const L &some_four_vector)`  \n"
		"\n"
		"reset the 4-momentum according to the supplied generic 4-vector (accessible via\n"
		"indexing, [0]==px,...[3]==E), but leave all other information (indices, user\n"
		"info, etc.) untouched  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_reset_momentum_PtYPhiM", _wrap_PseudoJet_reset_momentum_PtYPhiM, METH_VARARGS, (char *)"\n"
		"\n"
		"`reset_momentum_PtYPhiM(double pt, double y, double phi, double m=0.0)`  \n"
		"\n"
		"reset the 4-momentum according to the specified pt, rapidity, azimuth and mass\n"
		"(phi should satisfy -2pi<phi<4pi)  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_set_cached_rap_phi", _wrap_PseudoJet_set_cached_rap_phi, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_cached_rap_phi(double rap, double phi)`  \n"
		"\n"
		"in some cases when setting a 4-momentum, the user/program knows what rapidity\n"
		"and azimuth are associated with that 4-momentum; by calling this routine the\n"
		"user can provide the information directly to the PseudoJet and avoid expensive\n"
		"rap-phi recalculations.  \n"
		"\n"
		"*  \n"
		"    Parameters:  \n"
		"    * `rap` :  \n"
		"        rapidity  \n"
		"*  \n"
		"    Parameters:  \n"
		"    * `phi` :  \n"
		"        (in range -twopi...4*pi)  \n"
		"\n"
		"    USE WITH CAUTION: there are no checks that the rapidity and azimuth supplied\n"
		"    are sensible, nor does this reset the 4-momentum components if things don't\n"
		"    match.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_user_index", _wrap_PseudoJet_user_index, METH_VARARGS, (char *)"\n"
		"\n"
		"`user_index() const -> int`  \n"
		"\n"
		"return the user_index,  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_set_user_index", _wrap_PseudoJet_set_user_index, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_user_index(const int index)`  \n"
		"\n"
		"set the user_index, intended to allow the user to add simple identifying\n"
		"information to a particle/jet  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_set_user_info", _wrap_PseudoJet_set_user_info, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_user_info(UserInfoBase *user_info_in)`  \n"
		"\n"
		"sets the internal shared pointer to the user information.  \n"
		"\n"
		"Note that the PseudoJet will now *own* the pointer, and delete the corresponding\n"
		"object when it (the jet, and any copies of the jet) goes out of scope.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_user_info", _wrap_PseudoJet_has_user_info, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_user_info() const -> bool`  \n"
		"\n"
		"returns true if the PseudoJet has user information than can be cast to the\n"
		"template argument type.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_user_info_ptr", _wrap_PseudoJet_user_info_ptr, METH_VARARGS, (char *)"\n"
		"\n"
		"`user_info_ptr() const -> const UserInfoBase *`  \n"
		"\n"
		"retrieve a pointer to the (const) user information  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_user_info_shared_ptr", _wrap_PseudoJet_user_info_shared_ptr, METH_VARARGS, (char *)"\n"
		"\n"
		"`user_info_shared_ptr() -> SharedPtr< UserInfoBase > &`  \n"
		"\n"
		"retrieve a (non-const) shared pointer to the user information; you can use this,\n"
		"for example, to set the shared pointer, eg  \n"
		"\n"
		"\n"
		"or  \n"
		"\n"
		"\n"
		"\n"
		""},
	 { (char *)"PseudoJet_description", _wrap_PseudoJet_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"return a string describing what kind of PseudoJet we are dealing with  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_associated_cluster_sequence", _wrap_PseudoJet_has_associated_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_associated_cluster_sequence() const -> bool`  \n"
		"\n"
		"returns true if this PseudoJet has an associated ClusterSequence.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_associated_cs", _wrap_PseudoJet_has_associated_cs, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_associated_cs() const -> bool`  \n"
		"\n"
		"shorthand for has_associated_cluster_sequence()  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_valid_cluster_sequence", _wrap_PseudoJet_has_valid_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_valid_cluster_sequence() const -> bool`  \n"
		"\n"
		"returns true if this PseudoJet has an associated and still valid(ated)\n"
		"ClusterSequence.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_valid_cs", _wrap_PseudoJet_has_valid_cs, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_valid_cs() const -> bool`  \n"
		"\n"
		"shorthand for has_valid_cluster_sequence()  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_associated_cluster_sequence", _wrap_PseudoJet_associated_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`associated_cluster_sequence() const -> const ClusterSequence *`  \n"
		"\n"
		"get a (const) pointer to the parent ClusterSequence (NULL if inexistent)  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_associated_cs", _wrap_PseudoJet_associated_cs, METH_VARARGS, (char *)"\n"
		"\n"
		"`associated_cs() const -> const ClusterSequence *`  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_validated_cluster_sequence", _wrap_PseudoJet_validated_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_cluster_sequence() const -> const ClusterSequence *`  \n"
		"\n"
		"if the jet has a valid associated cluster sequence then return a pointer to it;\n"
		"otherwise throw an error  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_validated_cs", _wrap_PseudoJet_validated_cs, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_cs() const -> const ClusterSequence *`  \n"
		"\n"
		"shorthand for validated_cluster_sequence()  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_validated_cluster_sequence_area_base", _wrap_PseudoJet_validated_cluster_sequence_area_base, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_cluster_sequence_area_base() const -> const ClusterSequenceAreaBase\n"
		"    *`  \n"
		"\n"
		"if the jet has valid area information then return a pointer to the associated\n"
		"ClusterSequenceAreaBase object; otherwise throw an error  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_validated_csab", _wrap_PseudoJet_validated_csab, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_csab() const -> const ClusterSequenceAreaBase *`  \n"
		"\n"
		"shorthand for validated_cluster_sequence_area_base()  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_set_structure_shared_ptr", _wrap_PseudoJet_set_structure_shared_ptr, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_structure_shared_ptr(const SharedPtr< PseudoJetStructureBase > &structure)`  \n"
		"\n"
		"set the associated structure  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_structure", _wrap_PseudoJet_has_structure, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_structure() const -> bool`  \n"
		"\n"
		"return true if there is some structure associated with this PseudoJet  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_structure_ptr", _wrap_PseudoJet_structure_ptr, METH_VARARGS, (char *)"\n"
		"\n"
		"`structure_ptr() const -> const PseudoJetStructureBase *`  \n"
		"\n"
		"return a pointer to the structure (of type PseudoJetStructureBase*) associated\n"
		"with this PseudoJet.  \n"
		"\n"
		"return NULL if there is no associated structure  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_structure_non_const_ptr", _wrap_PseudoJet_structure_non_const_ptr, METH_VARARGS, (char *)"\n"
		"\n"
		"`structure_non_const_ptr() -> PseudoJetStructureBase *`  \n"
		"\n"
		"return a non-const pointer to the structure (of type PseudoJetStructureBase*)\n"
		"associated with this PseudoJet.  \n"
		"\n"
		"return NULL if there is no associated structure  \n"
		"\n"
		"Only use this if you know what you are doing. In any case, prefer the\n"
		"'structure_ptr()' (the const version) to this method, unless you really need a\n"
		"write access to the PseudoJet's underlying structure.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_validated_structure_ptr", _wrap_PseudoJet_validated_structure_ptr, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_structure_ptr() const -> const PseudoJetStructureBase *`  \n"
		"\n"
		"return a pointer to the structure (of type PseudoJetStructureBase*) associated\n"
		"with this PseudoJet.  \n"
		"\n"
		"throw an error if there is no associated structure  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_structure_shared_ptr", _wrap_PseudoJet_structure_shared_ptr, METH_VARARGS, (char *)"\n"
		"\n"
		"`structure_shared_ptr() const -> const SharedPtr< PseudoJetStructureBase > &`  \n"
		"\n"
		"return a reference to the shared pointer to the PseudoJetStructureBase\n"
		"associated with this PseudoJet  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_partner", _wrap_PseudoJet_has_partner, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_partner(PseudoJet &partner) const -> bool`  \n"
		"\n"
		"check if it has been recombined with another PseudoJet in which case, return its\n"
		"partner through the argument.  \n"
		"\n"
		"Otherwise, 'partner' is set to 0.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_child", _wrap_PseudoJet_has_child, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_child(PseudoJet &child) const -> bool`  \n"
		"\n"
		"check if it has been recombined with another PseudoJet in which case, return its\n"
		"child through the argument.  \n"
		"\n"
		"Otherwise, 'child' is set to 0.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_parents", _wrap_PseudoJet_has_parents, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_parents(PseudoJet &parent1, PseudoJet &parent2) const -> bool`  \n"
		"\n"
		"check if it is the product of a recombination, in which case return the 2\n"
		"parents through the 'parent1' and 'parent2' arguments.  \n"
		"\n"
		"Otherwise, set these to 0.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_contains", _wrap_PseudoJet_contains, METH_VARARGS, (char *)"\n"
		"\n"
		"`contains(const PseudoJet &constituent) const -> bool`  \n"
		"\n"
		"check if the current PseudoJet contains the one passed as argument.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_is_inside", _wrap_PseudoJet_is_inside, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_inside(const PseudoJet &jet) const -> bool`  \n"
		"\n"
		"check if the current PseudoJet is contained the one passed as argument.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_constituents", _wrap_PseudoJet_has_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_constituents() const -> bool`  \n"
		"\n"
		"returns true if the PseudoJet has constituents  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_constituents", _wrap_PseudoJet_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`constituents() const -> std::vector< PseudoJet >`  \n"
		"\n"
		"retrieve the constituents.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence or other substructure information  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_exclusive_subjets", _wrap_PseudoJet_has_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_exclusive_subjets() const -> bool`  \n"
		"\n"
		"returns true if the PseudoJet has support for exclusive subjets  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_n_exclusive_subjets", _wrap_PseudoJet_n_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_exclusive_subjets(const double dcut) const -> int`  \n"
		"\n"
		"return the size of exclusive_subjets(...); still n ln n with same coefficient,\n"
		"but marginally more efficient than manually taking exclusive_subjets.size()  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_exclusive_subjets", _wrap_PseudoJet_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subjets(int nsub) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return the list of subjets obtained by unclustering the supplied jet down to\n"
		"nsub subjets.  \n"
		"\n"
		"Throws an error if there are fewer than nsub particles in the jet.  \n"
		"\n"
		"For ClusterSequence type jets, requires nsub ln nsub time  \n"
		"\n"
		"An Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_exclusive_subjets_up_to", _wrap_PseudoJet_exclusive_subjets_up_to, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subjets_up_to(int nsub) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return the list of subjets obtained by unclustering the supplied jet down to\n"
		"nsub subjets (or all constituents if there are fewer than nsub).  \n"
		"\n"
		"For ClusterSequence type jets, requires nsub ln nsub time  \n"
		"\n"
		"An Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_exclusive_subdmerge", _wrap_PseudoJet_exclusive_subdmerge, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subdmerge(int nsub) const -> double`  \n"
		"\n"
		"Returns the dij that was present in the merging nsub+1 -> nsub subjets inside\n"
		"this jet.  \n"
		"\n"
		"Returns 0 if there were nsub or fewer constituents in the jet.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_exclusive_subdmerge_max", _wrap_PseudoJet_exclusive_subdmerge_max, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subdmerge_max(int nsub) const -> double`  \n"
		"\n"
		"Returns the maximum dij that occurred in the whole event at the stage that the\n"
		"nsub+1 -> nsub merge of subjets occurred inside this jet.  \n"
		"\n"
		"Returns 0 if there were nsub or fewer constituents in the jet.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_pieces", _wrap_PseudoJet_has_pieces, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_pieces() const -> bool`  \n"
		"\n"
		"returns true if a jet has pieces  \n"
		"\n"
		"By default a single particle or a jet coming from a ClusterSequence have no\n"
		"pieces and this methos will return false.  \n"
		"\n"
		"In practice, this is equivalent to have an structure of type\n"
		"CompositeJetStructure.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_pieces", _wrap_PseudoJet_pieces, METH_VARARGS, (char *)"\n"
		"\n"
		"`pieces() const -> std::vector< PseudoJet >`  \n"
		"\n"
		"retrieve the pieces that make up the jet.  \n"
		"\n"
		"If the jet does not support pieces, an error is throw  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_has_area", _wrap_PseudoJet_has_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_area() const -> bool`  \n"
		"\n"
		"check if it has a defined area  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_area", _wrap_PseudoJet_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area() const -> double`  \n"
		"\n"
		"return the jet (scalar) area.  \n"
		"\n"
		"throws an Error if there is no support for area in the parent CS  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_area_error", _wrap_PseudoJet_area_error, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_error() const -> double`  \n"
		"\n"
		"return the error (uncertainty) associated with the determination of the area of\n"
		"this jet.  \n"
		"\n"
		"throws an Error if there is no support for area in the parent CS  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_area_4vector", _wrap_PseudoJet_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_4vector() const -> PseudoJet`  \n"
		"\n"
		"return the jet 4-vector area.  \n"
		"\n"
		"throws an Error if there is no support for area in the parent CS  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_is_pure_ghost", _wrap_PseudoJet_is_pure_ghost, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_pure_ghost() const -> bool`  \n"
		"\n"
		"true if this jet is made exclusively of ghosts.  \n"
		"\n"
		"throws an Error if there is no support for area in the parent CS  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_cluster_hist_index", _wrap_PseudoJet_cluster_hist_index, METH_VARARGS, (char *)"\n"
		"\n"
		"`cluster_hist_index() const -> int`  \n"
		"\n"
		"return the cluster_hist_index, intended to be used by clustering routines.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_set_cluster_hist_index", _wrap_PseudoJet_set_cluster_hist_index, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_cluster_hist_index(const int index)`  \n"
		"\n"
		"set the cluster_hist_index, intended to be used by clustering routines.  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_cluster_sequence_history_index", _wrap_PseudoJet_cluster_sequence_history_index, METH_VARARGS, (char *)"\n"
		"\n"
		"`cluster_sequence_history_index() const -> int`  \n"
		"\n"
		"alternative name for cluster_hist_index() [perhaps more meaningful]  \n"
		"\n"
		""},
	 { (char *)"PseudoJet_set_cluster_sequence_history_index", _wrap_PseudoJet_set_cluster_sequence_history_index, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_cluster_sequence_history_index(const int index)`  \n"
		"\n"
		"alternative name for set_cluster_hist_index(...) [perhaps more meaningful]  \n"
		"\n"
		""},
	 { (char *)"PseudoJet___str__", _wrap_PseudoJet___str__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet_set_python_info", _wrap_PseudoJet_set_python_info, METH_VARARGS, NULL},
	 { (char *)"PseudoJet_python_info", _wrap_PseudoJet_python_info, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___add__", _wrap_PseudoJet___add__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___sub__", _wrap_PseudoJet___sub__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___mul__", _wrap_PseudoJet___mul__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___rmul__", _wrap_PseudoJet___rmul__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___div__", _wrap_PseudoJet___div__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___eq__", _wrap_PseudoJet___eq__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet___ne__", _wrap_PseudoJet___ne__, METH_VARARGS, NULL},
	 { (char *)"PseudoJet_swigregister", PseudoJet_swigregister, METH_VARARGS, NULL},
	 { (char *)"__add__", _wrap___add__, METH_VARARGS, NULL},
	 { (char *)"__sub__", _wrap___sub__, METH_VARARGS, NULL},
	 { (char *)"__div__", _wrap___div__, METH_VARARGS, NULL},
	 { (char *)"__eq__", _wrap___eq__, METH_VARARGS, NULL},
	 { (char *)"__ne__", _wrap___ne__, METH_VARARGS, NULL},
	 { (char *)"dot_product", _wrap_dot_product, METH_VARARGS, NULL},
	 { (char *)"have_same_momentum", _wrap_have_same_momentum, METH_VARARGS, NULL},
	 { (char *)"PtYPhiM", _wrap_PtYPhiM, METH_VARARGS, NULL},
	 { (char *)"sorted_by_pt", _wrap_sorted_by_pt, METH_VARARGS, NULL},
	 { (char *)"sorted_by_rapidity", _wrap_sorted_by_rapidity, METH_VARARGS, NULL},
	 { (char *)"sorted_by_E", _wrap_sorted_by_E, METH_VARARGS, NULL},
	 { (char *)"sorted_by_pz", _wrap_sorted_by_pz, METH_VARARGS, NULL},
	 { (char *)"sort_indices", _wrap_sort_indices, METH_VARARGS, NULL},
	 { (char *)"new_IndexedSortHelper", _wrap_new_IndexedSortHelper, METH_VARARGS, (char *)"\n"
		"\n"
		"`IndexedSortHelper(const std::vector< double > *reference_values)`  \n"
		"\n"
		""},
	 { (char *)"IndexedSortHelper___call__", _wrap_IndexedSortHelper___call__, METH_VARARGS, NULL},
	 { (char *)"delete_IndexedSortHelper", _wrap_delete_IndexedSortHelper, METH_VARARGS, NULL},
	 { (char *)"IndexedSortHelper_swigregister", IndexedSortHelper_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_RangeDefinition", _wrap_delete_RangeDefinition, METH_VARARGS, (char *)"\n"
		"\n"
		"`~RangeDefinition()`  \n"
		"\n"
		"destructor does nothing  \n"
		"\n"
		""},
	 { (char *)"new_RangeDefinition", _wrap_new_RangeDefinition, METH_VARARGS, (char *)"\n"
		"\n"
		"`RangeDefinition(double rapmin, double rapmax, double phimin=0.0, double\n"
		"    phimax=twopi)`  \n"
		"\n"
		"constructor for a range definition given by rapmin <= y <= rapmax, phimin <= phi\n"
		"<= phimax  \n"
		"\n"
		""},
	 { (char *)"RangeDefinition_is_localizable", _wrap_RangeDefinition_is_localizable, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_localizable() const -> bool`  \n"
		"\n"
		"returns true if the range is localizable (i.e.  \n"
		"\n"
		"set_position is meant to do something meaningful).  \n"
		"\n"
		"This version of the class is not localizable and so it returns false.  \n"
		"\n"
		"For localizable classes override this function with a function that returns true  \n"
		"\n"
		""},
	 { (char *)"RangeDefinition_set_position", _wrap_RangeDefinition_set_position, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_position(const PseudoJet &jet)`  \n"
		"\n"
		"place the range on the jet position  \n"
		"\n"
		""},
	 { (char *)"RangeDefinition_is_in_range", _wrap_RangeDefinition_is_in_range, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_in_range(double rap, double phi) const -> bool`  \n"
		"\n"
		"return bool according to whether a (rap,phi) point is in range  \n"
		"\n"
		""},
	 { (char *)"RangeDefinition_get_rap_limits", _wrap_RangeDefinition_get_rap_limits, METH_VARARGS, (char *)"\n"
		"\n"
		"`get_rap_limits(double &rapmin, double &rapmax) const`  \n"
		"\n"
		"return the minimal and maximal rapidity of this range; remember to replace this\n"
		"if you write a derived class with more complex ranges;  \n"
		"\n"
		""},
	 { (char *)"RangeDefinition_area", _wrap_RangeDefinition_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area() const -> double`  \n"
		"\n"
		"area of the range region  \n"
		"\n"
		""},
	 { (char *)"RangeDefinition_description", _wrap_RangeDefinition_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"textual description of range  \n"
		"\n"
		""},
	 { (char *)"RangeDefinition_swigregister", RangeDefinition_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_SelectorWorker", _wrap_delete_SelectorWorker, METH_VARARGS, (char *)"\n"
		"\n"
		"`~SelectorWorker()`  \n"
		"\n"
		"default dtor  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker__pass", _wrap_SelectorWorker__pass, METH_VARARGS, (char *)"\n"
		"\n"
		"`pass(const PseudoJet &jet) const =0 -> bool`  \n"
		"\n"
		"returns true if a given object passes the selection criterion, and is the main\n"
		"function that needs to be overloaded by derived workers.  \n"
		"\n"
		"NB: this function is used only if applies_jet_by_jet() returns true. If it does\n"
		"not, then derived classes are expected to (re)implement the terminator\n"
		"function()  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_terminator", _wrap_SelectorWorker_terminator, METH_VARARGS, (char *)"\n"
		"\n"
		"`terminator(std::vector< const PseudoJet *> &jets) const`  \n"
		"\n"
		"For each jet that does not pass the cuts, this routine sets the pointer to 0.  \n"
		"\n"
		"It does not assume that the PseudoJet* passed as argument are not NULL  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_applies_jet_by_jet", _wrap_SelectorWorker_applies_jet_by_jet, METH_VARARGS, (char *)"\n"
		"\n"
		"`applies_jet_by_jet() const -> bool`  \n"
		"\n"
		"returns true if this can be applied jet by jet  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_description", _wrap_SelectorWorker_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a description of the worker  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_takes_reference", _wrap_SelectorWorker_takes_reference, METH_VARARGS, (char *)"\n"
		"\n"
		"`takes_reference() const -> bool`  \n"
		"\n"
		"returns true if the worker is defined with respect to a reference jet  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_set_reference", _wrap_SelectorWorker_set_reference, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_reference(const PseudoJet &)`  \n"
		"\n"
		"sets the reference jet for the selector NB: \"reference\" is commented to avoid\n"
		"unused-variable compiler warnings  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_copy", _wrap_SelectorWorker_copy, METH_VARARGS, (char *)"\n"
		"\n"
		"`copy() -> SelectorWorker *`  \n"
		"\n"
		"return a copy of the current object.  \n"
		"\n"
		"This function is only called for objects that take a reference and need not be\n"
		"reimplemented otherwise.  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_get_rapidity_extent", _wrap_SelectorWorker_get_rapidity_extent, METH_VARARGS, (char *)"\n"
		"\n"
		"`get_rapidity_extent(double &rapmin, double &rapmax) const`  \n"
		"\n"
		"returns the rapidity range for which it may return \"true\"  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_is_geometric", _wrap_SelectorWorker_is_geometric, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_geometric() const -> bool`  \n"
		"\n"
		"check if it is a geometric selector (i.e.  \n"
		"\n"
		"only puts constraints on rapidity and azimuthal angle)  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_has_finite_area", _wrap_SelectorWorker_has_finite_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_finite_area() const -> bool`  \n"
		"\n"
		"check if it has a finite area  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_has_known_area", _wrap_SelectorWorker_has_known_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_known_area() const -> bool`  \n"
		"\n"
		"check if it has an analytically computable area  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_known_area", _wrap_SelectorWorker_known_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`known_area() const -> double`  \n"
		"\n"
		"if it has a computable area, return it  \n"
		"\n"
		""},
	 { (char *)"SelectorWorker_swigregister", SelectorWorker_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Selector", _wrap_new_Selector, METH_VARARGS, (char *)"\n"
		"\n"
		"`Selector(const RangeDefinition &range)`  \n"
		"\n"
		"ctor from a RangeDefinition  \n"
		"\n"
		"This is provided for backward compatibility and will be removed in a future\n"
		"major release of FastJet  \n"
		"\n"
		"Watch out that the Selector will only hold a pointer to the range so the\n"
		"selector will crash if one tries to use it after the range has gone out of\n"
		"scope. We thus strongly advise against the direct use of this constructor.  \n"
		"\n"
		""},
	 { (char *)"delete_Selector", _wrap_delete_Selector, METH_VARARGS, (char *)"\n"
		"\n"
		"`~Selector()`  \n"
		"\n"
		"dummy virtual dtor  \n"
		"\n"
		""},
	 { (char *)"Selector__pass", _wrap_Selector__pass, METH_VARARGS, (char *)"\n"
		"\n"
		"`pass(const PseudoJet &jet) const -> bool`  \n"
		"\n"
		"return true if the jet passes the selection  \n"
		"\n"
		""},
	 { (char *)"Selector_count", _wrap_Selector_count, METH_VARARGS, (char *)"\n"
		"\n"
		"`count(const std::vector< PseudoJet > &jets) const -> unsigned int`  \n"
		"\n"
		"Return a count of the objects that pass the selection.  \n"
		"\n"
		"This will often be more efficient that getting the vector of objects that passes\n"
		"and then evaluating the size of the vector  \n"
		"\n"
		""},
	 { (char *)"Selector_sum", _wrap_Selector_sum, METH_VARARGS, (char *)"\n"
		"\n"
		"`sum(const std::vector< PseudoJet > &jets) const -> PseudoJet`  \n"
		"\n"
		"Return the 4-vector sum of the objects that pass the selection.  \n"
		"\n"
		"This will often be more efficient that getting the vector of objects that passes\n"
		"and then evaluating the size of the vector  \n"
		"\n"
		""},
	 { (char *)"Selector_scalar_pt_sum", _wrap_Selector_scalar_pt_sum, METH_VARARGS, (char *)"\n"
		"\n"
		"`scalar_pt_sum(const std::vector< PseudoJet > &jets) const -> double`  \n"
		"\n"
		"Return the scalar pt sum of the objects that pass the selection.  \n"
		"\n"
		"This will often be more efficient that getting the vector of objects that passes\n"
		"and then evaluating the size of the vector  \n"
		"\n"
		""},
	 { (char *)"Selector_sift", _wrap_Selector_sift, METH_VARARGS, (char *)"\n"
		"\n"
		"`sift(const std::vector< PseudoJet > &jets, std::vector< PseudoJet >\n"
		"    &jets_that_pass, std::vector< PseudoJet > &jets_that_fail) const`  \n"
		"\n"
		"sift the input jets into two vectors -- those that pass the selector and those\n"
		"that do not  \n"
		"\n"
		""},
	 { (char *)"Selector_applies_jet_by_jet", _wrap_Selector_applies_jet_by_jet, METH_VARARGS, (char *)"\n"
		"\n"
		"`applies_jet_by_jet() const -> bool`  \n"
		"\n"
		"returns true if this can be applied jet by jet  \n"
		"\n"
		""},
	 { (char *)"Selector___call__", _wrap_Selector___call__, METH_VARARGS, NULL},
	 { (char *)"Selector_nullify_non_selected", _wrap_Selector_nullify_non_selected, METH_VARARGS, (char *)"\n"
		"\n"
		"`nullify_non_selected(std::vector< const PseudoJet *> &jets) const`  \n"
		"\n"
		"For each jet that does not pass the cuts, this routine sets the pointer to 0.  \n"
		"\n"
		"It is legitimate for some (or all) of the pointers that are passed to already be\n"
		"NULL.  \n"
		"\n"
		""},
	 { (char *)"Selector_get_rapidity_extent", _wrap_Selector_get_rapidity_extent, METH_VARARGS, (char *)"\n"
		"\n"
		"`get_rapidity_extent(double &rapmin, double &rapmax) const`  \n"
		"\n"
		"returns the rapidity range for which it may return \"true\"  \n"
		"\n"
		""},
	 { (char *)"Selector_description", _wrap_Selector_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a textual description of the selector  \n"
		"\n"
		""},
	 { (char *)"Selector_is_geometric", _wrap_Selector_is_geometric, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_geometric() const -> bool`  \n"
		"\n"
		"returns true if it is a geometric selector (i.e.  \n"
		"\n"
		"one that only puts constraints on rapidities and azimuthal angles)  \n"
		"\n"
		""},
	 { (char *)"Selector_has_finite_area", _wrap_Selector_has_finite_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_finite_area() const -> bool`  \n"
		"\n"
		"returns true if it has a meaningful and finite area (i.e.  \n"
		"\n"
		"the Selector has the property that is_geometric() returns true and the rapidity\n"
		"extent is finite).  \n"
		"\n"
		""},
	 { (char *)"Selector_area", _wrap_Selector_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area(double ghost_area) const -> double`  \n"
		"\n"
		"returns the rapidity-phi area associated with the Selector (throws InvalidArea\n"
		"if the area does not make sense).  \n"
		"\n"
		"The behaviour is the as with the area() call, but with the ability to\n"
		"additionally specify the ghost area to be used in the case of a Monte Carlo area\n"
		"evaluation.  \n"
		"\n"
		""},
	 { (char *)"Selector_worker", _wrap_Selector_worker, METH_VARARGS, (char *)"\n"
		"\n"
		"`worker() const -> const SharedPtr< SelectorWorker > &`  \n"
		"\n"
		"returns a (reference to) the underlying worker's shared pointer  \n"
		"\n"
		""},
	 { (char *)"Selector_validated_worker", _wrap_Selector_validated_worker, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_worker() const -> const SelectorWorker *`  \n"
		"\n"
		"returns a worker if there is a valid one, otherwise throws an InvalidWorker\n"
		"error  \n"
		"\n"
		""},
	 { (char *)"Selector_takes_reference", _wrap_Selector_takes_reference, METH_VARARGS, (char *)"\n"
		"\n"
		"`takes_reference() const -> bool`  \n"
		"\n"
		"returns true if this can be applied jet by jet  \n"
		"\n"
		""},
	 { (char *)"Selector_set_reference", _wrap_Selector_set_reference, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_reference(const PseudoJet &reference) -> const Selector &`  \n"
		"\n"
		"set the reference jet for this Selector  \n"
		"\n"
		""},
	 { (char *)"Selector___iand__", _wrap_Selector___iand__, METH_VARARGS, NULL},
	 { (char *)"Selector___ior__", _wrap_Selector___ior__, METH_VARARGS, NULL},
	 { (char *)"Selector___str__", _wrap_Selector___str__, METH_VARARGS, NULL},
	 { (char *)"Selector___mul__", _wrap_Selector___mul__, METH_VARARGS, NULL},
	 { (char *)"Selector___and__", _wrap_Selector___and__, METH_VARARGS, NULL},
	 { (char *)"Selector___or__", _wrap_Selector___or__, METH_VARARGS, NULL},
	 { (char *)"Selector___invert__", _wrap_Selector___invert__, METH_VARARGS, NULL},
	 { (char *)"Selector_swigregister", Selector_swigregister, METH_VARARGS, NULL},
	 { (char *)"SelectorIdentity", _wrap_SelectorIdentity, METH_VARARGS, NULL},
	 { (char *)"__mul__", _wrap___mul__, METH_VARARGS, NULL},
	 { (char *)"SelectorPtMin", _wrap_SelectorPtMin, METH_VARARGS, NULL},
	 { (char *)"SelectorPtMax", _wrap_SelectorPtMax, METH_VARARGS, NULL},
	 { (char *)"SelectorPtRange", _wrap_SelectorPtRange, METH_VARARGS, NULL},
	 { (char *)"SelectorEtMin", _wrap_SelectorEtMin, METH_VARARGS, NULL},
	 { (char *)"SelectorEtMax", _wrap_SelectorEtMax, METH_VARARGS, NULL},
	 { (char *)"SelectorEtRange", _wrap_SelectorEtRange, METH_VARARGS, NULL},
	 { (char *)"SelectorEMin", _wrap_SelectorEMin, METH_VARARGS, NULL},
	 { (char *)"SelectorEMax", _wrap_SelectorEMax, METH_VARARGS, NULL},
	 { (char *)"SelectorERange", _wrap_SelectorERange, METH_VARARGS, NULL},
	 { (char *)"SelectorMassMin", _wrap_SelectorMassMin, METH_VARARGS, NULL},
	 { (char *)"SelectorMassMax", _wrap_SelectorMassMax, METH_VARARGS, NULL},
	 { (char *)"SelectorMassRange", _wrap_SelectorMassRange, METH_VARARGS, NULL},
	 { (char *)"SelectorRapMin", _wrap_SelectorRapMin, METH_VARARGS, NULL},
	 { (char *)"SelectorRapMax", _wrap_SelectorRapMax, METH_VARARGS, NULL},
	 { (char *)"SelectorRapRange", _wrap_SelectorRapRange, METH_VARARGS, NULL},
	 { (char *)"SelectorAbsRapMin", _wrap_SelectorAbsRapMin, METH_VARARGS, NULL},
	 { (char *)"SelectorAbsRapMax", _wrap_SelectorAbsRapMax, METH_VARARGS, NULL},
	 { (char *)"SelectorAbsRapRange", _wrap_SelectorAbsRapRange, METH_VARARGS, NULL},
	 { (char *)"SelectorEtaMin", _wrap_SelectorEtaMin, METH_VARARGS, NULL},
	 { (char *)"SelectorEtaMax", _wrap_SelectorEtaMax, METH_VARARGS, NULL},
	 { (char *)"SelectorEtaRange", _wrap_SelectorEtaRange, METH_VARARGS, NULL},
	 { (char *)"SelectorAbsEtaMin", _wrap_SelectorAbsEtaMin, METH_VARARGS, NULL},
	 { (char *)"SelectorAbsEtaMax", _wrap_SelectorAbsEtaMax, METH_VARARGS, NULL},
	 { (char *)"SelectorAbsEtaRange", _wrap_SelectorAbsEtaRange, METH_VARARGS, NULL},
	 { (char *)"SelectorPhiRange", _wrap_SelectorPhiRange, METH_VARARGS, NULL},
	 { (char *)"SelectorRapPhiRange", _wrap_SelectorRapPhiRange, METH_VARARGS, NULL},
	 { (char *)"SelectorNHardest", _wrap_SelectorNHardest, METH_VARARGS, NULL},
	 { (char *)"SelectorCircle", _wrap_SelectorCircle, METH_VARARGS, NULL},
	 { (char *)"SelectorDoughnut", _wrap_SelectorDoughnut, METH_VARARGS, NULL},
	 { (char *)"SelectorStrip", _wrap_SelectorStrip, METH_VARARGS, NULL},
	 { (char *)"SelectorRectangle", _wrap_SelectorRectangle, METH_VARARGS, NULL},
	 { (char *)"SelectorPtFractionMin", _wrap_SelectorPtFractionMin, METH_VARARGS, NULL},
	 { (char *)"SelectorIsZero", _wrap_SelectorIsZero, METH_VARARGS, NULL},
	 { (char *)"SelectorIsPureGhost", _wrap_SelectorIsPureGhost, METH_VARARGS, NULL},
	 { (char *)"fastjet_version_string", _wrap_fastjet_version_string, METH_VARARGS, NULL},
	 { (char *)"new_JetDefinition", _wrap_new_JetDefinition, METH_VARARGS, (char *)"\n"
		"\n"
		"`JetDefinition(JetAlgorithm jet_algorithm_in, double R_in, RecombinationScheme\n"
		"    recomb_scheme_in, Strategy strategy_in, int nparameters_in)`  \n"
		"\n"
		"constructor to fully specify a jet-definition (together with information about\n"
		"how algorithically to run it).  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_set_recombination_scheme", _wrap_JetDefinition_set_recombination_scheme, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_recombination_scheme(RecombinationScheme)`  \n"
		"\n"
		"set the recombination scheme to the one provided  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_set_recombiner", _wrap_JetDefinition_set_recombiner, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_recombiner(const JetDefinition &other_jet_def)`  \n"
		"\n"
		"set the recombiner to be the same as the one of 'other_jet_def'  \n"
		"\n"
		"Note that this is the recommended method to associate to a jet definition the\n"
		"recombiner from another jet definition. Compared to the set_recombiner(const\n"
		"Recombiner *) above, it correctly handles the case where the jet definition owns\n"
		"the recombiner (i.e. where delete_recombiner_when_unused has been called)  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_delete_recombiner_when_unused", _wrap_JetDefinition_delete_recombiner_when_unused, METH_VARARGS, (char *)"\n"
		"\n"
		"`delete_recombiner_when_unused()`  \n"
		"\n"
		"calling this tells the JetDefinition to handle the deletion of the recombiner\n"
		"when it is no longer used.  \n"
		"\n"
		"causes the JetDefinition to handle the deletion of the recombiner when it is no\n"
		"longer used  \n"
		"\n"
		"(Should not be called if the recombiner was initialised from a JetDef whose\n"
		"recombiner was already scheduled to delete itself - memory handling will already\n"
		"be automatic across both JetDef's in that case).  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_plugin", _wrap_JetDefinition_plugin, METH_VARARGS, (char *)"\n"
		"\n"
		"`plugin() const -> const Plugin *`  \n"
		"\n"
		"return a pointer to the plugin  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_delete_plugin_when_unused", _wrap_JetDefinition_delete_plugin_when_unused, METH_VARARGS, (char *)"\n"
		"\n"
		"`delete_plugin_when_unused()`  \n"
		"\n"
		"calling this causes the JetDefinition to handle the deletion of the plugin when\n"
		"it is no longer used  \n"
		"\n"
		"allows to let the JetDefinition handle the deletion of the plugin when it is no\n"
		"longer used  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_jet_algorithm", _wrap_JetDefinition_jet_algorithm, METH_VARARGS, (char *)"\n"
		"\n"
		"`jet_algorithm() const -> JetAlgorithm`  \n"
		"\n"
		"return information about the definition...  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_jet_finder", _wrap_JetDefinition_jet_finder, METH_VARARGS, (char *)"\n"
		"\n"
		"`jet_finder() const -> JetAlgorithm`  \n"
		"\n"
		"same as above for backward compatibility  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_R", _wrap_JetDefinition_R, METH_VARARGS, (char *)"\n"
		"\n"
		"`R() const -> double`  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_extra_param", _wrap_JetDefinition_extra_param, METH_VARARGS, (char *)"\n"
		"\n"
		"`extra_param() const -> double`  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_strategy", _wrap_JetDefinition_strategy, METH_VARARGS, (char *)"\n"
		"\n"
		"`strategy() const -> Strategy`  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_recombination_scheme", _wrap_JetDefinition_recombination_scheme, METH_VARARGS, (char *)"\n"
		"\n"
		"`recombination_scheme() const -> RecombinationScheme`  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_set_jet_algorithm", _wrap_JetDefinition_set_jet_algorithm, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_jet_algorithm(JetAlgorithm njf)`  \n"
		"\n"
		"(re)set the jet finder  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_set_jet_finder", _wrap_JetDefinition_set_jet_finder, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_jet_finder(JetAlgorithm njf)`  \n"
		"\n"
		"same as above for backward compatibility  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_set_extra_param", _wrap_JetDefinition_set_extra_param, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_extra_param(double xtra_param)`  \n"
		"\n"
		"(re)set the general purpose extra parameter  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_recombiner", _wrap_JetDefinition_recombiner, METH_VARARGS, (char *)"\n"
		"\n"
		"`recombiner() const -> const Recombiner *`  \n"
		"\n"
		"returns a pointer to the currently defined recombiner.  \n"
		"\n"
		"Warning: the pointer may be to an internal recombiner (for default recombination\n"
		"schemes), in which case if the JetDefinition becomes invalid (e.g. is deleted),\n"
		"the pointer will then point to an object that no longer exists.  \n"
		"\n"
		"Note also that if you copy a JetDefinition with a default recombination scheme,\n"
		"then the two copies will have distinct recombiners, and return different\n"
		"recombiner() pointers.  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_has_same_recombiner", _wrap_JetDefinition_has_same_recombiner, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_same_recombiner(const JetDefinition &other_jd) const -> bool`  \n"
		"\n"
		"returns true if the current jet definitions shares the same recombiner as the\n"
		"one passed as an argument  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_is_spherical", _wrap_JetDefinition_is_spherical, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_spherical() const -> bool`  \n"
		"\n"
		"returns true if the jet definition involves an algorithm intended for use on a\n"
		"spherical geometry (e.g.  \n"
		"\n"
		"e+e- algorithms, as opposed to most pp algorithms, which use a cylindrical,\n"
		"rapidity-phi geometry).  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_description", _wrap_JetDefinition_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"return a textual description of the current jet definition  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_description_no_recombiner", _wrap_JetDefinition_description_no_recombiner, METH_VARARGS, (char *)"\n"
		"\n"
		"`description_no_recombiner() const -> std::string`  \n"
		"\n"
		"returns a description not including the recombiner information  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_algorithm_description", _wrap_JetDefinition_algorithm_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`algorithm_description(const JetAlgorithm jet_alg) -> std::string`  \n"
		"\n"
		"a short textual description of the algorithm jet_alg  \n"
		"\n"
		""},
	 { (char *)"JetDefinition_n_parameters_for_algorithm", _wrap_JetDefinition_n_parameters_for_algorithm, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_parameters_for_algorithm(const JetAlgorithm jet_alg) -> unsigned int`  \n"
		"\n"
		"the number of parameters associated to a given jet algorithm  \n"
		"\n"
		""},
	 { (char *)"JetDefinition___str__", _wrap_JetDefinition___str__, METH_VARARGS, NULL},
	 { (char *)"JetDefinition___call__", _wrap_JetDefinition___call__, METH_VARARGS, NULL},
	 { (char *)"JetDefinition_set_python_recombiner", _wrap_JetDefinition_set_python_recombiner, METH_VARARGS, NULL},
	 { (char *)"delete_JetDefinition", _wrap_delete_JetDefinition, METH_VARARGS, NULL},
	 { (char *)"JetDefinition_swigregister", JetDefinition_swigregister, METH_VARARGS, NULL},
	 { (char *)"join", _wrap_join, METH_VARARGS, NULL},
	 { (char *)"new_CompositeJetStructure", _wrap_new_CompositeJetStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`CompositeJetStructure(const std::vector< PseudoJet > &initial_pieces, const\n"
		"    JetDefinition::Recombiner *recombiner=0)`  \n"
		"\n"
		"ctor with initialisation  \n"
		"\n"
		""},
	 { (char *)"delete_CompositeJetStructure", _wrap_delete_CompositeJetStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`~CompositeJetStructure()`  \n"
		"\n"
		"default dtor  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_description", _wrap_CompositeJetStructure_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"description  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_has_constituents", _wrap_CompositeJetStructure_has_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_constituents() const -> bool`  \n"
		"\n"
		"true unless the jet has no pieces (see also the description of constituents()\n"
		"below)  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_constituents", _wrap_CompositeJetStructure_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`constituents(const PseudoJet &jet) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return the constituents (i.e.  \n"
		"\n"
		"the union of the constituents of each piece)  \n"
		"\n"
		"If any of the pieces has no constituent, the piece itself is considered as a\n"
		"constituent Note that as a consequence, a composite jet with no pieces will have\n"
		"an empty vector as constituents  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_has_pieces", _wrap_CompositeJetStructure_has_pieces, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_pieces(const PseudoJet &) const -> bool`  \n"
		"\n"
		"true if it has pieces (always the case)  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_pieces", _wrap_CompositeJetStructure_pieces, METH_VARARGS, (char *)"\n"
		"\n"
		"`pieces(const PseudoJet &jet) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"returns the pieces  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_has_area", _wrap_CompositeJetStructure_has_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_area() const -> bool`  \n"
		"\n"
		"check if it has a well-defined area  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_area", _wrap_CompositeJetStructure_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area(const PseudoJet &reference) const -> double`  \n"
		"\n"
		"return the jet (scalar) area.  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_area_error", _wrap_CompositeJetStructure_area_error, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_error(const PseudoJet &reference) const -> double`  \n"
		"\n"
		"return the error (uncertainty) associated with the determination of the area of\n"
		"this jet.  \n"
		"\n"
		"Be conservative: return the sum of the errors  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_area_4vector", _wrap_CompositeJetStructure_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_4vector(const PseudoJet &reference) const -> PseudoJet`  \n"
		"\n"
		"return the jet 4-vector area.  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_is_pure_ghost", _wrap_CompositeJetStructure_is_pure_ghost, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_pure_ghost(const PseudoJet &reference) const -> bool`  \n"
		"\n"
		"true if this jet is made exclusively of ghosts.  \n"
		"\n"
		"In this case, it will be true if all pieces are pure ghost  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_discard_area", _wrap_CompositeJetStructure_discard_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`discard_area()`  \n"
		"\n"
		"disable the area of the composite jet  \n"
		"\n"
		"this can be used e.g. to discard the area of a composite jet made of pieces with\n"
		"non-explicit-ghost area since the area may by erroneous in that case  \n"
		"\n"
		""},
	 { (char *)"CompositeJetStructure_swigregister", CompositeJetStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClusterSequenceStructure", _wrap_new_ClusterSequenceStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`ClusterSequenceStructure(const ClusterSequence *cs)`  \n"
		"\n"
		"ctor with initialisation to a given ClusterSequence  \n"
		"\n"
		"In principle, this is reserved for initialisation by the parent ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"delete_ClusterSequenceStructure", _wrap_delete_ClusterSequenceStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`~ClusterSequenceStructure()`  \n"
		"\n"
		"default (virtual) dtor  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_description", _wrap_ClusterSequenceStructure_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"description  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_has_associated_cluster_sequence", _wrap_ClusterSequenceStructure_has_associated_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_associated_cluster_sequence() const -> bool`  \n"
		"\n"
		"returns true if there is an associated ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_associated_cluster_sequence", _wrap_ClusterSequenceStructure_associated_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`associated_cluster_sequence() const -> const ClusterSequence *`  \n"
		"\n"
		"get a (const) pointer to the parent ClusterSequence (NULL if inexistent)  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_has_valid_cluster_sequence", _wrap_ClusterSequenceStructure_has_valid_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_valid_cluster_sequence() const -> bool`  \n"
		"\n"
		"returns true if there is a valid associated ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_validated_cs", _wrap_ClusterSequenceStructure_validated_cs, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_cs() const -> const ClusterSequence *`  \n"
		"\n"
		"if the jet has a valid associated cluster sequence then return a pointer to it;\n"
		"otherwise throw an error  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_validated_csab", _wrap_ClusterSequenceStructure_validated_csab, METH_VARARGS, (char *)"\n"
		"\n"
		"`validated_csab() const -> const ClusterSequenceAreaBase *`  \n"
		"\n"
		"if the jet has valid area information then return a pointer to the associated\n"
		"ClusterSequenceAreaBase object; otherwise throw an error  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_set_associated_cs", _wrap_ClusterSequenceStructure_set_associated_cs, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_associated_cs(const ClusterSequence *new_cs)`  \n"
		"\n"
		"set the associated csw  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_has_partner", _wrap_ClusterSequenceStructure_has_partner, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_partner(const PseudoJet &reference, PseudoJet &partner) const -> bool`  \n"
		"\n"
		"check if it has been recombined with another PseudoJet in which case, return its\n"
		"partner through the argument.  \n"
		"\n"
		"Otherwise, 'partner' is set to 0.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_has_child", _wrap_ClusterSequenceStructure_has_child, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_child(const PseudoJet &reference, PseudoJet &child) const -> bool`  \n"
		"\n"
		"check if it has been recombined with another PseudoJet in which case, return its\n"
		"child through the argument.  \n"
		"\n"
		"Otherwise, 'child' is set to 0.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_has_parents", _wrap_ClusterSequenceStructure_has_parents, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_parents(const PseudoJet &reference, PseudoJet &parent1, PseudoJet &parent2)\n"
		"    const -> bool`  \n"
		"\n"
		"check if it is the product of a recombination, in which case return the 2\n"
		"parents through the 'parent1' and 'parent2' arguments.  \n"
		"\n"
		"Otherwise, set these to 0.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_object_in_jet", _wrap_ClusterSequenceStructure_object_in_jet, METH_VARARGS, (char *)"\n"
		"\n"
		"`object_in_jet(const PseudoJet &reference, const PseudoJet &jet) const -> bool`  \n"
		"\n"
		"check if the reference PseudoJet is contained in the second one passed as\n"
		"argument.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		"false is returned if the 2 PseudoJet do not belong the same ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_has_constituents", _wrap_ClusterSequenceStructure_has_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_constituents() const -> bool`  \n"
		"\n"
		"return true if the structure supports constituents.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_constituents", _wrap_ClusterSequenceStructure_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`constituents(const PseudoJet &reference) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"retrieve the constituents.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_has_exclusive_subjets", _wrap_ClusterSequenceStructure_has_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_exclusive_subjets() const -> bool`  \n"
		"\n"
		"return true if the structure supports exclusive_subjets.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_exclusive_subjets", _wrap_ClusterSequenceStructure_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subjets(const PseudoJet &reference, const double &dcut) const ->\n"
		"    std::vector< PseudoJet >`  \n"
		"\n"
		"return a vector of all subjets of the current jet (in the sense of the exclusive\n"
		"algorithm) that would be obtained when running the algorithm with the given\n"
		"dcut.  \n"
		"\n"
		"Time taken is O(m ln m), where m is the number of subjets that are found. If m\n"
		"gets to be of order of the total number of constituents in the jet, this could\n"
		"be substantially slower than just getting that list of constituents.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_n_exclusive_subjets", _wrap_ClusterSequenceStructure_n_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_exclusive_subjets(const PseudoJet &reference, const double &dcut) const ->\n"
		"    int`  \n"
		"\n"
		"return the size of exclusive_subjets(...); still n ln n with same coefficient,\n"
		"but marginally more efficient than manually taking exclusive_subjets.size()  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_exclusive_subjets_up_to", _wrap_ClusterSequenceStructure_exclusive_subjets_up_to, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subjets_up_to(const PseudoJet &reference, int nsub) const ->\n"
		"    std::vector< PseudoJet >`  \n"
		"\n"
		"return the list of subjets obtained by unclustering the supplied jet down to\n"
		"nsub subjets (or all constituents if there are fewer than nsub).  \n"
		"\n"
		"requires nsub ln nsub time  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_exclusive_subdmerge", _wrap_ClusterSequenceStructure_exclusive_subdmerge, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subdmerge(const PseudoJet &reference, int nsub) const -> double`  \n"
		"\n"
		"return the dij that was present in the merging nsub+1 -> nsub subjets inside\n"
		"this jet.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_exclusive_subdmerge_max", _wrap_ClusterSequenceStructure_exclusive_subdmerge_max, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subdmerge_max(const PseudoJet &reference, int nsub) const -> double`  \n"
		"\n"
		"return the maximum dij that occurred in the whole event at the stage that the\n"
		"nsub+1 -> nsub merge of subjets occurred inside this jet.  \n"
		"\n"
		"an Error is thrown if this PseudoJet has no currently valid associated\n"
		"ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_has_pieces", _wrap_ClusterSequenceStructure_has_pieces, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_pieces(const PseudoJet &reference) const -> bool`  \n"
		"\n"
		"by convention, a jet associated with a ClusterSequence will have its parents as\n"
		"pieces  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_pieces", _wrap_ClusterSequenceStructure_pieces, METH_VARARGS, (char *)"\n"
		"\n"
		"`pieces(const PseudoJet &reference) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"by convention, a jet associated with a ClusterSequence will have its parents as\n"
		"pieces  \n"
		"\n"
		"if it has no parents, then there will only be a single piece: itself  \n"
		"\n"
		"Note that to answer that question, we need to access the cluster sequence. If\n"
		"the cluster sequence has gone out of scope, an error will be thrown  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_has_area", _wrap_ClusterSequenceStructure_has_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_area() const -> bool`  \n"
		"\n"
		"check if it has a defined area  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_area", _wrap_ClusterSequenceStructure_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area(const PseudoJet &reference) const -> double`  \n"
		"\n"
		"return the jet (scalar) area.  \n"
		"\n"
		"throws an Error if there is no support for area in the parent CS  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_area_error", _wrap_ClusterSequenceStructure_area_error, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_error(const PseudoJet &reference) const -> double`  \n"
		"\n"
		"return the error (uncertainty) associated with the determination of the area of\n"
		"this jet.  \n"
		"\n"
		"throws an Error if there is no support for area in the parent CS  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_area_4vector", _wrap_ClusterSequenceStructure_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_4vector(const PseudoJet &reference) const -> PseudoJet`  \n"
		"\n"
		"return the jet 4-vector area.  \n"
		"\n"
		"throws an Error if there is no support for area in the parent CS  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_is_pure_ghost", _wrap_ClusterSequenceStructure_is_pure_ghost, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_pure_ghost(const PseudoJet &reference) const -> bool`  \n"
		"\n"
		"true if this jet is made exclusively of ghosts.  \n"
		"\n"
		"throws an Error if there is no support for area in the parent CS  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceStructure_swigregister", ClusterSequenceStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ClusterSequence", _wrap_delete_ClusterSequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`~ClusterSequence()`  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_inclusive_jets", _wrap_ClusterSequence_inclusive_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`inclusive_jets(const double ptmin=0.0) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return a vector of all jets (in the sense of the inclusive algorithm) with pt >=\n"
		"ptmin.  \n"
		"\n"
		"Time taken should be of the order of the number of jets returned.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_n_exclusive_jets", _wrap_ClusterSequence_n_exclusive_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_exclusive_jets(const double dcut) const -> int`  \n"
		"\n"
		"return the number of jets (in the sense of the exclusive algorithm) that would\n"
		"be obtained when running the algorithm with the given dcut.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_jets", _wrap_ClusterSequence_exclusive_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_jets(const int njets) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return a vector of all jets when the event is clustered (in the exclusive sense)\n"
		"to exactly njets.  \n"
		"\n"
		"If there are fewer than njets particles in the ClusterSequence an error is\n"
		"thrown  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_jets_up_to", _wrap_ClusterSequence_exclusive_jets_up_to, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_jets_up_to(const int njets) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return a vector of all jets when the event is clustered (in the exclusive sense)\n"
		"to exactly njets.  \n"
		"\n"
		"If there are fewer than njets particles in the ClusterSequence the function just\n"
		"returns however many particles there were.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_dmerge", _wrap_ClusterSequence_exclusive_dmerge, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_dmerge(const int njets) const -> double`  \n"
		"\n"
		"return the dmin corresponding to the recombination that went from n+1 to n jets\n"
		"(sometimes known as d_{n n+1}).  \n"
		"\n"
		"return the dmin corresponding to the recombination that went from n+1 to n jets  \n"
		"\n"
		"If the number of particles in the event is <= njets, the function returns 0.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_dmerge_max", _wrap_ClusterSequence_exclusive_dmerge_max, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_dmerge_max(const int njets) const -> double`  \n"
		"\n"
		"return the maximum of the dmin encountered during all recombinations up to the\n"
		"one that led to an n-jet final state; identical to exclusive_dmerge, except in\n"
		"cases where the dmin do not increase monotonically.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_ymerge", _wrap_ClusterSequence_exclusive_ymerge, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_ymerge(int njets) const -> double`  \n"
		"\n"
		"return the ymin corresponding to the recombination that went from n+1 to n jets\n"
		"(sometimes known as y_{n n+1}).  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_ymerge_max", _wrap_ClusterSequence_exclusive_ymerge_max, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_ymerge_max(int njets) const -> double`  \n"
		"\n"
		"same as exclusive_dmerge_max, but normalised to squared total energy  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_n_exclusive_jets_ycut", _wrap_ClusterSequence_n_exclusive_jets_ycut, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_exclusive_jets_ycut(double ycut) const -> int`  \n"
		"\n"
		"the number of exclusive jets at the given ycut  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_jets_ycut", _wrap_ClusterSequence_exclusive_jets_ycut, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_jets_ycut(double ycut) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"the exclusive jets obtained at the given ycut  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_n_exclusive_subjets", _wrap_ClusterSequence_n_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_exclusive_subjets(const PseudoJet &jet, const double dcut) const -> int`  \n"
		"\n"
		"return the size of exclusive_subjets(...); still n ln n with same coefficient,\n"
		"but marginally more efficient than manually taking exclusive_subjets.size()  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_subjets", _wrap_ClusterSequence_exclusive_subjets, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subjets(const PseudoJet &jet, int nsub) const -> std::vector<\n"
		"    PseudoJet >`  \n"
		"\n"
		"return the list of subjets obtained by unclustering the supplied jet down to\n"
		"nsub subjets.  \n"
		"\n"
		"Throws an error if there are fewer than nsub particles in the jet.  \n"
		"\n"
		"This requires nsub ln nsub time  \n"
		"\n"
		"Throws an error if there are fewer than nsub particles in the jet.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_subjets_up_to", _wrap_ClusterSequence_exclusive_subjets_up_to, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subjets_up_to(const PseudoJet &jet, int nsub) const -> std::vector<\n"
		"    PseudoJet >`  \n"
		"\n"
		"return the list of subjets obtained by unclustering the supplied jet down to\n"
		"nsub subjets (or all constituents if there are fewer than nsub).  \n"
		"\n"
		"This requires nsub ln nsub time  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_subdmerge", _wrap_ClusterSequence_exclusive_subdmerge, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subdmerge(const PseudoJet &jet, int nsub) const -> double`  \n"
		"\n"
		"returns the dij that was present in the merging nsub+1 -> nsub subjets inside\n"
		"this jet.  \n"
		"\n"
		"return the dij that was present in the merging nsub+1 -> nsub subjets inside\n"
		"this jet.  \n"
		"\n"
		"Returns 0 if there were nsub or fewer constituents in the jet.  \n"
		"\n"
		"If the jet has nsub or fewer constituents, it will return 0.  \n"
		"\n"
		"will be zero if nconst <= nsub, since highest will be an original particle have\n"
		"zero dij  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_exclusive_subdmerge_max", _wrap_ClusterSequence_exclusive_subdmerge_max, METH_VARARGS, (char *)"\n"
		"\n"
		"`exclusive_subdmerge_max(const PseudoJet &jet, int nsub) const -> double`  \n"
		"\n"
		"returns the maximum dij that occurred in the whole event at the stage that the\n"
		"nsub+1 -> nsub merge of subjets occurred inside this jet.  \n"
		"\n"
		"return the maximum dij that occurred in the whole event at the stage that the\n"
		"nsub+1 -> nsub merge of subjets occurred inside this jet.  \n"
		"\n"
		"Returns 0 if there were nsub or fewer constituents in the jet.  \n"
		"\n"
		"If the jet has nsub or fewer constituents, it will return 0.  \n"
		"\n"
		"will be zero if nconst <= nsub, since highest will be an original particle have\n"
		"zero dij  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_Q", _wrap_ClusterSequence_Q, METH_VARARGS, (char *)"\n"
		"\n"
		"`Q() const -> double`  \n"
		"\n"
		"returns the sum of all energies in the event (relevant mainly for e+e-)  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_Q2", _wrap_ClusterSequence_Q2, METH_VARARGS, (char *)"\n"
		"\n"
		"`Q2() const -> double`  \n"
		"\n"
		"return Q()^2  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_object_in_jet", _wrap_ClusterSequence_object_in_jet, METH_VARARGS, (char *)"\n"
		"\n"
		"`object_in_jet(const PseudoJet &object, const PseudoJet &jet) const -> bool`  \n"
		"\n"
		"returns true iff the object is included in the jet.  \n"
		"\n"
		"NB: this is only sensible if the object is already registered within the cluster\n"
		"sequence, so you cannot use it with an input particle to the CS (since the\n"
		"particle won't have the history index set properly).  \n"
		"\n"
		"For nice clustering structures it should run in O(ln(N)) time but in worst cases\n"
		"(certain cone plugins) it can take O(n) time, where n is the number of particles\n"
		"in the jet.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_has_parents", _wrap_ClusterSequence_has_parents, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_parents(const PseudoJet &jet, PseudoJet &parent1, PseudoJet &parent2) const\n"
		"    -> bool`  \n"
		"\n"
		"if the jet has parents in the clustering, it returns true and sets parent1 and\n"
		"parent2 equal to them.  \n"
		"\n"
		"if it has no parents it returns false and sets parent1 and parent2 to zero  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_has_child", _wrap_ClusterSequence_has_child, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_child(const PseudoJet &jet, const PseudoJet *&childp) const -> bool`  \n"
		"\n"
		"Version of has_child that sets a pointer to the child if the child exists;.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_has_partner", _wrap_ClusterSequence_has_partner, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_partner(const PseudoJet &jet, PseudoJet &partner) const -> bool`  \n"
		"\n"
		"if this jet has a child (and so a partner) return true and give the partner,\n"
		"otherwise return false and set the partner to zero  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_constituents", _wrap_ClusterSequence_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`constituents(const PseudoJet &jet) const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return a vector of the particles that make up jet  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_print_jets_for_root", _wrap_ClusterSequence_print_jets_for_root, METH_VARARGS, (char *)"\n"
		"\n"
		"`print_jets_for_root(const std::vector< PseudoJet > &jets, const std::string\n"
		"    &filename, const std::string &comment=\"\") const`  \n"
		"\n"
		"print jets for root to the file labelled filename, with an optional comment at\n"
		"the beginning  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_add_constituents", _wrap_ClusterSequence_add_constituents, METH_VARARGS, (char *)"\n"
		"\n"
		"`add_constituents(const PseudoJet &jet, std::vector< PseudoJet > &subjet_vector)\n"
		"    const`  \n"
		"\n"
		"add on to subjet_vector the constituents of jet (for internal use mainly)  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_strategy_used", _wrap_ClusterSequence_strategy_used, METH_VARARGS, (char *)"\n"
		"\n"
		"`strategy_used() const -> Strategy`  \n"
		"\n"
		"return the enum value of the strategy used to cluster the event  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_strategy_string", _wrap_ClusterSequence_strategy_string, METH_VARARGS, (char *)"\n"
		"\n"
		"`strategy_string(Strategy strategy_in) const -> std::string`  \n"
		"\n"
		"return the name of the strategy associated with the enum strategy_in  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_jet_def", _wrap_ClusterSequence_jet_def, METH_VARARGS, (char *)"\n"
		"\n"
		"`jet_def() const -> const JetDefinition &`  \n"
		"\n"
		"return a reference to the jet definition  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_delete_self_when_unused", _wrap_ClusterSequence_delete_self_when_unused, METH_VARARGS, (char *)"\n"
		"\n"
		"`delete_self_when_unused()`  \n"
		"\n"
		"by calling this routine you tell the ClusterSequence to delete itself when all\n"
		"the Pseudojets associated with it have gone out of scope.  \n"
		"\n"
		"At the time you call this, there must be at least one jet or other object\n"
		"outside the CS that is associated with the CS (e.g. the result of\n"
		"inclusive_jets()).  \n"
		"\n"
		"NB: after having made this call, the user is still allowed to delete the CS.\n"
		"Jets associated with it will then simply not be able to access their\n"
		"substructure after that point.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_will_delete_self_when_unused", _wrap_ClusterSequence_will_delete_self_when_unused, METH_VARARGS, (char *)"\n"
		"\n"
		"`will_delete_self_when_unused() const -> bool`  \n"
		"\n"
		"return true if the object has been told to delete itself when unused  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_signal_imminent_self_deletion", _wrap_ClusterSequence_signal_imminent_self_deletion, METH_VARARGS, (char *)"\n"
		"\n"
		"`signal_imminent_self_deletion() const`  \n"
		"\n"
		"tell the ClusterSequence it's about to be self deleted (internal use only)  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_jet_scale_for_algorithm", _wrap_ClusterSequence_jet_scale_for_algorithm, METH_VARARGS, (char *)"\n"
		"\n"
		"`jet_scale_for_algorithm(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"returns the scale associated with a jet as required for this clustering\n"
		"algorithm (kt^2 for the kt-algorithm, 1 for the Cambridge algorithm).  \n"
		"\n"
		"Intended mainly for internal use and not valid for plugin algorithms.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_plugin_record_ij_recombination", _wrap_ClusterSequence_plugin_record_ij_recombination, METH_VARARGS, (char *)"\n"
		"\n"
		"`plugin_record_ij_recombination(int jet_i, int jet_j, double dij, const\n"
		"    PseudoJet &newjet, int &newjet_k)`  \n"
		"\n"
		"as for the simpler variant of plugin_record_ij_recombination, except that the\n"
		"new jet is attributed the momentum and user_index of newjet  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_plugin_record_iB_recombination", _wrap_ClusterSequence_plugin_record_iB_recombination, METH_VARARGS, (char *)"\n"
		"\n"
		"`plugin_record_iB_recombination(int jet_i, double diB)`  \n"
		"\n"
		"record the fact that there has been a recombination between jets()[jet_i] and\n"
		"the beam, with the specified diB; when looking for inclusive jets, any iB\n"
		"recombination will returned to the user as a jet.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_plugin_associate_extras", _wrap_ClusterSequence_plugin_associate_extras, METH_VARARGS, (char *)"\n"
		"\n"
		"`plugin_associate_extras(Extras *extras_in)`  \n"
		"\n"
		"the plugin can associate some extra information with the ClusterSequence object\n"
		"by calling this function.  \n"
		"\n"
		"The ClusterSequence takes ownership of the pointer (and responsibility for\n"
		"deleting it when the CS gets deleted).  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_plugin_activated", _wrap_ClusterSequence_plugin_activated, METH_VARARGS, (char *)"\n"
		"\n"
		"`plugin_activated() const -> bool`  \n"
		"\n"
		"returns true when the plugin is allowed to run the show.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_extras", _wrap_ClusterSequence_extras, METH_VARARGS, (char *)"\n"
		"\n"
		"`extras() const -> const Extras *`  \n"
		"\n"
		"returns a pointer to the extras object (may be null)  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_jets", _wrap_ClusterSequence_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`jets() const -> const std::vector< PseudoJet > &`  \n"
		"\n"
		"allow the user to access the internally stored _jets() array, which contains\n"
		"both the initial particles and the various intermediate and final stages of\n"
		"recombination.  \n"
		"\n"
		"The first n_particles() entries are the original particles, in the order in\n"
		"which they were supplied to the ClusterSequence constructor. It can be useful to\n"
		"access them for example when examining whether a given input object is part of a\n"
		"specific jet, via the objects_in_jet(...) member function (which only takes\n"
		"PseudoJets that are registered in the ClusterSequence).  \n"
		"\n"
		"One of the other (internal uses) is related to the fact because we don't seem to\n"
		"be able to access protected elements of the class for an object that is not\n"
		"\"this\" (at least in case where \"this\" is of a slightly different kind from\n"
		"the object, both derived from ClusterSequence).  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_history", _wrap_ClusterSequence_history, METH_VARARGS, (char *)"\n"
		"\n"
		"`history() const -> const std::vector< history_element > &`  \n"
		"\n"
		"allow the user to access the raw internal history.  \n"
		"\n"
		"This is present (as for jets()) in part so that protected derived classes can\n"
		"access this information about other ClusterSequences.  \n"
		"\n"
		"A user who wishes to follow the details of the ClusterSequence can also make use\n"
		"of this information (and should consult the history_element documentation for\n"
		"more information), but should be aware that these internal structures may evolve\n"
		"in future FastJet versions.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_n_particles", _wrap_ClusterSequence_n_particles, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_particles() const -> unsigned int`  \n"
		"\n"
		"returns the number of particles that were provided to the clustering algorithm\n"
		"(helps the user find their way around the history and jets objects if they\n"
		"weren't paying attention beforehand).  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_particle_jet_indices", _wrap_ClusterSequence_particle_jet_indices, METH_VARARGS, (char *)"\n"
		"\n"
		"`particle_jet_indices(const std::vector< PseudoJet > &) const -> std::vector<\n"
		"    int >`  \n"
		"\n"
		"returns a vector of size n_particles() which indicates, for each of the initial\n"
		"particles (in the order in which they were supplied), which of the supplied jets\n"
		"it belongs to; if it does not belong to any of the supplied jets, the index is\n"
		"set to -1;  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_unique_history_order", _wrap_ClusterSequence_unique_history_order, METH_VARARGS, (char *)"\n"
		"\n"
		"`unique_history_order() const -> std::vector< int >`  \n"
		"\n"
		"routine that returns an order in which to read the history such that clusterings\n"
		"that lead to identical jet compositions but different histories (because of\n"
		"degeneracies in the clustering order) will have matching constituents for each\n"
		"matching entry in the unique_history_order.  \n"
		"\n"
		"The order has the property that an entry's parents will always appear prior to\n"
		"that entry itself.  \n"
		"\n"
		"Roughly speaking the order is such that we first provide all steps that lead to\n"
		"the final jet containing particle 1; then we have the steps that lead to\n"
		"reconstruction of the jet containing the next-lowest-numbered unclustered\n"
		"particle, etc... [see GPS CCN28-12 for more info -- of course a full explanation\n"
		"here would be better...]  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_unclustered_particles", _wrap_ClusterSequence_unclustered_particles, METH_VARARGS, (char *)"\n"
		"\n"
		"`unclustered_particles() const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return the set of particles that have not been clustered.  \n"
		"\n"
		"For kt and cam/aachen algorithms this should always be null, but for cone type\n"
		"algorithms it can be non-null;  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_childless_pseudojets", _wrap_ClusterSequence_childless_pseudojets, METH_VARARGS, (char *)"\n"
		"\n"
		"`childless_pseudojets() const -> std::vector< PseudoJet >`  \n"
		"\n"
		"Return the list of pseudojets in the ClusterSequence that do not have children\n"
		"(and are not among the inclusive jets).  \n"
		"\n"
		"They may result from a clustering step or may be one of the pseudojets returned\n"
		"by unclustered_particles().  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_contains", _wrap_ClusterSequence_contains, METH_VARARGS, (char *)"\n"
		"\n"
		"`contains(const PseudoJet &object) const -> bool`  \n"
		"\n"
		"returns true if the object (jet or particle) is contained by (ie belongs to)\n"
		"this cluster sequence.  \n"
		"\n"
		"Tests performed: if thejet's interface is this cluster sequence and its cluster\n"
		"history index is in a consistent range.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_transfer_from_sequence", _wrap_ClusterSequence_transfer_from_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`transfer_from_sequence(const ClusterSequence &from_seq, const\n"
		"    FunctionOfPseudoJet< PseudoJet > *action_on_jets=0)`  \n"
		"\n"
		"transfer the sequence contained in other_seq into our own; any plugin \"extras\"\n"
		"contained in the from_seq will be lost from there.  \n"
		"\n"
		"It also sets the ClusterSequence pointers of the PseudoJets in the history to\n"
		"point to this ClusterSequence  \n"
		"\n"
		"When specified, the second argument is an action that will be applied on every\n"
		"jets in the resulting ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_structure_shared_ptr", _wrap_ClusterSequence_structure_shared_ptr, METH_VARARGS, (char *)"\n"
		"\n"
		"`structure_shared_ptr() const -> const SharedPtr< PseudoJetStructureBase > &`  \n"
		"\n"
		"retrieve a shared pointer to the wrapper to this ClusterSequence  \n"
		"\n"
		"this may turn useful if you want to track when this ClusterSequence goes out of\n"
		"scope  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_print_banner", _wrap_ClusterSequence_print_banner, METH_VARARGS, (char *)"\n"
		"\n"
		"`print_banner()`  \n"
		"\n"
		"This is the function that is automatically called during clustering to print the\n"
		"FastJet banner.  \n"
		"\n"
		"Only the first call to this function will result in the printout of the banner.\n"
		"Users may wish to call this function themselves, during the initialization phase\n"
		"of their program, in order to ensure that the banner appears before other\n"
		"output. This call will not affect 3rd-party banners, e.g. those from plugins.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_set_fastjet_banner_stream", _wrap_ClusterSequence_set_fastjet_banner_stream, METH_VARARGS, NULL},
	 { (char *)"ClusterSequence_fastjet_banner_stream", _wrap_ClusterSequence_fastjet_banner_stream, METH_VARARGS, (char *)"\n"
		"\n"
		"`fastjet_banner_stream() -> std::ostream *`  \n"
		"\n"
		"returns a pointer to the stream to be used to print banners (cout by default).  \n"
		"\n"
		"This function is used by plugins to determine where to direct their banners.\n"
		"Plugins should properly handle the case where the pointer is null.  \n"
		"\n"
		""},
	 { (char *)"new_ClusterSequence", _wrap_new_ClusterSequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`ClusterSequence(const ClusterSequence &cs)`  \n"
		"\n"
		"copy constructor for a ClusterSequence  \n"
		"\n"
		""},
	 { (char *)"ClusterSequence_swigregister", ClusterSequence_swigregister, METH_VARARGS, NULL},
	 { (char *)"TilingBase_tile_index", _wrap_TilingBase_tile_index, METH_VARARGS, (char *)"\n"
		"\n"
		"`tile_index(const PseudoJet &p) const =0 -> int`  \n"
		"\n"
		"returns the index of the tile in which p is located, or -1 if p is outside the\n"
		"tiling region  \n"
		"\n"
		""},
	 { (char *)"TilingBase_n_tiles", _wrap_TilingBase_n_tiles, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_tiles() const =0 -> int`  \n"
		"\n"
		"returns the total number of tiles in the tiling; valid tile indices run from 0\n"
		"...  \n"
		"\n"
		"n_tiles()-1;  \n"
		"\n"
		""},
	 { (char *)"TilingBase_n_good_tiles", _wrap_TilingBase_n_good_tiles, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_good_tiles() const -> int`  \n"
		"\n"
		"returns the number of tiles that are \"good\"; i.e.  \n"
		"\n"
		"there is scope for having tiles that, for whatever reason, should be ignored;\n"
		"there are situations in which having \"non-good\" tiles may be the simplest\n"
		"mechanism to obtain a tiling with holes in it  \n"
		"\n"
		""},
	 { (char *)"TilingBase_tile_is_good", _wrap_TilingBase_tile_is_good, METH_VARARGS, (char *)"\n"
		"\n"
		"`tile_is_good(int) const -> bool`  \n"
		"\n"
		"returns whether a given tile is good  \n"
		"\n"
		""},
	 { (char *)"TilingBase_all_tiles_good", _wrap_TilingBase_all_tiles_good, METH_VARARGS, (char *)"\n"
		"\n"
		"`all_tiles_good() const -> bool`  \n"
		"\n"
		"returns whether all tiles are good  \n"
		"\n"
		""},
	 { (char *)"TilingBase_all_tiles_equal_area", _wrap_TilingBase_all_tiles_equal_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`all_tiles_equal_area() const -> bool`  \n"
		"\n"
		"returns true if all tiles have the same area  \n"
		"\n"
		""},
	 { (char *)"TilingBase_tile_area", _wrap_TilingBase_tile_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`tile_area(int) const -> double`  \n"
		"\n"
		"returns the area of tile itile.  \n"
		"\n"
		"Here with a default implementation to return mean_tile_area(), consistent with\n"
		"the fact that all_tiles_equal_area() returns true.  \n"
		"\n"
		""},
	 { (char *)"TilingBase_mean_tile_area", _wrap_TilingBase_mean_tile_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`mean_tile_area() const =0 -> double`  \n"
		"\n"
		"returns the mean area of the tiles.  \n"
		"\n"
		""},
	 { (char *)"TilingBase_description", _wrap_TilingBase_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const =0 -> std::string`  \n"
		"\n"
		"returns a string to describe the tiling  \n"
		"\n"
		""},
	 { (char *)"TilingBase_is_initialised", _wrap_TilingBase_is_initialised, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_initialised() const =0 -> bool`  \n"
		"\n"
		"returns true if the Tiling structure is in a suitably initialised state  \n"
		"\n"
		""},
	 { (char *)"TilingBase_is_initialized", _wrap_TilingBase_is_initialized, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_initialized() const -> bool`  \n"
		"\n"
		""},
	 { (char *)"delete_TilingBase", _wrap_delete_TilingBase, METH_VARARGS, (char *)"\n"
		"\n"
		"`~TilingBase()`  \n"
		"\n"
		"virtual destructor  \n"
		"\n"
		""},
	 { (char *)"TilingBase_swigregister", TilingBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RectangularGrid", _wrap_new_RectangularGrid, METH_VARARGS, (char *)"\n"
		"\n"
		"`RectangularGrid()`  \n"
		"\n"
		"dummy ctor (will give an unusable grid)  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_n_tiles", _wrap_RectangularGrid_n_tiles, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_tiles() const -> int`  \n"
		"\n"
		"returns the total number of tiles in the tiling; valid tile indices run from 0\n"
		"...  \n"
		"\n"
		"n_tiles()-1;  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_n_good_tiles", _wrap_RectangularGrid_n_good_tiles, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_good_tiles() const -> int`  \n"
		"\n"
		"returns the number of tiles that are \"good\"; i.e.  \n"
		"\n"
		"there is scope for having tiles that, for whatever reason, should be ignored;\n"
		"there are situations in which having \"non-good\" tiles may be the simplest\n"
		"mechanism to obtain a tiling with holes in it  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_tile_index", _wrap_RectangularGrid_tile_index, METH_VARARGS, (char *)"\n"
		"\n"
		"`tile_index(const PseudoJet &p) const -> int`  \n"
		"\n"
		"returns the index of the tile in which p is located, or -1 if p is outside the\n"
		"tiling region  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_tile_is_good", _wrap_RectangularGrid_tile_is_good, METH_VARARGS, (char *)"\n"
		"\n"
		"`tile_is_good(int itile) const -> bool`  \n"
		"\n"
		"returns whether a given tile is good  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_tile_area", _wrap_RectangularGrid_tile_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`tile_area(int) const -> double`  \n"
		"\n"
		"returns the area of tile itile.  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_mean_tile_area", _wrap_RectangularGrid_mean_tile_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`mean_tile_area() const -> double`  \n"
		"\n"
		"returns the mean area of tiles.  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_description", _wrap_RectangularGrid_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a textual description of the grid  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_rapmin", _wrap_RectangularGrid_rapmin, METH_VARARGS, (char *)"\n"
		"\n"
		"`rapmin() const -> double`  \n"
		"\n"
		"returns the minimum rapidity extent of the grid  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_rapmax", _wrap_RectangularGrid_rapmax, METH_VARARGS, (char *)"\n"
		"\n"
		"`rapmax() const -> double`  \n"
		"\n"
		"returns the maxmium rapidity extent of the grid  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_drap", _wrap_RectangularGrid_drap, METH_VARARGS, (char *)"\n"
		"\n"
		"`drap() const -> double`  \n"
		"\n"
		"returns the spacing of the grid in rapidity  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_dphi", _wrap_RectangularGrid_dphi, METH_VARARGS, (char *)"\n"
		"\n"
		"`dphi() const -> double`  \n"
		"\n"
		"returns the spacing of the grid in azimuth  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid_is_initialised", _wrap_RectangularGrid_is_initialised, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_initialised() const -> bool`  \n"
		"\n"
		"returns true if the grid is in a suitably initialised state  \n"
		"\n"
		""},
	 { (char *)"RectangularGrid___str__", _wrap_RectangularGrid___str__, METH_VARARGS, NULL},
	 { (char *)"delete_RectangularGrid", _wrap_delete_RectangularGrid, METH_VARARGS, NULL},
	 { (char *)"RectangularGrid_swigregister", RectangularGrid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new__NoInfo", _wrap_new__NoInfo, METH_VARARGS, NULL},
	 { (char *)"delete__NoInfo", _wrap_delete__NoInfo, METH_VARARGS, NULL},
	 { (char *)"_NoInfo_swigregister", _NoInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GhostedAreaSpec", _wrap_new_GhostedAreaSpec, METH_VARARGS, (char *)"\n"
		"\n"
		"`GhostedAreaSpec(const Selector &selector, int repeat_in=gas::def_repeat, double\n"
		"    ghost_area_in=gas::def_ghost_area, double\n"
		"    grid_scatter_in=gas::def_grid_scatter, double\n"
		"    pt_scatter_in=gas::def_pt_scatter, double\n"
		"    mean_ghost_pt_in=gas::def_mean_ghost_pt)`  \n"
		"\n"
		"constructor based on a Selector  \n"
		"\n"
		"explicit constructor  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec__initialize", _wrap_GhostedAreaSpec__initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"`_initialize()`  \n"
		"\n"
		"does the initialization of actual ghost parameters  \n"
		"\n"
		"sets the detailed parameters for the ghosts (which may not be quite the same as\n"
		"those requested -- this is in order for things to fit in nicely into 2pi etc...  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_ghost_rapmax", _wrap_GhostedAreaSpec_ghost_rapmax, METH_VARARGS, (char *)"\n"
		"\n"
		"`ghost_rapmax() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_ghost_maxrap", _wrap_GhostedAreaSpec_ghost_maxrap, METH_VARARGS, (char *)"\n"
		"\n"
		"`ghost_maxrap() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_ghost_etamax", _wrap_GhostedAreaSpec_ghost_etamax, METH_VARARGS, (char *)"\n"
		"\n"
		"`ghost_etamax() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_ghost_maxeta", _wrap_GhostedAreaSpec_ghost_maxeta, METH_VARARGS, (char *)"\n"
		"\n"
		"`ghost_maxeta() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_ghost_area", _wrap_GhostedAreaSpec_ghost_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`ghost_area() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_grid_scatter", _wrap_GhostedAreaSpec_grid_scatter, METH_VARARGS, (char *)"\n"
		"\n"
		"`grid_scatter() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_pt_scatter", _wrap_GhostedAreaSpec_pt_scatter, METH_VARARGS, (char *)"\n"
		"\n"
		"`pt_scatter() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_mean_ghost_pt", _wrap_GhostedAreaSpec_mean_ghost_pt, METH_VARARGS, (char *)"\n"
		"\n"
		"`mean_ghost_pt() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_repeat", _wrap_GhostedAreaSpec_repeat, METH_VARARGS, (char *)"\n"
		"\n"
		"`repeat() const -> int`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_fj2_placement", _wrap_GhostedAreaSpec_fj2_placement, METH_VARARGS, (char *)"\n"
		"\n"
		"`fj2_placement() const -> bool`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_kt_scatter", _wrap_GhostedAreaSpec_kt_scatter, METH_VARARGS, (char *)"\n"
		"\n"
		"`kt_scatter() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_mean_ghost_kt", _wrap_GhostedAreaSpec_mean_ghost_kt, METH_VARARGS, (char *)"\n"
		"\n"
		"`mean_ghost_kt() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_actual_ghost_area", _wrap_GhostedAreaSpec_actual_ghost_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`actual_ghost_area() const -> double`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_n_ghosts", _wrap_GhostedAreaSpec_n_ghosts, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_ghosts() const -> int`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_ghost_area", _wrap_GhostedAreaSpec_set_ghost_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_ghost_area(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_ghost_rapmax", _wrap_GhostedAreaSpec_set_ghost_rapmax, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_ghost_rapmax(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_ghost_maxrap", _wrap_GhostedAreaSpec_set_ghost_maxrap, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_ghost_maxrap(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_ghost_etamax", _wrap_GhostedAreaSpec_set_ghost_etamax, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_ghost_etamax(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_ghost_maxeta", _wrap_GhostedAreaSpec_set_ghost_maxeta, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_ghost_maxeta(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_grid_scatter", _wrap_GhostedAreaSpec_set_grid_scatter, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_grid_scatter(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_pt_scatter", _wrap_GhostedAreaSpec_set_pt_scatter, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_pt_scatter(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_mean_ghost_pt", _wrap_GhostedAreaSpec_set_mean_ghost_pt, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_mean_ghost_pt(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_repeat", _wrap_GhostedAreaSpec_set_repeat, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_repeat(int val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_kt_scatter", _wrap_GhostedAreaSpec_set_kt_scatter, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_kt_scatter(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_mean_ghost_kt", _wrap_GhostedAreaSpec_set_mean_ghost_kt, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_mean_ghost_kt(double val)`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_fj2_placement", _wrap_GhostedAreaSpec_set_fj2_placement, METH_VARARGS, NULL},
	 { (char *)"GhostedAreaSpec_nphi", _wrap_GhostedAreaSpec_nphi, METH_VARARGS, (char *)"\n"
		"\n"
		"`nphi() const -> int`  \n"
		"\n"
		"return nphi (ghosts layed out (-nrap, 0..nphi-1), (-nrap+1,0..nphi-1), ...  \n"
		"\n"
		"(nrap,0..nphi-1)  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_nrap", _wrap_GhostedAreaSpec_nrap, METH_VARARGS, (char *)"\n"
		"\n"
		"`nrap() const -> int`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_get_random_status", _wrap_GhostedAreaSpec_get_random_status, METH_VARARGS, (char *)"\n"
		"\n"
		"`get_random_status(std::vector< int > &__iseed) const`  \n"
		"\n"
		"get all relevant information about the status of the random number generator, so\n"
		"that it can be reset subsequently with set_random_status.  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_set_random_status", _wrap_GhostedAreaSpec_set_random_status, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_random_status(const std::vector< int > &__iseed)`  \n"
		"\n"
		"set the status of the random number generator, as obtained previously with\n"
		"get_random_status.  \n"
		"\n"
		"Note that the random generator is a static member of the class, i.e. common to\n"
		"all instances of the class --- so if you modify the random for this instance,\n"
		"you modify it for all instances.  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_checkpoint_random", _wrap_GhostedAreaSpec_checkpoint_random, METH_VARARGS, (char *)"\n"
		"\n"
		"`checkpoint_random()`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_restore_checkpoint_random", _wrap_GhostedAreaSpec_restore_checkpoint_random, METH_VARARGS, (char *)"\n"
		"\n"
		"`restore_checkpoint_random()`  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_description", _wrap_GhostedAreaSpec_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"for a summary  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_add_ghosts", _wrap_GhostedAreaSpec_add_ghosts, METH_VARARGS, (char *)"\n"
		"\n"
		"`add_ghosts(std::vector< PseudoJet > &) const`  \n"
		"\n"
		"push a set of ghost 4-momenta onto the back of the vector of PseudoJets  \n"
		"\n"
		"adds the ghost 4-momenta to the vector of PseudoJet's  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_random_at_own_risk", _wrap_GhostedAreaSpec_random_at_own_risk, METH_VARARGS, (char *)"\n"
		"\n"
		"`random_at_own_risk() const -> double`  \n"
		"\n"
		"very deprecated public access to a random number from the internal generator  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec_generator_at_own_risk", _wrap_GhostedAreaSpec_generator_at_own_risk, METH_VARARGS, (char *)"\n"
		"\n"
		"`generator_at_own_risk() const -> BasicRandom< double > &`  \n"
		"\n"
		"very deprecated public access to the generator itself  \n"
		"\n"
		""},
	 { (char *)"GhostedAreaSpec___str__", _wrap_GhostedAreaSpec___str__, METH_VARARGS, NULL},
	 { (char *)"delete_GhostedAreaSpec", _wrap_delete_GhostedAreaSpec, METH_VARARGS, NULL},
	 { (char *)"GhostedAreaSpec_swigregister", GhostedAreaSpec_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VoronoiAreaSpec", _wrap_new_VoronoiAreaSpec, METH_VARARGS, (char *)"\n"
		"\n"
		"`VoronoiAreaSpec(double effective_Rfact_in)`  \n"
		"\n"
		"constructor that allows you to set effective_Rfact.  \n"
		"\n"
		""},
	 { (char *)"VoronoiAreaSpec_effective_Rfact", _wrap_VoronoiAreaSpec_effective_Rfact, METH_VARARGS, (char *)"\n"
		"\n"
		"`effective_Rfact() const -> double`  \n"
		"\n"
		"return the value of effective_Rfact  \n"
		"\n"
		""},
	 { (char *)"VoronoiAreaSpec_description", _wrap_VoronoiAreaSpec_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"return a textual description of the area definition.  \n"
		"\n"
		""},
	 { (char *)"delete_VoronoiAreaSpec", _wrap_delete_VoronoiAreaSpec, METH_VARARGS, NULL},
	 { (char *)"VoronoiAreaSpec_swigregister", VoronoiAreaSpec_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AreaDefinition", _wrap_new_AreaDefinition, METH_VARARGS, (char *)"\n"
		"\n"
		"`AreaDefinition(const VoronoiAreaSpec &spec)`  \n"
		"\n"
		"constructor for an area definition based on a voronoi area specification  \n"
		"\n"
		""},
	 { (char *)"AreaDefinition_description", _wrap_AreaDefinition_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"return a description of the current area definition  \n"
		"\n"
		"return info about the type of area being used by this defn  \n"
		"\n"
		""},
	 { (char *)"AreaDefinition_area_type", _wrap_AreaDefinition_area_type, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_type() const -> AreaType`  \n"
		"\n"
		"return info about the type of area being used by this defn  \n"
		"\n"
		""},
	 { (char *)"AreaDefinition_ghost_spec", _wrap_AreaDefinition_ghost_spec, METH_VARARGS, (char *)"\n"
		"\n"
		"`ghost_spec() -> GhostedAreaSpec &`  \n"
		"\n"
		""},
	 { (char *)"AreaDefinition_voronoi_spec", _wrap_AreaDefinition_voronoi_spec, METH_VARARGS, (char *)"\n"
		"\n"
		"`voronoi_spec() const -> const VoronoiAreaSpec &`  \n"
		"\n"
		"return a reference to the voronoi area spec  \n"
		"\n"
		""},
	 { (char *)"AreaDefinition___str__", _wrap_AreaDefinition___str__, METH_VARARGS, NULL},
	 { (char *)"delete_AreaDefinition", _wrap_delete_AreaDefinition, METH_VARARGS, NULL},
	 { (char *)"AreaDefinition_swigregister", AreaDefinition_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClusterSequenceAreaBase", _wrap_new_ClusterSequenceAreaBase, METH_VARARGS, (char *)"\n"
		"\n"
		"`ClusterSequenceAreaBase()`  \n"
		"\n"
		"default constructor  \n"
		"\n"
		""},
	 { (char *)"delete_ClusterSequenceAreaBase", _wrap_delete_ClusterSequenceAreaBase, METH_VARARGS, (char *)"\n"
		"\n"
		"`~ClusterSequenceAreaBase()`  \n"
		"\n"
		"destructor  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_area", _wrap_ClusterSequenceAreaBase_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area(const PseudoJet &) const -> double`  \n"
		"\n"
		"return the area associated with the given jet; this base class returns 0.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_area_error", _wrap_ClusterSequenceAreaBase_area_error, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_error(const PseudoJet &) const -> double`  \n"
		"\n"
		"return the error (uncertainty) associated with the determination of the area of\n"
		"this jet; this base class returns 0.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_area_4vector", _wrap_ClusterSequenceAreaBase_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_4vector(const PseudoJet &) const -> PseudoJet`  \n"
		"\n"
		"return a PseudoJet whose 4-vector is defined by the following integral  \n"
		"\n"
		"drap d PseudoJet(\"rap,phi,pt=one\") *  \n"
		"\n"
		"*   Theta(\"rap,phi inside jet boundary\")  \n"
		"\n"
		"where PseudoJet(\"rap,phi,pt=one\") is a 4-vector with the given rapidity (rap),\n"
		"azimuth (phi) and pt=1, while Theta(\"rap,phi\n"
		"inside jet boundary\") is a function that is 1 when rap,phi define a direction\n"
		"inside the jet boundary and 0 otherwise.  \n"
		"\n"
		"This base class returns a null 4-vector.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_is_pure_ghost", _wrap_ClusterSequenceAreaBase_is_pure_ghost, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_pure_ghost(const PseudoJet &) const -> bool`  \n"
		"\n"
		"true if a jet is made exclusively of ghosts  \n"
		"\n"
		"NB: most area classes do not give any explicit ghost jets, but some do, and they\n"
		"should replace this function with their own version.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_has_explicit_ghosts", _wrap_ClusterSequenceAreaBase_has_explicit_ghosts, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_explicit_ghosts() const -> bool`  \n"
		"\n"
		"returns true if ghosts are explicitly included within jets for this\n"
		"ClusterSequence;  \n"
		"\n"
		"Derived classes that do include explicit ghosts should provide an alternative\n"
		"version of this routine and set it properly.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_empty_area", _wrap_ClusterSequenceAreaBase_empty_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`empty_area(const Selector &selector) const -> double`  \n"
		"\n"
		"return the total area, corresponding to the given Selector, that is free of\n"
		"jets, in general based on the inclusive jets.  \n"
		"\n"
		"return the total area, within the selector's range, that is free of jets.  \n"
		"\n"
		"The selector passed as an argument has to have a finite area and apply jet-by-\n"
		"jet (see the BackgroundEstimator and Subtractor tools for more generic usages)  \n"
		"\n"
		"Calculate this as (range area) - {i in range} A_i  \n"
		"\n"
		"for ClusterSequences with explicit ghosts, assume that there will never be any\n"
		"empty area, i.e. it is always filled in by pure ghosts jets. This holds for\n"
		"seq.rec. algorithms  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_empty_area_from_jets", _wrap_ClusterSequenceAreaBase_empty_area_from_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`empty_area_from_jets(const std::vector< PseudoJet > &all_jets, const Selector\n"
		"    &selector) const -> double`  \n"
		"\n"
		"return the total area, corresponding to the given Selector, that is free of\n"
		"jets, based on the supplied all_jets  \n"
		"\n"
		"return the total area, within range, that is free of jets.  \n"
		"\n"
		"The selector passed as an argument has to have a finite area and apply jet-by-\n"
		"jet (see the BackgroundEstimator and Subtractor tools for more generic usages)  \n"
		"\n"
		"Calculate this as (range area) - {i in range} A_i  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_n_empty_jets", _wrap_ClusterSequenceAreaBase_n_empty_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_empty_jets(const Selector &selector) const -> double`  \n"
		"\n"
		"return something similar to the number of pure ghost jets in the given\n"
		"selector's range in an active area case.  \n"
		"\n"
		"For the local implementation we return empty_area/(0.55 pi R^2), based on\n"
		"measured properties of ghost jets with kt and cam (cf arXiv:0802.1188).  \n"
		"\n"
		"Note that the number returned is a double.  \n"
		"\n"
		"The selector passed as an argument has to have a finite area and apply jet-by-\n"
		"jet (see the BackgroundEstimator and Subtractor tools for more generic usages)  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_median_pt_per_unit_area", _wrap_ClusterSequenceAreaBase_median_pt_per_unit_area, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceAreaBase_median_pt_per_unit_area_4vector", _wrap_ClusterSequenceAreaBase_median_pt_per_unit_area_4vector, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceAreaBase_median_pt_per_unit_something", _wrap_ClusterSequenceAreaBase_median_pt_per_unit_something, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceAreaBase_get_median_rho_and_sigma", _wrap_ClusterSequenceAreaBase_get_median_rho_and_sigma, METH_VARARGS, (char *)"\n"
		"\n"
		"`get_median_rho_and_sigma(const Selector &selector, bool use_area_4vector,\n"
		"    double &median, double &sigma) const`  \n"
		"\n"
		"same as the full version of get_median_rho_and_error, but without access to the\n"
		"mean_area  \n"
		"\n"
		"The selector passed as an argument has to have a finite area and apply jet-by-\n"
		"jet (see the BackgroundEstimator and Subtractor tools for more generic usages)  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_parabolic_pt_per_unit_area", _wrap_ClusterSequenceAreaBase_parabolic_pt_per_unit_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`parabolic_pt_per_unit_area(double &a, double &b, const Selector &selector,\n"
		"    double exclude_above=-1.0, bool use_area_4vector=false) const`  \n"
		"\n"
		"fits a form pt_per_unit_area(y) = a + b*y^2 in the selector range.  \n"
		"\n"
		"fits a form pt_per_unit_area(y) = a + b*y^2 for jets in range.  \n"
		"\n"
		"exclude_above allows one to exclude large values of pt/area from fit. (if\n"
		"negative, the cut is discarded) use_area_4vector = true uses the 4vector areas.  \n"
		"\n"
		"The selector passed as an argument has to have a finite area and apply jet-by-\n"
		"jet (see the BackgroundEstimator and Subtractor tools for more generic usages)  \n"
		"\n"
		"exclude_above allows one to exclude large values of pt/area from fit.\n"
		"use_area_4vector = true uses the 4vector areas.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceAreaBase_subtracted_jets", _wrap_ClusterSequenceAreaBase_subtracted_jets, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceAreaBase_subtracted_jet", _wrap_ClusterSequenceAreaBase_subtracted_jet, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceAreaBase_subtracted_pt", _wrap_ClusterSequenceAreaBase_subtracted_pt, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceAreaBase_swigregister", ClusterSequenceAreaBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_n_hard_particles", _wrap_ClusterSequenceActiveAreaExplicitGhosts_n_hard_particles, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_hard_particles() const -> unsigned int`  \n"
		"\n"
		"returns the number of hard particles (i.e. those supplied by the user).  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_area", _wrap_ClusterSequenceActiveAreaExplicitGhosts_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"returns the area of a jet  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_area_4vector", _wrap_ClusterSequenceActiveAreaExplicitGhosts_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_4vector(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"returns a four vector corresponding to the sum (E-scheme) of the ghost four-\n"
		"vectors composing the jet area, normalised such that for a small contiguous area\n"
		"the p_t of the extended_area jet is equal to area of the jet.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost", _wrap_ClusterSequenceActiveAreaExplicitGhosts_is_pure_ghost, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_pure_ghost(int history_index) const -> bool`  \n"
		"\n"
		"true if the entry in the history index corresponds to a ghost; if hist_ix does\n"
		"not correspond to an actual particle (i.e.  \n"
		"\n"
		"hist_ix < 0), then the result is false.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_has_explicit_ghosts", _wrap_ClusterSequenceActiveAreaExplicitGhosts_has_explicit_ghosts, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_explicit_ghosts() const -> bool`  \n"
		"\n"
		"this class does have explicit ghosts  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_empty_area", _wrap_ClusterSequenceActiveAreaExplicitGhosts_empty_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`empty_area(const Selector &selector) const -> double`  \n"
		"\n"
		"return the total area, corresponding to a given Selector, that consists of\n"
		"unclustered ghosts  \n"
		"\n"
		"The selector needs to apply jet by jet  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_total_area", _wrap_ClusterSequenceActiveAreaExplicitGhosts_total_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`total_area() const -> double`  \n"
		"\n"
		"returns the total area under study  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_max_ghost_perp2", _wrap_ClusterSequenceActiveAreaExplicitGhosts_max_ghost_perp2, METH_VARARGS, (char *)"\n"
		"\n"
		"`max_ghost_perp2() const -> double`  \n"
		"\n"
		"returns the largest squared transverse momentum among all ghosts  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_has_dangerous_particles", _wrap_ClusterSequenceActiveAreaExplicitGhosts_has_dangerous_particles, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_dangerous_particles() const -> bool`  \n"
		"\n"
		"returns true if there are any particles whose transverse momentum if so low that\n"
		"there's a risk of the ghosts having modified the clustering sequence  \n"
		"\n"
		""},
	 { (char *)"new_ClusterSequenceActiveAreaExplicitGhosts", _wrap_new_ClusterSequenceActiveAreaExplicitGhosts, METH_VARARGS, (char *)"\n"
		"\n"
		"`ClusterSequenceActiveAreaExplicitGhosts(const std::vector< L > &pseudojets,\n"
		"    const JetDefinition &jet_def_in, const std::vector< L > &ghosts, double\n"
		"    ghost_area, const bool &writeout_combinations=false)`  \n"
		"\n"
		""},
	 { (char *)"delete_ClusterSequenceActiveAreaExplicitGhosts", _wrap_delete_ClusterSequenceActiveAreaExplicitGhosts, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceActiveAreaExplicitGhosts_swigregister", ClusterSequenceActiveAreaExplicitGhosts_swigregister, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceActiveArea_area", _wrap_ClusterSequenceActiveArea_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"return the area associated with the given jet; this base class returns 0.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveArea_area_error", _wrap_ClusterSequenceActiveArea_area_error, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_error(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"return the error (uncertainty) associated with the determination of the area of\n"
		"this jet; this base class returns 0.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveArea_area_4vector", _wrap_ClusterSequenceActiveArea_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_4vector(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"return a PseudoJet whose 4-vector is defined by the following integral  \n"
		"\n"
		"drap d PseudoJet(\"rap,phi,pt=one\") *  \n"
		"\n"
		"*   Theta(\"rap,phi inside jet boundary\")  \n"
		"\n"
		"where PseudoJet(\"rap,phi,pt=one\") is a 4-vector with the given rapidity (rap),\n"
		"azimuth (phi) and pt=1, while Theta(\"rap,phi\n"
		"inside jet boundary\") is a function that is 1 when rap,phi define a direction\n"
		"inside the jet boundary and 0 otherwise.  \n"
		"\n"
		"This base class returns a null 4-vector.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveArea_pt_per_unit_area", _wrap_ClusterSequenceActiveArea_pt_per_unit_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`pt_per_unit_area(mean_pt_strategies strat=median, double range=2.0) const ->\n"
		"    double`  \n"
		"\n"
		"return the transverse momentum per unit area according to one of the above\n"
		"strategies; for some strategies (those with \"cut\" in their name) the parameter\n"
		"\"range\" allows one to exclude a subset of the jets for the background\n"
		"estimation, those that have pt/area > median(pt/area)*range.  \n"
		"\n"
		"NB: This call is OBSOLETE and deprecated; use a JetMedianBackgroundEstimator or\n"
		"GridMedianBackgroundEstimator instead.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveArea_empty_area", _wrap_ClusterSequenceActiveArea_empty_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`empty_area(const Selector &selector) const -> double`  \n"
		"\n"
		"rewrite the empty area from the parent class, so as to use all info at our\n"
		"disposal return the total area, corresponding to a given Selector, that consists\n"
		"of ghost jets or unclustered ghosts  \n"
		"\n"
		"The selector passed as an argument needs to apply jet by jet.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceActiveArea_n_empty_jets", _wrap_ClusterSequenceActiveArea_n_empty_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_empty_jets(const Selector &selector) const -> double`  \n"
		"\n"
		"return the true number of empty jets (replaces\n"
		"ClusterSequenceAreaBase::n_empty_jets(...))  \n"
		"\n"
		""},
	 { (char *)"new_ClusterSequenceActiveArea", _wrap_new_ClusterSequenceActiveArea, METH_VARARGS, (char *)"\n"
		"\n"
		"`ClusterSequenceActiveArea(const std::vector< L > &pseudojets, const\n"
		"    JetDefinition &jet_def_in, const GhostedAreaSpec &ghost_spec, const bool\n"
		"    &writeout_combinations=false)`  \n"
		"\n"
		"constructor based on JetDefinition and GhostedAreaSpec  \n"
		"\n"
		""},
	 { (char *)"delete_ClusterSequenceActiveArea", _wrap_delete_ClusterSequenceActiveArea, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceActiveArea_swigregister", ClusterSequenceActiveArea_swigregister, METH_VARARGS, NULL},
	 { (char *)"ClusterSequence1GhostPassiveArea_n_empty_jets", _wrap_ClusterSequence1GhostPassiveArea_n_empty_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_empty_jets(const Selector &selector) const -> double`  \n"
		"\n"
		"return an estimate for the number of empty jets -- one uses the AreaBase one\n"
		"rather than the ActiveArea one (which for which we do not have the information).  \n"
		"\n"
		""},
	 { (char *)"new_ClusterSequence1GhostPassiveArea", _wrap_new_ClusterSequence1GhostPassiveArea, METH_VARARGS, (char *)"\n"
		"\n"
		"`ClusterSequence1GhostPassiveArea(const std::vector< L > &pseudojets, const\n"
		"    JetDefinition &jet_def_in, const GhostedAreaSpec &area_spec, const bool\n"
		"    &writeout_combinations=false)`  \n"
		"\n"
		"constructor based on JetDefinition and 1GhostPassiveAreaSpec  \n"
		"\n"
		""},
	 { (char *)"delete_ClusterSequence1GhostPassiveArea", _wrap_delete_ClusterSequence1GhostPassiveArea, METH_VARARGS, NULL},
	 { (char *)"ClusterSequence1GhostPassiveArea_swigregister", ClusterSequence1GhostPassiveArea_swigregister, METH_VARARGS, NULL},
	 { (char *)"ClusterSequencePassiveArea_empty_area", _wrap_ClusterSequencePassiveArea_empty_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`empty_area(const Selector &selector) const -> double`  \n"
		"\n"
		"return an empty area that's appropriate to the passive area determination\n"
		"carried out  \n"
		"\n"
		""},
	 { (char *)"new_ClusterSequencePassiveArea", _wrap_new_ClusterSequencePassiveArea, METH_VARARGS, (char *)"\n"
		"\n"
		"`ClusterSequencePassiveArea(const std::vector< L > &pseudojets, const\n"
		"    JetDefinition &jet_def_in, const GhostedAreaSpec &area_spec, const bool\n"
		"    &writeout_combinations=false)`  \n"
		"\n"
		"constructor based on JetDefinition and PassiveAreaSpec  \n"
		"\n"
		""},
	 { (char *)"delete_ClusterSequencePassiveArea", _wrap_delete_ClusterSequencePassiveArea, METH_VARARGS, NULL},
	 { (char *)"ClusterSequencePassiveArea_swigregister", ClusterSequencePassiveArea_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ClusterSequenceVoronoiArea", _wrap_delete_ClusterSequenceVoronoiArea, METH_VARARGS, (char *)"\n"
		"\n"
		"`~ClusterSequenceVoronoiArea()`  \n"
		"\n"
		"default dtor  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceVoronoiArea_area", _wrap_ClusterSequenceVoronoiArea_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"return the area associated with the given jet  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceVoronoiArea_area_4vector", _wrap_ClusterSequenceVoronoiArea_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_4vector(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"return a 4-vector area associated with the given jet -- strictly this is not the\n"
		"exact 4-vector area, but rather an approximation made of sums of centres of all\n"
		"Voronoi cells in jet, each contributing with a normalisation equal to the area\n"
		"of the cell  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceVoronoiArea_area_error", _wrap_ClusterSequenceVoronoiArea_area_error, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_error(const PseudoJet &) const -> double`  \n"
		"\n"
		"return the error of the area associated with the given jet (0 by definition for\n"
		"a voronoi area)  \n"
		"\n"
		""},
	 { (char *)"new_ClusterSequenceVoronoiArea", _wrap_new_ClusterSequenceVoronoiArea, METH_VARARGS, (char *)"\n"
		"\n"
		"`ClusterSequenceVoronoiArea(const std::vector< L > &pseudojets, const\n"
		"    JetDefinition &jet_def, const VoronoiAreaSpec &spec=VoronoiAreaSpec(), const\n"
		"    bool &writeout_combinations=false)`  \n"
		"\n"
		"template ctor  \n"
		"\n"
		"template constructor need to be specified in the header!  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `pseudojet` :  \n"
		"    list of jets (template type)  \n"
		"* `jet_def` :  \n"
		"    jet definition  \n"
		"* `effective_Rfact` :  \n"
		"    effective radius  \n"
		"* `writeout_combinations` :  \n"
		"    ??????  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceVoronoiArea_swigregister", ClusterSequenceVoronoiArea_swigregister, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceArea_area_def", _wrap_ClusterSequenceArea_area_def, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_def() const -> const AreaDefinition &`  \n"
		"\n"
		"return a reference to the area definition  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceArea_area", _wrap_ClusterSequenceArea_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`area(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"return the area associated with the given jet  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceArea_area_error", _wrap_ClusterSequenceArea_area_error, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_error(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"return the error (uncertainty) associated with the determination of the area of\n"
		"this jet  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceArea_area_4vector", _wrap_ClusterSequenceArea_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`area_4vector(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"return the 4-vector area  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceArea_empty_area", _wrap_ClusterSequenceArea_empty_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`empty_area(const Selector &selector) const -> double`  \n"
		"\n"
		"return the total area, corresponding to the given selector, that is free of jets  \n"
		"\n"
		"The selector needs to have a finite area and be applicable jet by jet (see the\n"
		"BackgroundEstimator and Subtractor tools for more advanced usage)  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceArea_n_empty_jets", _wrap_ClusterSequenceArea_n_empty_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_empty_jets(const Selector &selector) const -> double`  \n"
		"\n"
		"return something similar to the number of pure ghost jets in the given rap-phi\n"
		"range in an active area case.  \n"
		"\n"
		"For the local implementation we return empty_area/(0.55 pi R^2), based on\n"
		"measured properties of ghost jets with kt and cam. Note that the number returned\n"
		"is a double.  \n"
		"\n"
		"The selector needs to have a finite area and be applicable jet by jet (see the\n"
		"BackgroundEstimator and Subtractor tools for more advanced usage)  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceArea_is_pure_ghost", _wrap_ClusterSequenceArea_is_pure_ghost, METH_VARARGS, (char *)"\n"
		"\n"
		"`is_pure_ghost(const PseudoJet &jet) const -> bool`  \n"
		"\n"
		"true if a jet is made exclusively of ghosts  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceArea_has_explicit_ghosts", _wrap_ClusterSequenceArea_has_explicit_ghosts, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_explicit_ghosts() const -> bool`  \n"
		"\n"
		"true if this ClusterSequence has explicit ghosts  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceArea_get_median_rho_and_sigma", _wrap_ClusterSequenceArea_get_median_rho_and_sigma, METH_VARARGS, (char *)"\n"
		"\n"
		"`get_median_rho_and_sigma(const Selector &selector, bool use_area_4vector,\n"
		"    double &median, double &sigma, double &mean_area) const`  \n"
		"\n"
		"overload version of what's in the ClusterSequenceAreaBase class, which actually\n"
		"just does the same thing as the base version (but since we've overridden the\n"
		"multi-argument version above, we have to override the 5-argument version too.  \n"
		"\n"
		""},
	 { (char *)"ClusterSequenceArea_parabolic_pt_per_unit_area", _wrap_ClusterSequenceArea_parabolic_pt_per_unit_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`parabolic_pt_per_unit_area(double &a, double &b, const Selector &selector,\n"
		"    double exclude_above=-1.0, bool use_area_4vector=false) const`  \n"
		"\n"
		"overload version of what's in the ClusterSequenceAreaBase class, which\n"
		"additionally checks compatibility between \"range\" and region in which ghosts\n"
		"are thrown.  \n"
		"\n"
		""},
	 { (char *)"new_ClusterSequenceArea", _wrap_new_ClusterSequenceArea, METH_VARARGS, (char *)"\n"
		"\n"
		"`ClusterSequenceArea(const std::vector< L > &pseudojets, const JetDefinition\n"
		"    &jet_def_in, const VoronoiAreaSpec &voronoi_spec)`  \n"
		"\n"
		"constructor with a VoronoiAreaSpec  \n"
		"\n"
		""},
	 { (char *)"delete_ClusterSequenceArea", _wrap_delete_ClusterSequenceArea, METH_VARARGS, NULL},
	 { (char *)"ClusterSequenceArea_swigregister", ClusterSequenceArea_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UserInfoPython", _wrap_new_UserInfoPython, METH_VARARGS, NULL},
	 { (char *)"UserInfoPython_get_pyobj", _wrap_UserInfoPython_get_pyobj, METH_VARARGS, NULL},
	 { (char *)"delete_UserInfoPython", _wrap_delete_UserInfoPython, METH_VARARGS, NULL},
	 { (char *)"UserInfoPython_swigregister", UserInfoPython_swigregister, METH_VARARGS, NULL},
	 { (char *)"cpp_string_from_py_str", _wrap_cpp_string_from_py_str, METH_VARARGS, NULL},
	 { (char *)"cpp_string_from_str_py_obj", _wrap_cpp_string_from_str_py_obj, METH_VARARGS, NULL},
	 { (char *)"cpp_string_from_name_py_obj", _wrap_cpp_string_from_name_py_obj, METH_VARARGS, NULL},
	 { (char *)"new_SelectorWorkerPython", _wrap_new_SelectorWorkerPython, METH_VARARGS, NULL},
	 { (char *)"delete_SelectorWorkerPython", _wrap_delete_SelectorWorkerPython, METH_VARARGS, NULL},
	 { (char *)"SelectorWorkerPython_description", _wrap_SelectorWorkerPython_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a description of the worker  \n"
		"\n"
		""},
	 { (char *)"SelectorWorkerPython__pass", _wrap_SelectorWorkerPython__pass, METH_VARARGS, (char *)"\n"
		"\n"
		"`pass(const PseudoJet &jet) const =0 -> bool`  \n"
		"\n"
		"returns true if a given object passes the selection criterion, and is the main\n"
		"function that needs to be overloaded by derived workers.  \n"
		"\n"
		"NB: this function is used only if applies_jet_by_jet() returns true. If it does\n"
		"not, then derived classes are expected to (re)implement the terminator\n"
		"function()  \n"
		"\n"
		""},
	 { (char *)"SelectorWorkerPython_swigregister", SelectorWorkerPython_swigregister, METH_VARARGS, NULL},
	 { (char *)"SelectorPython", _wrap_SelectorPython, METH_VARARGS, NULL},
	 { (char *)"new_RecombinerPython", _wrap_new_RecombinerPython, METH_VARARGS, NULL},
	 { (char *)"delete_RecombinerPython", _wrap_delete_RecombinerPython, METH_VARARGS, NULL},
	 { (char *)"RecombinerPython_description", _wrap_RecombinerPython_description, METH_VARARGS, NULL},
	 { (char *)"RecombinerPython_recombine", _wrap_RecombinerPython_recombine, METH_VARARGS, NULL},
	 { (char *)"RecombinerPython_preprocess", _wrap_RecombinerPython_preprocess, METH_VARARGS, NULL},
	 { (char *)"RecombinerPython_swigregister", RecombinerPython_swigregister, METH_VARARGS, NULL},
	 { (char *)"JetDefinition0Param", _wrap_JetDefinition0Param, METH_VARARGS, NULL},
	 { (char *)"JetDefinition1Param", _wrap_JetDefinition1Param, METH_VARARGS, NULL},
	 { (char *)"JetDefinition2Param", _wrap_JetDefinition2Param, METH_VARARGS, NULL},
	 { (char *)"delete_FunctionOfPseudoJetDouble", _wrap_delete_FunctionOfPseudoJetDouble, METH_VARARGS, (char *)"\n"
		"\n"
		"`~FunctionOfPseudoJet()`  \n"
		"\n"
		"default dtor (virtual to allow safe polymorphism)  \n"
		"\n"
		""},
	 { (char *)"FunctionOfPseudoJetDouble_description", _wrap_FunctionOfPseudoJetDouble_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a description of the function (an empty string by default)  \n"
		"\n"
		""},
	 { (char *)"FunctionOfPseudoJetDouble_result", _wrap_FunctionOfPseudoJetDouble_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &pj) const =0 -> TOut`  \n"
		"\n"
		"the action of the function this *has* to be overloaded in derived classes  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `pj` :  \n"
		"    the PseudoJet input to the function  \n"
		"\n"
		""},
	 { (char *)"FunctionOfPseudoJetDouble___call__", _wrap_FunctionOfPseudoJetDouble___call__, METH_VARARGS, NULL},
	 { (char *)"FunctionOfPseudoJetDouble___str__", _wrap_FunctionOfPseudoJetDouble___str__, METH_VARARGS, NULL},
	 { (char *)"FunctionOfPseudoJetDouble_swigregister", FunctionOfPseudoJetDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_FunctionOfPseudoJetPseudoJet", _wrap_delete_FunctionOfPseudoJetPseudoJet, METH_VARARGS, (char *)"\n"
		"\n"
		"`~FunctionOfPseudoJet()`  \n"
		"\n"
		"default dtor (virtual to allow safe polymorphism)  \n"
		"\n"
		""},
	 { (char *)"FunctionOfPseudoJetPseudoJet_description", _wrap_FunctionOfPseudoJetPseudoJet_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a description of the function (an empty string by default)  \n"
		"\n"
		""},
	 { (char *)"FunctionOfPseudoJetPseudoJet_result", _wrap_FunctionOfPseudoJetPseudoJet_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &pj) const =0 -> TOut`  \n"
		"\n"
		"the action of the function this *has* to be overloaded in derived classes  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `pj` :  \n"
		"    the PseudoJet input to the function  \n"
		"\n"
		""},
	 { (char *)"FunctionOfPseudoJetPseudoJet___call__", _wrap_FunctionOfPseudoJetPseudoJet___call__, METH_VARARGS, NULL},
	 { (char *)"FunctionOfPseudoJetPseudoJet___str__", _wrap_FunctionOfPseudoJetPseudoJet___str__, METH_VARARGS, NULL},
	 { (char *)"FunctionOfPseudoJetPseudoJet_swigregister", FunctionOfPseudoJetPseudoJet_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Transformer", _wrap_delete_Transformer, METH_VARARGS, (char *)"\n"
		"\n"
		"`~Transformer()`  \n"
		"\n"
		"default dtor  \n"
		"\n"
		""},
	 { (char *)"Transformer_result", _wrap_Transformer_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &original) const =0 -> PseudoJet`  \n"
		"\n"
		"the result of the Transformer acting on the PseudoJet.  \n"
		"\n"
		"this *has* to be overloaded in derived classes  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `original` :  \n"
		"    the PseudoJet input to the Transformer  \n"
		"\n"
		""},
	 { (char *)"Transformer_description", _wrap_Transformer_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const =0 -> std::string`  \n"
		"\n"
		"This should be overloaded to return a description of the Transformer.  \n"
		"\n"
		""},
	 { (char *)"Transformer_swigregister", Transformer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Boost", _wrap_new_Boost, METH_VARARGS, (char *)"\n"
		"\n"
		"`Boost(const PseudoJet &jet_rest)`  \n"
		"\n"
		"default ctor  \n"
		"\n"
		""},
	 { (char *)"Boost_result", _wrap_Boost_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &original) const -> PseudoJet`  \n"
		"\n"
		"the action of the function: boost the PseudoJet by a boost vector _jet_rest  \n"
		"\n"
		""},
	 { (char *)"Boost___str__", _wrap_Boost___str__, METH_VARARGS, NULL},
	 { (char *)"delete_Boost", _wrap_delete_Boost, METH_VARARGS, NULL},
	 { (char *)"Boost_swigregister", Boost_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Unboost", _wrap_new_Unboost, METH_VARARGS, (char *)"\n"
		"\n"
		"`Unboost(const PseudoJet &jet_rest)`  \n"
		"\n"
		"default ctor  \n"
		"\n"
		""},
	 { (char *)"Unboost_result", _wrap_Unboost_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &original) const -> PseudoJet`  \n"
		"\n"
		"the action of the function: boost the PseudoJet to the rest frame of _jet_rest  \n"
		"\n"
		""},
	 { (char *)"Unboost___str__", _wrap_Unboost___str__, METH_VARARGS, NULL},
	 { (char *)"delete_Unboost", _wrap_delete_Unboost, METH_VARARGS, NULL},
	 { (char *)"Unboost_swigregister", Unboost_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Recluster", _wrap_new_Recluster, METH_VARARGS, (char *)"\n"
		"\n"
		"`Recluster(JetAlgorithm new_jet_alg, Keep keep_in=keep_only_hardest)`  \n"
		"\n"
		"constructor with just a jet algorithm, but no jet radius.  \n"
		"\n"
		"If the algorithm requires a jet radius, JetDefinition::max_allowable_R will be\n"
		"used.  \n"
		"\n"
		""},
	 { (char *)"delete_Recluster", _wrap_delete_Recluster, METH_VARARGS, (char *)"\n"
		"\n"
		"`~Recluster()`  \n"
		"\n"
		"default dtor  \n"
		"\n"
		""},
	 { (char *)"Recluster_set_acquire_recombiner", _wrap_Recluster_set_acquire_recombiner, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_acquire_recombiner(bool acquire)`  \n"
		"\n"
		"set whether the reclustering should attempt to acquire a recombiner from the\n"
		"input jet  \n"
		"\n"
		""},
	 { (char *)"Recluster_acquire_recombiner", _wrap_Recluster_acquire_recombiner, METH_VARARGS, (char *)"\n"
		"\n"
		"`acquire_recombiner() const -> bool`  \n"
		"\n"
		"returns true if this reclusterer is set to acquire the recombiner from the input\n"
		"jet  \n"
		"\n"
		""},
	 { (char *)"Recluster_set_cambridge_optimisation", _wrap_Recluster_set_cambridge_optimisation, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_cambridge_optimisation(bool enabled)`  \n"
		"\n"
		"sets whether to try to optimise reclustering with Cambridge/Aachen algorithms\n"
		"(by not reclustering if the requested C/A reclustering can be obtained by using\n"
		"subjets of an input C/A jet or one composed of multiple C/A pieces from the same\n"
		"clustering sequence).  \n"
		"\n"
		"By default this is enabled, and *should* always be correct; disable it to test\n"
		"this statement!  \n"
		"\n"
		""},
	 { (char *)"Recluster_set_cambridge_optimization", _wrap_Recluster_set_cambridge_optimization, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_cambridge_optimization(bool enabled)`  \n"
		"\n"
		"sets whether to try to optimise reclustering with Cambridge/Aachen algorithms\n"
		"(US spelling!)  \n"
		"\n"
		""},
	 { (char *)"Recluster_cambridge_optimization", _wrap_Recluster_cambridge_optimization, METH_VARARGS, (char *)"\n"
		"\n"
		"`cambridge_optimization() -> bool`  \n"
		"\n"
		"returns true if the reclusterer tries to optimise reclustering with\n"
		"Cambridge/Aachen algorithms  \n"
		"\n"
		""},
	 { (char *)"Recluster_cambridge_optimisation", _wrap_Recluster_cambridge_optimisation, METH_VARARGS, (char *)"\n"
		"\n"
		"`cambridge_optimisation() -> bool`  \n"
		"\n"
		""},
	 { (char *)"Recluster_set_keep", _wrap_Recluster_set_keep, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_keep(Keep keep_in)`  \n"
		"\n"
		"set the behaviour with regards to keeping all resulting jets or just the\n"
		"hardest.  \n"
		"\n"
		""},
	 { (char *)"Recluster_keep", _wrap_Recluster_keep, METH_VARARGS, (char *)"\n"
		"\n"
		"`keep() const -> Keep`  \n"
		"\n"
		"returns the current \"keep\" mode i.e.  \n"
		"\n"
		"whether only the hardest inclusive jet is returned or all of them (see the Keep\n"
		"enum above)  \n"
		"\n"
		""},
	 { (char *)"Recluster_description", _wrap_Recluster_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"class description  \n"
		"\n"
		""},
	 { (char *)"Recluster_result", _wrap_Recluster_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"runs the reclustering and sets kept and rejected to be the jets of interest\n"
		"(with non-zero rho, they will have been subtracted).  \n"
		"\n"
		"Normally this will be accessed through the base class's operator().  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `jet` :  \n"
		"    the jet that gets reclustered  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the reclustered jet  \n"
		"\n"
		""},
	 { (char *)"Recluster_get_new_jets_and_def", _wrap_Recluster_get_new_jets_and_def, METH_VARARGS, (char *)"\n"
		"\n"
		"`get_new_jets_and_def(const PseudoJet &input_jet, std::vector< PseudoJet >\n"
		"    &output_jets) const -> bool`  \n"
		"\n"
		"A lower-level method that does the actual work of reclustering the input jet.  \n"
		"\n"
		"The resulting jets are stored in output_jets. The jet definition that has been\n"
		"used can be accessed from the output_jets' ClusterSequence.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `input_jet` :  \n"
		"    the (input) jet that one wants to recluster  \n"
		"* `output_jets` :  \n"
		"    inclusive jets resulting from the new clustering  \n"
		"\n"
		"Returns true if the C/A optimisation has been used (this means that\n"
		"generate_output_jet then has to watch out for non-explicit-ghost areas that\n"
		"might be leftover)  \n"
		"\n"
		""},
	 { (char *)"Recluster_generate_output_jet", _wrap_Recluster_generate_output_jet, METH_VARARGS, (char *)"\n"
		"\n"
		"`generate_output_jet(std::vector< PseudoJet > &incljets, bool\n"
		"    ca_optimisation_used) const -> PseudoJet`  \n"
		"\n"
		"given a set of inclusive jets and a jet definition used, create the resulting\n"
		"PseudoJet;  \n"
		"\n"
		"If ca_optimisation_used then special care will be taken in deciding whether the\n"
		"final jet can legitimately have an area.  \n"
		"\n"
		""},
	 { (char *)"Recluster___str__", _wrap_Recluster___str__, METH_VARARGS, NULL},
	 { (char *)"Recluster_swigregister", Recluster_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Filter", _wrap_new_Filter, METH_VARARGS, (char *)"\n"
		"\n"
		"`Filter(FunctionOfPseudoJet< double > *Rfilt_func, Selector selector, double\n"
		"    rho=0.0)`  \n"
		"\n"
		"Same as the full constructor (see above) but just specifying a filtering radius\n"
		"that will depend on the jet being filtered As for the previous case, Cambridge-\n"
		"Aachen is used If the jet (or all its pieces) is obtained with a non-default\n"
		"recombiner, that one will be used.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `Rfilt_func` :  \n"
		"    the filtering radius function of a PseudoJet  \n"
		"\n"
		""},
	 { (char *)"delete_Filter", _wrap_delete_Filter, METH_VARARGS, (char *)"\n"
		"\n"
		"`~Filter()`  \n"
		"\n"
		"default dtor  \n"
		"\n"
		""},
	 { (char *)"Filter_set_subtractor", _wrap_Filter_set_subtractor, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_subtractor(const FunctionOfPseudoJet< PseudoJet > *subtractor_in)`  \n"
		"\n"
		"Set a subtractor that is applied to all individual subjets before deciding which\n"
		"ones to keep.  \n"
		"\n"
		"It takes precedence over a non-zero rho.  \n"
		"\n"
		""},
	 { (char *)"Filter_subtractor", _wrap_Filter_subtractor, METH_VARARGS, (char *)"\n"
		"\n"
		"`subtractor() const -> const FunctionOfPseudoJet< PseudoJet > *`  \n"
		"\n"
		"Set a subtractor that is applied to all individual subjets before deciding which\n"
		"ones to keep.  \n"
		"\n"
		"It takes precedence over a non-zero rho.  \n"
		"\n"
		""},
	 { (char *)"Filter_result", _wrap_Filter_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"runs the filtering and sets kept and rejected to be the jets of interest (with\n"
		"non-zero rho, they will have been subtracted).  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `jet` :  \n"
		"    the jet that gets filtered  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the filtered jet  \n"
		"\n"
		""},
	 { (char *)"Filter_description", _wrap_Filter_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"class description  \n"
		"\n"
		""},
	 { (char *)"Filter___str__", _wrap_Filter___str__, METH_VARARGS, NULL},
	 { (char *)"Filter_swigregister", Filter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FilterStructure", _wrap_new_FilterStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`FilterStructure(const std::vector< PseudoJet > &pieces_in, const\n"
		"    JetDefinition::Recombiner *rec=0)`  \n"
		"\n"
		"constructor from an original ClusterSequenceInfo We just share the original\n"
		"ClusterSequenceWrapper and initialise the rest  \n"
		"\n"
		""},
	 { (char *)"delete_FilterStructure", _wrap_delete_FilterStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`~FilterStructure()`  \n"
		"\n"
		"virtual dtor to allow further overloading  \n"
		"\n"
		""},
	 { (char *)"FilterStructure_description", _wrap_FilterStructure_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"description  \n"
		"\n"
		""},
	 { (char *)"FilterStructure_rejected", _wrap_FilterStructure_rejected, METH_VARARGS, (char *)"\n"
		"\n"
		"`rejected() const -> const std::vector< PseudoJet > &`  \n"
		"\n"
		"returns the subjets that were not kept during the filtering procedure\n"
		"(subtracted if the filter requests it, and valid in the original cs)  \n"
		"\n"
		""},
	 { (char *)"FilterStructure_swigregister", FilterStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Pruner", _wrap_new_Pruner, METH_VARARGS, (char *)"\n"
		"\n"
		"`Pruner(const JetDefinition &jet_def, const FunctionOfPseudoJet< double >\n"
		"    *zcut_dyn, const FunctionOfPseudoJet< double > *Rcut_dyn)`  \n"
		"\n"
		"alternative ctor in which the pt-fraction cut and angular distance cut are\n"
		"functions of the jet being pruned.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `jet_def` :  \n"
		"    the jet definition for the internal clustering  \n"
		"* `zcut_dyn` :  \n"
		"    dynamic pt-fraction cut in the pruning  \n"
		"* `Rcut_dyn` :  \n"
		"    dynamic angular distance cut in the pruning  \n"
		"\n"
		""},
	 { (char *)"Pruner_result", _wrap_Pruner_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"action on a single jet  \n"
		"\n"
		""},
	 { (char *)"Pruner_description", _wrap_Pruner_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"description  \n"
		"\n"
		""},
	 { (char *)"Pruner___str__", _wrap_Pruner___str__, METH_VARARGS, NULL},
	 { (char *)"delete_Pruner", _wrap_delete_Pruner, METH_VARARGS, NULL},
	 { (char *)"Pruner_swigregister", Pruner_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PrunerStructure", _wrap_new_PrunerStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`PrunerStructure(const PseudoJet &result_jet)`  \n"
		"\n"
		"default ctor  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `result_jet` :  \n"
		"    the jet for which we have to keep the structure  \n"
		"\n"
		""},
	 { (char *)"PrunerStructure_description", _wrap_PrunerStructure_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"description  \n"
		"\n"
		""},
	 { (char *)"PrunerStructure_rejected", _wrap_PrunerStructure_rejected, METH_VARARGS, (char *)"\n"
		"\n"
		"`rejected() const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return the constituents that have been rejected  \n"
		"\n"
		""},
	 { (char *)"PrunerStructure_extra_jets", _wrap_PrunerStructure_extra_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`extra_jets() const -> std::vector< PseudoJet >`  \n"
		"\n"
		"return the other jets that may have been found along with the result of the\n"
		"pruning The resulting vector is sorted in pt  \n"
		"\n"
		""},
	 { (char *)"PrunerStructure_Rcut", _wrap_PrunerStructure_Rcut, METH_VARARGS, (char *)"\n"
		"\n"
		"`Rcut() const -> double`  \n"
		"\n"
		"return the value of Rcut that was used for this specific pruning.  \n"
		"\n"
		""},
	 { (char *)"PrunerStructure_zcut", _wrap_PrunerStructure_zcut, METH_VARARGS, (char *)"\n"
		"\n"
		"`zcut() const -> double`  \n"
		"\n"
		"return the value of Rcut that was used for this specific pruning.  \n"
		"\n"
		""},
	 { (char *)"delete_PrunerStructure", _wrap_delete_PrunerStructure, METH_VARARGS, NULL},
	 { (char *)"PrunerStructure_swigregister", PrunerStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PruningRecombiner", _wrap_new_PruningRecombiner, METH_VARARGS, (char *)"\n"
		"\n"
		"`PruningRecombiner(double zcut, double Rcut, const JetDefinition::Recombiner\n"
		"    *recombiner)`  \n"
		"\n"
		"ctor  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `zcut` :  \n"
		"    transverse momentum fraction cut  \n"
		"* `Rcut` :  \n"
		"    angular separation cut  \n"
		"* `recomb` :  \n"
		"    pointer to a recombiner to use to cluster pairs  \n"
		"\n"
		""},
	 { (char *)"PruningRecombiner_recombine", _wrap_PruningRecombiner_recombine, METH_VARARGS, (char *)"\n"
		"\n"
		"`recombine(const PseudoJet &pa, const PseudoJet &pb, PseudoJet &pab) const`  \n"
		"\n"
		"perform a recombination taking into account the pruning conditions  \n"
		"\n"
		""},
	 { (char *)"PruningRecombiner_description", _wrap_PruningRecombiner_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns the description of the recombiner  \n"
		"\n"
		""},
	 { (char *)"PruningRecombiner_rejected", _wrap_PruningRecombiner_rejected, METH_VARARGS, (char *)"\n"
		"\n"
		"`rejected() const -> const std::vector< unsigned int > &`  \n"
		"\n"
		"return the history indices that have been pruned away  \n"
		"\n"
		""},
	 { (char *)"PruningRecombiner_clear_rejected", _wrap_PruningRecombiner_clear_rejected, METH_VARARGS, (char *)"\n"
		"\n"
		"`clear_rejected()`  \n"
		"\n"
		"clears the list of rejected indices  \n"
		"\n"
		"If one decides to use this recombiner standalone, one has to call this after\n"
		"each clustering in order for the rejected() vector to remain sensible and not\n"
		"grow to infinite size.  \n"
		"\n"
		""},
	 { (char *)"delete_PruningRecombiner", _wrap_delete_PruningRecombiner, METH_VARARGS, NULL},
	 { (char *)"PruningRecombiner_swigregister", PruningRecombiner_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PruningPlugin", _wrap_new_PruningPlugin, METH_VARARGS, (char *)"\n"
		"\n"
		"`PruningPlugin(const JetDefinition &jet_def, double zcut, double Rcut)`  \n"
		"\n"
		"ctor  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `jet_def` :  \n"
		"    the jet definition to be used for the internal clustering  \n"
		"* `zcut` :  \n"
		"    transverse momentum fraction cut  \n"
		"* `Rcut` :  \n"
		"    angular separation cut  \n"
		"\n"
		""},
	 { (char *)"PruningPlugin_run_clustering", _wrap_PruningPlugin_run_clustering, METH_VARARGS, (char *)"\n"
		"\n"
		"`run_clustering(ClusterSequence &input_cs) const`  \n"
		"\n"
		"the actual clustering work for the plugin  \n"
		"\n"
		""},
	 { (char *)"PruningPlugin_description", _wrap_PruningPlugin_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"description of the plugin  \n"
		"\n"
		""},
	 { (char *)"PruningPlugin_R", _wrap_PruningPlugin_R, METH_VARARGS, (char *)"\n"
		"\n"
		"`R() const -> double`  \n"
		"\n"
		"returns the radius  \n"
		"\n"
		""},
	 { (char *)"delete_PruningPlugin", _wrap_delete_PruningPlugin, METH_VARARGS, NULL},
	 { (char *)"PruningPlugin_swigregister", PruningPlugin_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CASubJetTagger", _wrap_new_CASubJetTagger, METH_VARARGS, (char *)"\n"
		"\n"
		"`CASubJetTagger(ScaleChoice scale_choice=jade_distance, double z_threshold=0.1)`  \n"
		"\n"
		"just constructs  \n"
		"\n"
		""},
	 { (char *)"CASubJetTagger_set_dr_min", _wrap_CASubJetTagger_set_dr_min, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_dr_min(double drmin)`  \n"
		"\n"
		"sets a minimum delta R below which spliting will be ignored (only relevant if\n"
		"set prior to calling run())  \n"
		"\n"
		""},
	 { (char *)"CASubJetTagger_description", _wrap_CASubJetTagger_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a textual description of the tagger  \n"
		"\n"
		""},
	 { (char *)"CASubJetTagger_set_absolute_z_cut", _wrap_CASubJetTagger_set_absolute_z_cut, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_absolute_z_cut(bool abs_z_cut=true)`  \n"
		"\n"
		"If (abs_z_cut) is set to false (the default) then for a splitting to be\n"
		"considered, each subjet must satisfy.  \n"
		"\n"
		"p_{t,sub} > z_threshold * p_{t,parent}  \n"
		"\n"
		"whereas if it is set to true, then each subject must satisfy  \n"
		"\n"
		"       p_{t,sub} > z_threshold * p_{t,original-jet}  \n"
		"\n"
		"where parent is the immediate parent of the splitting, and original jet is the\n"
		"one supplied to the run() function.  \n"
		"\n"
		"Only relevant is called prior to run().  \n"
		"\n"
		""},
	 { (char *)"CASubJetTagger_result", _wrap_CASubJetTagger_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"runs the tagger on the given jet and returns the tagged PseudoJet if successful,\n"
		"or a PseudoJet==0 otherwise (standard access is through operator()).  \n"
		"\n"
		""},
	 { (char *)"CASubJetTagger___str__", _wrap_CASubJetTagger___str__, METH_VARARGS, NULL},
	 { (char *)"delete_CASubJetTagger", _wrap_delete_CASubJetTagger, METH_VARARGS, NULL},
	 { (char *)"CASubJetTagger_swigregister", CASubJetTagger_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CASubJetTaggerStructure", _wrap_new_CASubJetTaggerStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`CASubJetTaggerStructure(const PseudoJet &result_jet)`  \n"
		"\n"
		"default ctor  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `result_jet` :  \n"
		"    the jet for which we have to keep the structure  \n"
		"\n"
		""},
	 { (char *)"CASubJetTaggerStructure_scale_choice", _wrap_CASubJetTaggerStructure_scale_choice, METH_VARARGS, (char *)"\n"
		"\n"
		"`scale_choice() const -> CASubJetTagger::ScaleChoice`  \n"
		"\n"
		"returns the scale choice asked for the maximisation  \n"
		"\n"
		""},
	 { (char *)"CASubJetTaggerStructure_distance", _wrap_CASubJetTaggerStructure_distance, METH_VARARGS, (char *)"\n"
		"\n"
		"`distance() const -> double`  \n"
		"\n"
		"returns the value of the distance measure (corresponding to ScaleChoice) for\n"
		"this jet's splitting  \n"
		"\n"
		""},
	 { (char *)"CASubJetTaggerStructure_z", _wrap_CASubJetTaggerStructure_z, METH_VARARGS, (char *)"\n"
		"\n"
		"`z() const -> double`  \n"
		"\n"
		"returns the pt fraction contained by the softer of the two component pieces of\n"
		"this jet (normalised relative to this jet)  \n"
		"\n"
		""},
	 { (char *)"CASubJetTaggerStructure_absolute_z", _wrap_CASubJetTaggerStructure_absolute_z, METH_VARARGS, (char *)"\n"
		"\n"
		"`absolute_z() const -> bool`  \n"
		"\n"
		"returns the pt fraction contained by the softer of the two component pieces of\n"
		"this jet (normalised relative to the original jet)  \n"
		"\n"
		""},
	 { (char *)"delete_CASubJetTaggerStructure", _wrap_delete_CASubJetTaggerStructure, METH_VARARGS, NULL},
	 { (char *)"CASubJetTaggerStructure_swigregister", CASubJetTaggerStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MassDropTagger", _wrap_new_MassDropTagger, METH_VARARGS, (char *)"\n"
		"\n"
		"`MassDropTagger(const double mu=0.67, const double ycut=0.09)`  \n"
		"\n"
		"default ctor  \n"
		"\n"
		""},
	 { (char *)"MassDropTagger_description", _wrap_MassDropTagger_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a textual description of the tagger  \n"
		"\n"
		""},
	 { (char *)"MassDropTagger_result", _wrap_MassDropTagger_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"runs the tagger on the given jet and returns the tagged PseudoJet if successful,\n"
		"a PseudoJet==0 otherwise (standard access is through operator()).  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `jet` :  \n"
		"    the PseudoJet to tag  \n"
		"\n"
		""},
	 { (char *)"MassDropTagger___str__", _wrap_MassDropTagger___str__, METH_VARARGS, NULL},
	 { (char *)"delete_MassDropTagger", _wrap_delete_MassDropTagger, METH_VARARGS, NULL},
	 { (char *)"MassDropTagger_swigregister", MassDropTagger_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MassDropTaggerStructure", _wrap_new_MassDropTaggerStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`MassDropTaggerStructure(const PseudoJet &result_jet)`  \n"
		"\n"
		"ctor with initialisation  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `pieces` :  \n"
		"    the pieces of the created jet  \n"
		"* `rec` :  \n"
		"    the recombiner from the underlying cluster sequence  \n"
		"\n"
		""},
	 { (char *)"MassDropTaggerStructure_mu", _wrap_MassDropTaggerStructure_mu, METH_VARARGS, (char *)"\n"
		"\n"
		"`mu() const -> double`  \n"
		"\n"
		"returns the mass-drop ratio, pieces[0].m()/jet.m(), for the splitting that\n"
		"triggered the mass-drop condition  \n"
		"\n"
		""},
	 { (char *)"MassDropTaggerStructure_y", _wrap_MassDropTaggerStructure_y, METH_VARARGS, (char *)"\n"
		"\n"
		"`y() const -> double`  \n"
		"\n"
		"returns the value of y = (squared kt distance) / (squared mass) for the\n"
		"splitting that triggered the mass-drop condition  \n"
		"\n"
		""},
	 { (char *)"delete_MassDropTaggerStructure", _wrap_delete_MassDropTaggerStructure, METH_VARARGS, NULL},
	 { (char *)"MassDropTaggerStructure_swigregister", MassDropTaggerStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RestFrameNSubjettinessTagger", _wrap_new_RestFrameNSubjettinessTagger, METH_VARARGS, (char *)"\n"
		"\n"
		"`RestFrameNSubjettinessTagger(const JetDefinition subjet_def, const double\n"
		"    tau2cut=0.08, const double costhetascut=0.8, const bool\n"
		"    use_exclusive=false)`  \n"
		"\n"
		"ctor with arguments (see the class description above)  \n"
		"\n"
		""},
	 { (char *)"RestFrameNSubjettinessTagger_description", _wrap_RestFrameNSubjettinessTagger_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a textual description of the tagger  \n"
		"\n"
		""},
	 { (char *)"RestFrameNSubjettinessTagger_result", _wrap_RestFrameNSubjettinessTagger_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"runs the tagger on the given jet and returns the tagged PseudoJet if successful,\n"
		"a PseudoJet==0 otherwise (standard access is through operator()).  \n"
		"\n"
		"impose the cut on cos(theta_s)  \n"
		"\n"
		""},
	 { (char *)"RestFrameNSubjettinessTagger___str__", _wrap_RestFrameNSubjettinessTagger___str__, METH_VARARGS, NULL},
	 { (char *)"delete_RestFrameNSubjettinessTagger", _wrap_delete_RestFrameNSubjettinessTagger, METH_VARARGS, NULL},
	 { (char *)"RestFrameNSubjettinessTagger_swigregister", RestFrameNSubjettinessTagger_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RestFrameNSubjettinessTaggerStructure", _wrap_new_RestFrameNSubjettinessTaggerStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`RestFrameNSubjettinessTaggerStructure(const std::vector< PseudoJet >\n"
		"    &pieces_in)`  \n"
		"\n"
		"ctor with pieces initialisation  \n"
		"\n"
		""},
	 { (char *)"RestFrameNSubjettinessTaggerStructure_tau2", _wrap_RestFrameNSubjettinessTaggerStructure_tau2, METH_VARARGS, (char *)"\n"
		"\n"
		"`tau2() const -> double`  \n"
		"\n"
		"returns the associated N-subjettiness  \n"
		"\n"
		""},
	 { (char *)"RestFrameNSubjettinessTaggerStructure_costhetas", _wrap_RestFrameNSubjettinessTaggerStructure_costhetas, METH_VARARGS, (char *)"\n"
		"\n"
		"`costhetas() const -> double`  \n"
		"\n"
		"returns the associated angle with the boosted axis  \n"
		"\n"
		""},
	 { (char *)"delete_RestFrameNSubjettinessTaggerStructure", _wrap_delete_RestFrameNSubjettinessTaggerStructure, METH_VARARGS, NULL},
	 { (char *)"RestFrameNSubjettinessTaggerStructure_swigregister", RestFrameNSubjettinessTaggerStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"TopTaggerBase_set_top_selector", _wrap_TopTaggerBase_set_top_selector, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_top_selector(const Selector &sel)`  \n"
		"\n"
		"sets the selector that is applied to the top candidate  \n"
		"\n"
		""},
	 { (char *)"TopTaggerBase_set_W_selector", _wrap_TopTaggerBase_set_W_selector, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_W_selector(const Selector &sel)`  \n"
		"\n"
		"sets the selector that is applied to the W candidate  \n"
		"\n"
		""},
	 { (char *)"TopTaggerBase_description_of_selectors", _wrap_TopTaggerBase_description_of_selectors, METH_VARARGS, (char *)"\n"
		"\n"
		"`description_of_selectors() const -> std::string`  \n"
		"\n"
		"returns a description of the top and W selectors  \n"
		"\n"
		""},
	 { (char *)"delete_TopTaggerBase", _wrap_delete_TopTaggerBase, METH_VARARGS, NULL},
	 { (char *)"TopTaggerBase_swigregister", TopTaggerBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"TopTaggerBaseStructure_W", _wrap_TopTaggerBaseStructure_W, METH_VARARGS, (char *)"\n"
		"\n"
		"`W() const =0 -> const PseudoJet &`  \n"
		"\n"
		""},
	 { (char *)"TopTaggerBaseStructure_non_W", _wrap_TopTaggerBaseStructure_non_W, METH_VARARGS, (char *)"\n"
		"\n"
		"`non_W() const =0 -> const PseudoJet &`  \n"
		"\n"
		""},
	 { (char *)"delete_TopTaggerBaseStructure", _wrap_delete_TopTaggerBaseStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`~TopTaggerBaseStructure()`  \n"
		"\n"
		""},
	 { (char *)"TopTaggerBaseStructure_swigregister", TopTaggerBaseStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_JHTopTagger", _wrap_new_JHTopTagger, METH_VARARGS, (char *)"\n"
		"\n"
		"`JHTopTagger(const double delta_p=0.10, const double delta_r=0.19, double\n"
		"    cos_theta_W_max=0.7, double mW=80.4)`  \n"
		"\n"
		"default ctor The parameters are the following:  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `delta_p` :  \n"
		"    fractional pt cut imposed on the subjets (computed as a fraction of the\n"
		"    original jet)  \n"
		"* `delta_r` :  \n"
		"    minimal distance between 2 subjets (computed as |y1-y2|+|phi1-phi2|)  \n"
		"* `cos_theta_W_max` :  \n"
		"    the maximal value for the polarisation angle of the W  \n"
		"* `mW` :  \n"
		"    the W mass  \n"
		"\n"
		"The default values of all these parameters are taken from arXiv:0806:0848  \n"
		"\n"
		""},
	 { (char *)"JHTopTagger_description", _wrap_JHTopTagger_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a textual description of the tagger  \n"
		"\n"
		""},
	 { (char *)"JHTopTagger_result", _wrap_JHTopTagger_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"runs the tagger on the given jet and returns the tagged PseudoJet if successful,\n"
		"or a PseudoJet==0 otherwise (standard access is through operator()).  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `jet` :  \n"
		"    the PseudoJet to tag  \n"
		"\n"
		""},
	 { (char *)"JHTopTagger___str__", _wrap_JHTopTagger___str__, METH_VARARGS, NULL},
	 { (char *)"delete_JHTopTagger", _wrap_delete_JHTopTagger, METH_VARARGS, NULL},
	 { (char *)"JHTopTagger_swigregister", JHTopTagger_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_JHTopTaggerStructure", _wrap_new_JHTopTaggerStructure, METH_VARARGS, (char *)"\n"
		"\n"
		"`JHTopTaggerStructure(std::vector< PseudoJet > pieces_in, const\n"
		"    JetDefinition::Recombiner *recombiner=0)`  \n"
		"\n"
		"ctor with pieces initialisation  \n"
		"\n"
		""},
	 { (char *)"JHTopTaggerStructure_W", _wrap_JHTopTaggerStructure_W, METH_VARARGS, (char *)"\n"
		"\n"
		"`W() const -> const PseudoJet &`  \n"
		"\n"
		"returns the W subjet  \n"
		"\n"
		""},
	 { (char *)"JHTopTaggerStructure_W1", _wrap_JHTopTaggerStructure_W1, METH_VARARGS, (char *)"\n"
		"\n"
		"`W1() const -> PseudoJet`  \n"
		"\n"
		"returns the first W subjet (the harder)  \n"
		"\n"
		""},
	 { (char *)"JHTopTaggerStructure_W2", _wrap_JHTopTaggerStructure_W2, METH_VARARGS, (char *)"\n"
		"\n"
		"`W2() const -> PseudoJet`  \n"
		"\n"
		"returns the second W subjet  \n"
		"\n"
		""},
	 { (char *)"JHTopTaggerStructure_non_W", _wrap_JHTopTaggerStructure_non_W, METH_VARARGS, (char *)"\n"
		"\n"
		"`non_W() const -> const PseudoJet &`  \n"
		"\n"
		"returns the non-W subjet It will have 1 or 2 pieces depending on whether the\n"
		"tagger has found 3 or 4 pieces  \n"
		"\n"
		""},
	 { (char *)"JHTopTaggerStructure_cos_theta_W", _wrap_JHTopTaggerStructure_cos_theta_W, METH_VARARGS, (char *)"\n"
		"\n"
		"`cos_theta_W() const -> double`  \n"
		"\n"
		"returns the W helicity angle  \n"
		"\n"
		""},
	 { (char *)"delete_JHTopTaggerStructure", _wrap_delete_JHTopTaggerStructure, METH_VARARGS, NULL},
	 { (char *)"JHTopTaggerStructure_swigregister", JHTopTaggerStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_BackgroundEstimatorBase", _wrap_delete_BackgroundEstimatorBase, METH_VARARGS, (char *)"\n"
		"\n"
		"`~BackgroundEstimatorBase()`  \n"
		"\n"
		"a default virtual destructor that does nothing  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_set_particles", _wrap_BackgroundEstimatorBase_set_particles, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_particles(const std::vector< PseudoJet > &particles)=0`  \n"
		"\n"
		"tell the background estimator that it has a new event, composed of the specified\n"
		"particles.  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_rho", _wrap_BackgroundEstimatorBase_rho, METH_VARARGS, (char *)"\n"
		"\n"
		"`rho(const PseudoJet &jet)=0 -> double`  \n"
		"\n"
		"get rho, the background density per unit area, locally at the position of a\n"
		"given jet.  \n"
		"\n"
		"Note that this is not const, because a user may then wish to query other aspects\n"
		"of the background that could depend on the position of the jet last used for a\n"
		"rho(jet) determination.  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_sigma", _wrap_BackgroundEstimatorBase_sigma, METH_VARARGS, (char *)"\n"
		"\n"
		"`sigma(const PseudoJet &) -> double`  \n"
		"\n"
		"get sigma, the background fluctuations per unit area, locally at the position of\n"
		"a given jet.  \n"
		"\n"
		"As for rho(jet), it is non-const.  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_has_sigma", _wrap_BackgroundEstimatorBase_has_sigma, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_sigma() -> bool`  \n"
		"\n"
		"returns true if this background estimator has support for determination of sigma  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_rho_m", _wrap_BackgroundEstimatorBase_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`rho_m(const PseudoJet &) -> double`  \n"
		"\n"
		"Returns rho_m locally at the jet position. As for rho(jet), it is non-const.  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_sigma_m", _wrap_BackgroundEstimatorBase_sigma_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`sigma_m(const PseudoJet &) -> double`  \n"
		"\n"
		"Returns sigma_m locally at the jet position. As for rho(jet), it is non-const.  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_has_rho_m", _wrap_BackgroundEstimatorBase_has_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_rho_m() const -> bool`  \n"
		"\n"
		"Returns true if this background estimator has support for determination of\n"
		"rho_m.  \n"
		"\n"
		"Note that support for sigma_m is automatic is one has sigma and rho_m support.  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_set_rescaling_class", _wrap_BackgroundEstimatorBase_set_rescaling_class, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_rescaling_class(const FunctionOfPseudoJet< double > *rescaling_class_in)`  \n"
		"\n"
		"Set a pointer to a class that calculates the rescaling factor as a function of\n"
		"the jet (position).  \n"
		"\n"
		"Note that the rescaling factor is used both in the determination of the\n"
		"\"global\" rho (the pt/A of each jet is divided by this factor) and when asking\n"
		"for a local rho (the result is multiplied by this factor).  \n"
		"\n"
		"The BackgroundRescalingYPolynomial class can be used to get a rescaling that\n"
		"depends just on rapidity.  \n"
		"\n"
		"There is currently no support for different rescaling classes for rho and rho_m\n"
		"determinations.  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_rescaling_class", _wrap_BackgroundEstimatorBase_rescaling_class, METH_VARARGS, (char *)"\n"
		"\n"
		"`rescaling_class() const -> const FunctionOfPseudoJet< double > *`  \n"
		"\n"
		"return the pointer to the jet density class  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_description", _wrap_BackgroundEstimatorBase_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const =0 -> std::string`  \n"
		"\n"
		"returns a textual description of the background estimator  \n"
		"\n"
		""},
	 { (char *)"BackgroundEstimatorBase_swigregister", BackgroundEstimatorBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BackgroundRescalingYPolynomial", _wrap_new_BackgroundRescalingYPolynomial, METH_VARARGS, (char *)"\n"
		"\n"
		"`BackgroundRescalingYPolynomial(double a0=1, double a1=0, double a2=0, double\n"
		"    a3=0, double a4=0)`  \n"
		"\n"
		"construct a background rescaling polynomial of the form a0 + a1*y + a2*y^2 +\n"
		"a3*y^3 + a4*y^4  \n"
		"\n"
		"The following values give a reasonable reproduction of the Pythia8 tune 4C\n"
		"background shape for pp collisions at sqrt(s)=7TeV:  \n"
		"\n"
		"*   a0 = 1.157  \n"
		"*   a1 = 0  \n"
		"*   a2 = -0.0266  \n"
		"*   a3 = 0  \n"
		"*   a4 = 0.000048  \n"
		"\n"
		""},
	 { (char *)"BackgroundRescalingYPolynomial_result", _wrap_BackgroundRescalingYPolynomial_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"return the rescaling factor associated with this jet  \n"
		"\n"
		""},
	 { (char *)"delete_BackgroundRescalingYPolynomial", _wrap_delete_BackgroundRescalingYPolynomial, METH_VARARGS, NULL},
	 { (char *)"BackgroundRescalingYPolynomial_swigregister", BackgroundRescalingYPolynomial_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_JetMedianBackgroundEstimator", _wrap_new_JetMedianBackgroundEstimator, METH_VARARGS, (char *)"\n"
		"\n"
		"`JetMedianBackgroundEstimator(const Selector &rho_range=SelectorIdentity())`  \n"
		"\n"
		"Default constructor that optionally sets the rho range.  \n"
		"\n"
		"The configuration must be done later calling set_cluster_sequence(...) or\n"
		"set_jets(...).  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `rho_range` :  \n"
		"    the Selector specifying which jets will be considered  \n"
		"\n"
		""},
	 { (char *)"delete_JetMedianBackgroundEstimator", _wrap_delete_JetMedianBackgroundEstimator, METH_VARARGS, (char *)"\n"
		"\n"
		"`~JetMedianBackgroundEstimator()`  \n"
		"\n"
		"default dtor  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_set_particles", _wrap_JetMedianBackgroundEstimator_set_particles, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_particles(const std::vector< PseudoJet > &particles)`  \n"
		"\n"
		"tell the background estimator that it has a new event, composed of the specified\n"
		"particles.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_set_cluster_sequence", _wrap_JetMedianBackgroundEstimator_set_cluster_sequence, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_cluster_sequence(const ClusterSequenceAreaBase &csa)`  \n"
		"\n"
		"(re)set the cluster sequence (with area support) to be used by future calls to\n"
		"rho() etc.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `csa` :  \n"
		"    the cluster sequence area  \n"
		"\n"
		"Pre-conditions:  \n"
		"\n"
		"*   one should be able to estimate the \"empty area\" (i.e. the area not\n"
		"    occupied by jets). This is feasible if at least one of the following\n"
		"    conditions is satisfied: ( i) the ClusterSequence has explicit ghosts (ii)\n"
		"    the range selected has a computable area.  \n"
		"*   the jet algorithm must be suited for median computation (otherwise a warning\n"
		"    will be issues)  \n"
		"\n"
		"Note that selectors with e.g. hardest-jets exclusion do not have a well-defined\n"
		"area. For this reasons, it is STRONGLY advised to use an area with explicit\n"
		"ghosts.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_set_jets", _wrap_JetMedianBackgroundEstimator_set_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_jets(const std::vector< PseudoJet > &jets)`  \n"
		"\n"
		"(re)set the jets (which must have area support) to be used by future calls to\n"
		"rho() etc.  \n"
		"\n"
		"; for the conditions that must be satisfied by the jets, see the Constructor\n"
		"that takes jets.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_set_selector", _wrap_JetMedianBackgroundEstimator_set_selector, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_selector(const Selector &rho_range_selector)`  \n"
		"\n"
		"(re)set the selector to be used for future calls to rho() etc.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_set_compute_rho_m", _wrap_JetMedianBackgroundEstimator_set_compute_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_compute_rho_m(bool enable)`  \n"
		"\n"
		"determine whether the automatic calculation of rho_m and sigma_m is enabled (by\n"
		"default true)  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_rho", _wrap_JetMedianBackgroundEstimator_rho, METH_VARARGS, (char *)"\n"
		"\n"
		"`rho(const PseudoJet &jet) -> double`  \n"
		"\n"
		"get rho, the median background density per unit area, locally at the position of\n"
		"a given jet.  \n"
		"\n"
		"If the Selector associated with the range takes a reference jet (i.e. is\n"
		"relocatable), then for subsequent operations the Selector has that jet set as\n"
		"its reference.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_sigma", _wrap_JetMedianBackgroundEstimator_sigma, METH_VARARGS, (char *)"\n"
		"\n"
		"`sigma(const PseudoJet &jet) -> double`  \n"
		"\n"
		"get sigma, the background fluctuations per unit area, locally at the position of\n"
		"a given jet.  \n"
		"\n"
		"If the Selector associated with the range takes a reference jet (i.e. is\n"
		"relocatable), then for subsequent operations the Selector has that jet set as\n"
		"its reference.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_has_sigma", _wrap_JetMedianBackgroundEstimator_has_sigma, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_sigma() -> bool`  \n"
		"\n"
		"returns true if this background estimator has support for determination of sigma  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_rho_m", _wrap_JetMedianBackgroundEstimator_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`rho_m(const PseudoJet &) -> double`  \n"
		"\n"
		"Returns rho_m locally at the jet position. As for rho(jet), it is non-const.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_sigma_m", _wrap_JetMedianBackgroundEstimator_sigma_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`sigma_m(const PseudoJet &) -> double`  \n"
		"\n"
		"Returns sigma_m locally at the jet position. As for rho(jet), it is non-const.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_has_rho_m", _wrap_JetMedianBackgroundEstimator_has_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_rho_m() const -> bool`  \n"
		"\n"
		"Returns true if this background estimator has support for determination of\n"
		"rho_m.  \n"
		"\n"
		"In te presence of a density class, support for rho_m is automatically disabled  \n"
		"\n"
		"Note that support for sigma_m is automatic is one has sigma and rho_m support.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_mean_area", _wrap_JetMedianBackgroundEstimator_mean_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`mean_area() const -> double`  \n"
		"\n"
		"Returns the mean area of the jets used to actually compute the background\n"
		"properties in the last call of rho() or sigma() If the configuration has changed\n"
		"in the meantime, throw an error.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_n_jets_used", _wrap_JetMedianBackgroundEstimator_n_jets_used, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_jets_used() const -> unsigned int`  \n"
		"\n"
		"returns the number of jets used to actually compute the background properties in\n"
		"the last call of rho() or sigma() If the configuration has changed in the\n"
		"meantime, throw an error.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_jets_used", _wrap_JetMedianBackgroundEstimator_jets_used, METH_VARARGS, (char *)"\n"
		"\n"
		"`jets_used() const -> std::vector< PseudoJet >`  \n"
		"\n"
		"returns the jets used to actually compute the background properties  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_empty_area", _wrap_JetMedianBackgroundEstimator_empty_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`empty_area() const -> double`  \n"
		"\n"
		"Returns the estimate of the area (within the range defined by the selector) that\n"
		"is not occupied by jets.  \n"
		"\n"
		"The value is that for the last call of rho() or sigma() If the configuration has\n"
		"changed in the meantime, throw an error.  \n"
		"\n"
		"The answer is defined to be zero if the area calculation involved explicit\n"
		"ghosts; if the area calculation was an active area, then use is made of the\n"
		"active area's internal list of pure ghost jets (taking those that pass the\n"
		"selector); otherwise it is based on the difference between the selector's total\n"
		"area and the area of the jets that pass the selector.  \n"
		"\n"
		"The result here is just the cached result of the corresponding call to the\n"
		"ClusterSequenceAreaBase function.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_n_empty_jets", _wrap_JetMedianBackgroundEstimator_n_empty_jets, METH_VARARGS, (char *)"\n"
		"\n"
		"`n_empty_jets() const -> double`  \n"
		"\n"
		"Returns the number of empty jets used when computing the background properties.  \n"
		"\n"
		"The value is that for the last call of rho() or sigma(). If the configuration\n"
		"has changed in the meantime, throw an error.  \n"
		"\n"
		"If the area has explicit ghosts the result is zero; for active areas it is the\n"
		"number of internal pure ghost jets that pass the selector; otherwise it is\n"
		"deduced from the empty area, divided by $ 0.55 \\pi R^2 $ (the average pure-\n"
		"ghost-jet area).  \n"
		"\n"
		"The result here is just the cached result of the corresponding call to the\n"
		"ClusterSequenceAreaBase function.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_reset", _wrap_JetMedianBackgroundEstimator_reset, METH_VARARGS, (char *)"\n"
		"\n"
		"`reset()`  \n"
		"\n"
		"Resets the class to its default state, including the choice to use 4-vector\n"
		"areas.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_set_use_area_4vector", _wrap_JetMedianBackgroundEstimator_set_use_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_use_area_4vector(bool use_it=true)`  \n"
		"\n"
		"By default when calculating pt/Area for a jet, it is the transverse component of\n"
		"the 4-vector area that is used in the ratiof $p_t/A$.  \n"
		"\n"
		"Calling this function with a \"false\" argument causes the scalar area to be\n"
		"used instead.  \n"
		"\n"
		"While the difference between the two choices is usually small, for high-\n"
		"precision work it is usually the 4-vector area that is to be preferred.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `use_it` :  \n"
		"    whether one uses the 4-vector area or not (true by default)  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_use_area_4vector", _wrap_JetMedianBackgroundEstimator_use_area_4vector, METH_VARARGS, (char *)"\n"
		"\n"
		"`use_area_4vector() const -> bool`  \n"
		"\n"
		"check if the estimator uses the 4-vector area or the scalar area  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_set_provide_fj2_sigma", _wrap_JetMedianBackgroundEstimator_set_provide_fj2_sigma, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_provide_fj2_sigma(bool provide_fj2_sigma=true)`  \n"
		"\n"
		"The FastJet v2.X sigma calculation had a small spurious offset in the limit of a\n"
		"small number of jets.  \n"
		"\n"
		"This is fixed by default in versions 3 upwards. The old behaviour can be\n"
		"obtained with a call to this function.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_set_jet_density_class", _wrap_JetMedianBackgroundEstimator_set_jet_density_class, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_jet_density_class(const FunctionOfPseudoJet< double > *jet_density_class)`  \n"
		"\n"
		"Set a pointer to a class that calculates the quantity whose median will be\n"
		"calculated; if the pointer is null then pt/area is used (as occurs also if this\n"
		"function is not called).  \n"
		"\n"
		"Note that this is still *preliminary* in FastJet 3.0 and that backward\n"
		"compatibility is not guaranteed in future releases of FastJet  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_jet_density_class", _wrap_JetMedianBackgroundEstimator_jet_density_class, METH_VARARGS, (char *)"\n"
		"\n"
		"`jet_density_class() const -> const FunctionOfPseudoJet< double > *`  \n"
		"\n"
		"return the pointer to the jet density class  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_set_rescaling_class", _wrap_JetMedianBackgroundEstimator_set_rescaling_class, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_rescaling_class(const FunctionOfPseudoJet< double > *rescaling_class_in)`  \n"
		"\n"
		"Set a pointer to a class that calculates the rescaling factor as a function of\n"
		"the jet (position).  \n"
		"\n"
		"Note that the rescaling factor is used both in the determination of the\n"
		"\"global\" rho (the pt/A of each jet is divided by this factor) and when asking\n"
		"for a local rho (the result is multiplied by this factor).  \n"
		"\n"
		"The BackgroundRescalingYPolynomial class can be used to get a rescaling that\n"
		"depends just on rapidity.  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_description", _wrap_JetMedianBackgroundEstimator_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a textual description of the background estimator  \n"
		"\n"
		""},
	 { (char *)"JetMedianBackgroundEstimator_swigregister", JetMedianBackgroundEstimator_swigregister, METH_VARARGS, NULL},
	 { (char *)"BackgroundJetPtDensity_result", _wrap_BackgroundJetPtDensity_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"the action of the function this *has* to be overloaded in derived classes  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `pj` :  \n"
		"    the PseudoJet input to the function  \n"
		"\n"
		""},
	 { (char *)"BackgroundJetPtDensity_description", _wrap_BackgroundJetPtDensity_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a description of the function (an empty string by default)  \n"
		"\n"
		""},
	 { (char *)"new_BackgroundJetPtDensity", _wrap_new_BackgroundJetPtDensity, METH_VARARGS, NULL},
	 { (char *)"delete_BackgroundJetPtDensity", _wrap_delete_BackgroundJetPtDensity, METH_VARARGS, NULL},
	 { (char *)"BackgroundJetPtDensity_swigregister", BackgroundJetPtDensity_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BackgroundJetScalarPtDensity", _wrap_new_BackgroundJetScalarPtDensity, METH_VARARGS, (char *)"\n"
		"\n"
		"`BackgroundJetScalarPtDensity(double n)`  \n"
		"\n"
		"Constructor to provide background estimation based on $ sum_{i\\in jet}\n"
		"p_{ti}^{n} $.  \n"
		"\n"
		""},
	 { (char *)"BackgroundJetScalarPtDensity_result", _wrap_BackgroundJetScalarPtDensity_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"the action of the function this *has* to be overloaded in derived classes  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `pj` :  \n"
		"    the PseudoJet input to the function  \n"
		"\n"
		""},
	 { (char *)"BackgroundJetScalarPtDensity_description", _wrap_BackgroundJetScalarPtDensity_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a description of the function (an empty string by default)  \n"
		"\n"
		""},
	 { (char *)"delete_BackgroundJetScalarPtDensity", _wrap_delete_BackgroundJetScalarPtDensity, METH_VARARGS, NULL},
	 { (char *)"BackgroundJetScalarPtDensity_swigregister", BackgroundJetScalarPtDensity_swigregister, METH_VARARGS, NULL},
	 { (char *)"BackgroundJetPtMDensity_result", _wrap_BackgroundJetPtMDensity_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> double`  \n"
		"\n"
		"the action of the function this *has* to be overloaded in derived classes  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `pj` :  \n"
		"    the PseudoJet input to the function  \n"
		"\n"
		""},
	 { (char *)"BackgroundJetPtMDensity_description", _wrap_BackgroundJetPtMDensity_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a description of the function (an empty string by default)  \n"
		"\n"
		""},
	 { (char *)"new_BackgroundJetPtMDensity", _wrap_new_BackgroundJetPtMDensity, METH_VARARGS, NULL},
	 { (char *)"delete_BackgroundJetPtMDensity", _wrap_delete_BackgroundJetPtMDensity, METH_VARARGS, NULL},
	 { (char *)"BackgroundJetPtMDensity_swigregister", BackgroundJetPtMDensity_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GridMedianBackgroundEstimator", _wrap_new_GridMedianBackgroundEstimator, METH_VARARGS, (char *)"\n"
		"\n"
		"`GridMedianBackgroundEstimator(double rapmin_in, double rapmax_in, double\n"
		"    drap_in, double dphi_in, Selector tile_selector=Selector())`  \n"
		"\n"
		"Constructor with the explicit parameters for the underlying RectangularGrid.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `rapmin` :  \n"
		"    the minimum rapidity extent of the grid  \n"
		"* `rapmax` :  \n"
		"    the maximum rapidity extent of the grid  \n"
		"* `drap` :  \n"
		"    the grid spacing in rapidity  \n"
		"* `dphi` :  \n"
		"    the grid spacing in azimuth  \n"
		"* `tile_selector` :  \n"
		"    optional (geometric) selector to specify which tiles are good; a tile is\n"
		"    good if a massless 4-vector at the center of the tile passes the selection  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_set_particles", _wrap_GridMedianBackgroundEstimator_set_particles, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_particles(const std::vector< PseudoJet > &particles)`  \n"
		"\n"
		"tell the background estimator that it has a new event, composed of the specified\n"
		"particles.  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_set_compute_rho_m", _wrap_GridMedianBackgroundEstimator_set_compute_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_compute_rho_m(bool enable)`  \n"
		"\n"
		"determine whether the automatic calculation of rho_m and sigma_m is enabled (by\n"
		"default true)  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_rho", _wrap_GridMedianBackgroundEstimator_rho, METH_VARARGS, (char *)"\n"
		"\n"
		"`rho(const PseudoJet &jet) -> double`  \n"
		"\n"
		"returns rho, the background density per unit area, locally at the position of a\n"
		"given jet.  \n"
		"\n"
		"Note that this is not const, because a user may then wish to query other aspects\n"
		"of the background that could depend on the position of the jet last used for a\n"
		"rho(jet) determination.  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_sigma", _wrap_GridMedianBackgroundEstimator_sigma, METH_VARARGS, (char *)"\n"
		"\n"
		"`sigma(const PseudoJet &jet) -> double`  \n"
		"\n"
		"returns sigma, the background fluctuations per unit area, locally at the\n"
		"position of a given jet.  \n"
		"\n"
		"As for rho(jet), it is non-const.  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_has_sigma", _wrap_GridMedianBackgroundEstimator_has_sigma, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_sigma() -> bool`  \n"
		"\n"
		"returns true if this background estimator has support for determination of sigma  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_rho_m", _wrap_GridMedianBackgroundEstimator_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`rho_m(const PseudoJet &jet) -> double`  \n"
		"\n"
		"Returns rho_m locally at the jet position. As for rho(jet), it is non-const.  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_sigma_m", _wrap_GridMedianBackgroundEstimator_sigma_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`sigma_m(const PseudoJet &jet) -> double`  \n"
		"\n"
		"Returns sigma_m locally at the jet position. As for rho(jet), it is non-const.  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_has_rho_m", _wrap_GridMedianBackgroundEstimator_has_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`has_rho_m() const -> bool`  \n"
		"\n"
		"Returns true if this background estimator has support for determination of\n"
		"rho_m.  \n"
		"\n"
		"Note that support for sigma_m is automatic if one has sigma and rho_m support.  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_mean_area", _wrap_GridMedianBackgroundEstimator_mean_area, METH_VARARGS, (char *)"\n"
		"\n"
		"`mean_area() const -> double`  \n"
		"\n"
		"returns the area of the grid cells (all identical, but referred to as \"mean\"\n"
		"area for uniformity with JetMedianBGE).  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_set_rescaling_class", _wrap_GridMedianBackgroundEstimator_set_rescaling_class, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_rescaling_class(const FunctionOfPseudoJet< double > *rescaling_class)`  \n"
		"\n"
		"Set a pointer to a class that calculates the rescaling factor as a function of\n"
		"the jet (position).  \n"
		"\n"
		"Note that the rescaling factor is used both in the determination of the\n"
		"\"global\" rho (the pt/A of each jet is divided by this factor) and when asking\n"
		"for a local rho (the result is multiplied by this factor).  \n"
		"\n"
		"The BackgroundRescalingYPolynomial class can be used to get a rescaling that\n"
		"depends just on rapidity.  \n"
		"\n"
		"Note that this has to be called BEFORE any attempt to do an actual computation  \n"
		"\n"
		"The same profile will be used for both pt and mt (this is probabaly a good\n"
		"approximation since the particle density changes is what dominates the rapidity\n"
		"profile)  \n"
		"\n"
		""},
	 { (char *)"GridMedianBackgroundEstimator_description", _wrap_GridMedianBackgroundEstimator_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"returns a textual description of the background estimator  \n"
		"\n"
		""},
	 { (char *)"delete_GridMedianBackgroundEstimator", _wrap_delete_GridMedianBackgroundEstimator, METH_VARARGS, NULL},
	 { (char *)"GridMedianBackgroundEstimator_swigregister", GridMedianBackgroundEstimator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Subtractor", _wrap_new_Subtractor, METH_VARARGS, (char *)"\n"
		"\n"
		"`Subtractor()`  \n"
		"\n"
		"default constructor  \n"
		"\n"
		""},
	 { (char *)"delete_Subtractor", _wrap_delete_Subtractor, METH_VARARGS, (char *)"\n"
		"\n"
		"`~Subtractor()`  \n"
		"\n"
		"default dtor  \n"
		"\n"
		""},
	 { (char *)"Subtractor_set_defaults", _wrap_Subtractor_set_defaults, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_defaults()`  \n"
		"\n"
		"reset all parameters to default values  \n"
		"\n"
		"Note: by default, the rho_m term is not included and the safety test for the\n"
		"mass is not done. This is mostly for backwards compatibility with FastJet 3.0\n"
		"and is highly likely to change in a future release of FastJet  \n"
		"\n"
		""},
	 { (char *)"Subtractor_set_use_rho_m", _wrap_Subtractor_set_use_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_use_rho_m(bool use_rho_m_in=true)`  \n"
		"\n"
		"when 'use_rho_m' is true, include in the subtraction the correction from rho_m,\n"
		"the purely longitudinal, particle-mass-induced component of the background\n"
		"density per unit area  \n"
		"\n"
		"Note: this will be switched off by default (for backwards compatibility with\n"
		"FastJet 3.0) but is highly likely to change in a future release of FastJet  \n"
		"\n"
		""},
	 { (char *)"Subtractor_use_rho_m", _wrap_Subtractor_use_rho_m, METH_VARARGS, (char *)"\n"
		"\n"
		"`use_rho_m() const -> bool`  \n"
		"\n"
		"returns whether or not the rho_m component is used  \n"
		"\n"
		""},
	 { (char *)"Subtractor_set_safe_mass", _wrap_Subtractor_set_safe_mass, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_safe_mass(bool safe_mass_in=true)`  \n"
		"\n"
		"when 'safe_mass' is true, ensure that the mass of the subtracted 4-vector remain\n"
		"positive  \n"
		"\n"
		"when true, if the subtracted mass is negative, we return a 4-vector with 0 mass,\n"
		"pt and phi from the subtracted 4-vector and the rapidity of the original,\n"
		"unsubtracted jet.  \n"
		"\n"
		"Note: this will be switched off by default (for backwards compatibility with\n"
		"FastJet 3.0) but is highly likely to change in a future release of FastJet  \n"
		"\n"
		""},
	 { (char *)"Subtractor_safe_mass", _wrap_Subtractor_safe_mass, METH_VARARGS, (char *)"\n"
		"\n"
		"`safe_mass() const -> bool`  \n"
		"\n"
		"returns whether or not safety tests on the mass are included  \n"
		"\n"
		""},
	 { (char *)"Subtractor_set_known_selectors", _wrap_Subtractor_set_known_selectors, METH_VARARGS, (char *)"\n"
		"\n"
		"`set_known_selectors(const Selector &sel_known_vertex, const Selector\n"
		"    &sel_leading_vertex)`  \n"
		"\n"
		"This is mostly intended for cherge-hadron-subtracted type of events where we\n"
		"wich to use vertex information to improve the subtraction.  \n"
		"\n"
		"Given the following parameters:  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `sel_known_vertex` :  \n"
		"    selects the particles with a known vertex origin  \n"
		"* `sel_leading_vertex` :  \n"
		"    amongst the particles with a known vertex origin, select those coming from\n"
		"    the leading vertex Momentum identified as coming from the leading vertex\n"
		"    will be kept, momentum identified as coming from a non-leading vertex will\n"
		"    be eliminated and a regular area-median subtraction will be applied on the\n"
		"    4-vector sum of the particles with unknown vertex origin.  \n"
		"\n"
		"When this is set, we shall ensure that the pt of the subtracted 4-vector is at\n"
		"least the pt of the particles that are known to come from the leading vertex (if\n"
		"it fails, subtraction returns the component that is known to come from the\n"
		"leading vertex --- or, the original unsubtracted jet if it contains no particles\n"
		"from the leading vertex). Furthermore, when safe_mass() is on, we also impose a\n"
		"similar constraint on the mass of the subtracted 4-vector (if the test fails,\n"
		"the longitudinal part of the subtracted 4-vector is taken from the component\n"
		"that is known to come from the leading vertex).  \n"
		"\n"
		""},
	 { (char *)"Subtractor_result", _wrap_Subtractor_result, METH_VARARGS, (char *)"\n"
		"\n"
		"`result(const PseudoJet &jet) const -> PseudoJet`  \n"
		"\n"
		"returns a jet that's subtracted  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `jet` :  \n"
		"    the jet that is to be subtracted  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"the subtracted jet  \n"
		"\n"
		""},
	 { (char *)"Subtractor_description", _wrap_Subtractor_description, METH_VARARGS, (char *)"\n"
		"\n"
		"`description() const -> std::string`  \n"
		"\n"
		"class description  \n"
		"\n"
		""},
	 { (char *)"Subtractor___str__", _wrap_Subtractor___str__, METH_VARARGS, NULL},
	 { (char *)"Subtractor_swigregister", Subtractor_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_fastjet__BackgroundJetPtDensityTo_p_fastjet__FunctionOfPseudoJetT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< double > *)  ((fastjet::BackgroundJetPtDensity *) x));
}
static void *_p_fastjet__BackgroundJetScalarPtDensityTo_p_fastjet__FunctionOfPseudoJetT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< double > *)  ((fastjet::BackgroundJetScalarPtDensity *) x));
}
static void *_p_fastjet__BackgroundJetPtMDensityTo_p_fastjet__FunctionOfPseudoJetT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< double > *)  ((fastjet::BackgroundJetPtMDensity *) x));
}
static void *_p_fastjet__BackgroundRescalingYPolynomialTo_p_fastjet__FunctionOfPseudoJetT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< double > *)  ((fastjet::BackgroundRescalingYPolynomial *) x));
}
static void *_p_fastjet__CompositeJetStructureTo_p_fastjet__PseudoJetStructureBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::PseudoJetStructureBase *)  ((fastjet::CompositeJetStructure *) x));
}
static void *_p_fastjet__ClusterSequenceStructureTo_p_fastjet__PseudoJetStructureBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::PseudoJetStructureBase *)  ((fastjet::ClusterSequenceStructure *) x));
}
static void *_p_fastjet__FilterStructureTo_p_fastjet__PseudoJetStructureBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::PseudoJetStructureBase *) (fastjet::CompositeJetStructure *) ((fastjet::FilterStructure *) x));
}
static void *_p_fastjet__RestFrameNSubjettinessTaggerStructureTo_p_fastjet__PseudoJetStructureBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::PseudoJetStructureBase *) (fastjet::CompositeJetStructure *) ((fastjet::RestFrameNSubjettinessTaggerStructure *) x));
}
static void *_p_fastjet__JHTopTaggerStructureTo_p_fastjet__PseudoJetStructureBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::PseudoJetStructureBase *) (fastjet::CompositeJetStructure *) ((fastjet::JHTopTaggerStructure *) x));
}
static void *_p_fastjet__UserInfoPythonTo_p_fastjet__PseudoJet__UserInfoBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::PseudoJet::UserInfoBase *)  ((fastjet::UserInfoPython *) x));
}
static void *_p_fastjet__JHTopTaggerTo_p_fastjet__TopTaggerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::TopTaggerBase *)  ((fastjet::JHTopTagger *) x));
}
static void *_p_fastjet__FilterTo_p_fastjet__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Transformer *)  ((fastjet::Filter *) x));
}
static void *_p_fastjet__CASubJetTaggerTo_p_fastjet__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Transformer *)  ((fastjet::CASubJetTagger *) x));
}
static void *_p_fastjet__MassDropTaggerTo_p_fastjet__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Transformer *)  ((fastjet::MassDropTagger *) x));
}
static void *_p_fastjet__JHTopTaggerTo_p_fastjet__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Transformer *) (fastjet::TopTaggerBase *) ((fastjet::JHTopTagger *) x));
}
static void *_p_fastjet__RestFrameNSubjettinessTaggerTo_p_fastjet__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Transformer *)  ((fastjet::RestFrameNSubjettinessTagger *) x));
}
static void *_p_fastjet__SubtractorTo_p_fastjet__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Transformer *)  ((fastjet::Subtractor *) x));
}
static void *_p_fastjet__PrunerTo_p_fastjet__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Transformer *)  ((fastjet::Pruner *) x));
}
static void *_p_fastjet__TopTaggerBaseTo_p_fastjet__Transformer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Transformer *)  ((fastjet::TopTaggerBase *) x));
}
static void *_p_fastjet__SelectorWorkerPythonTo_p_fastjet__SelectorWorker(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::SelectorWorker *)  ((fastjet::SelectorWorkerPython *) x));
}
static void *_p_fastjet__JetMedianBackgroundEstimatorTo_p_fastjet__BackgroundEstimatorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::BackgroundEstimatorBase *)  ((fastjet::JetMedianBackgroundEstimator *) x));
}
static void *_p_fastjet__GridMedianBackgroundEstimatorTo_p_fastjet__BackgroundEstimatorBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::BackgroundEstimatorBase *)  ((fastjet::GridMedianBackgroundEstimator *) x));
}
static void *_p_fastjet__GridMedianBackgroundEstimatorTo_p_fastjet__RectangularGrid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::RectangularGrid *)  ((fastjet::GridMedianBackgroundEstimator *) x));
}
static void *_p_fastjet__ClusterSequencePassiveAreaTo_p_fastjet__ClusterSequence1GhostPassiveArea(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequence1GhostPassiveArea *)  ((fastjet::ClusterSequencePassiveArea *) x));
}
static void *_p_fastjet__ClusterSequence1GhostPassiveAreaTo_p_fastjet__ClusterSequenceActiveArea(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequenceActiveArea *)  ((fastjet::ClusterSequence1GhostPassiveArea *) x));
}
static void *_p_fastjet__ClusterSequencePassiveAreaTo_p_fastjet__ClusterSequenceActiveArea(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequenceActiveArea *) (fastjet::ClusterSequence1GhostPassiveArea *) ((fastjet::ClusterSequencePassiveArea *) x));
}
static void *_p_fastjet__JHTopTaggerStructureTo_p_fastjet__TopTaggerBaseStructure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::TopTaggerBaseStructure *)  ((fastjet::JHTopTaggerStructure *) x));
}
static void *_p_fastjet__FilterStructureTo_p_fastjet__CompositeJetStructure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::CompositeJetStructure *)  ((fastjet::FilterStructure *) x));
}
static void *_p_fastjet__RestFrameNSubjettinessTaggerStructureTo_p_fastjet__CompositeJetStructure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::CompositeJetStructure *)  ((fastjet::RestFrameNSubjettinessTaggerStructure *) x));
}
static void *_p_fastjet__JHTopTaggerStructureTo_p_fastjet__CompositeJetStructure(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::CompositeJetStructure *)  ((fastjet::JHTopTaggerStructure *) x));
}
static void *_p_fastjet__BoostTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *)  ((fastjet::Boost *) x));
}
static void *_p_fastjet__FilterTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) (fastjet::Transformer *) ((fastjet::Filter *) x));
}
static void *_p_fastjet__CASubJetTaggerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) (fastjet::Transformer *) ((fastjet::CASubJetTagger *) x));
}
static void *_p_fastjet__MassDropTaggerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) (fastjet::Transformer *) ((fastjet::MassDropTagger *) x));
}
static void *_p_fastjet__JHTopTaggerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) (fastjet::Transformer *)(fastjet::TopTaggerBase *) ((fastjet::JHTopTagger *) x));
}
static void *_p_fastjet__RestFrameNSubjettinessTaggerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) (fastjet::Transformer *) ((fastjet::RestFrameNSubjettinessTagger *) x));
}
static void *_p_fastjet__TransformerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *)  ((fastjet::Transformer *) x));
}
static void *_p_fastjet__SubtractorTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) (fastjet::Transformer *) ((fastjet::Subtractor *) x));
}
static void *_p_fastjet__UnboostTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *)  ((fastjet::Unboost *) x));
}
static void *_p_fastjet__ReclusterTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *)  ((fastjet::Recluster *) x));
}
static void *_p_fastjet__PrunerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) (fastjet::Transformer *) ((fastjet::Pruner *) x));
}
static void *_p_fastjet__TopTaggerBaseTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *) (fastjet::Transformer *) ((fastjet::TopTaggerBase *) x));
}
static void *_p_fastjet__RectangularGridTo_p_fastjet__TilingBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::TilingBase *)  ((fastjet::RectangularGrid *) x));
}
static void *_p_fastjet__GridMedianBackgroundEstimatorTo_p_fastjet__TilingBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::TilingBase *) (fastjet::RectangularGrid *) ((fastjet::GridMedianBackgroundEstimator *) x));
}
static void *_p_fastjet__ClusterSequenceAreaTo_p_fastjet__ClusterSequence(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequence *) (fastjet::ClusterSequenceAreaBase *) ((fastjet::ClusterSequenceArea *) x));
}
static void *_p_fastjet__ClusterSequenceAreaBaseTo_p_fastjet__ClusterSequence(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequence *)  ((fastjet::ClusterSequenceAreaBase *) x));
}
static void *_p_fastjet__ClusterSequenceActiveAreaTo_p_fastjet__ClusterSequence(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequence *) (fastjet::ClusterSequenceAreaBase *) ((fastjet::ClusterSequenceActiveArea *) x));
}
static void *_p_fastjet__ClusterSequence1GhostPassiveAreaTo_p_fastjet__ClusterSequence(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequence *) (fastjet::ClusterSequenceAreaBase *)(fastjet::ClusterSequenceActiveArea *) ((fastjet::ClusterSequence1GhostPassiveArea *) x));
}
static void *_p_fastjet__ClusterSequencePassiveAreaTo_p_fastjet__ClusterSequence(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequence *) (fastjet::ClusterSequenceAreaBase *)(fastjet::ClusterSequenceActiveArea *)(fastjet::ClusterSequence1GhostPassiveArea *) ((fastjet::ClusterSequencePassiveArea *) x));
}
static void *_p_fastjet__ClusterSequenceActiveAreaExplicitGhostsTo_p_fastjet__ClusterSequence(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequence *) (fastjet::ClusterSequenceAreaBase *) ((fastjet::ClusterSequenceActiveAreaExplicitGhosts *) x));
}
static void *_p_fastjet__ClusterSequenceVoronoiAreaTo_p_fastjet__ClusterSequence(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequence *) (fastjet::ClusterSequenceAreaBase *) ((fastjet::ClusterSequenceVoronoiArea *) x));
}
static void *_p_fastjet__InternalErrorTo_p_fastjet__Error(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::Error *)  ((fastjet::InternalError *) x));
}
static void *_p_fastjet__ClusterSequenceAreaTo_p_fastjet__ClusterSequenceAreaBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequenceAreaBase *)  ((fastjet::ClusterSequenceArea *) x));
}
static void *_p_fastjet__ClusterSequenceActiveAreaTo_p_fastjet__ClusterSequenceAreaBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequenceAreaBase *)  ((fastjet::ClusterSequenceActiveArea *) x));
}
static void *_p_fastjet__ClusterSequence1GhostPassiveAreaTo_p_fastjet__ClusterSequenceAreaBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequenceAreaBase *) (fastjet::ClusterSequenceActiveArea *) ((fastjet::ClusterSequence1GhostPassiveArea *) x));
}
static void *_p_fastjet__ClusterSequencePassiveAreaTo_p_fastjet__ClusterSequenceAreaBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequenceAreaBase *) (fastjet::ClusterSequenceActiveArea *)(fastjet::ClusterSequence1GhostPassiveArea *) ((fastjet::ClusterSequencePassiveArea *) x));
}
static void *_p_fastjet__ClusterSequenceActiveAreaExplicitGhostsTo_p_fastjet__ClusterSequenceAreaBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequenceAreaBase *)  ((fastjet::ClusterSequenceActiveAreaExplicitGhosts *) x));
}
static void *_p_fastjet__ClusterSequenceVoronoiAreaTo_p_fastjet__ClusterSequenceAreaBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((fastjet::ClusterSequenceAreaBase *)  ((fastjet::ClusterSequenceVoronoiArea *) x));
}
static swig_type_info _swigt__p_StructureType = {"_p_StructureType", "StructureType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__AreaDefinition = {"_p_fastjet__AreaDefinition", "fastjet::AreaDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__BackgroundEstimatorBase = {"_p_fastjet__BackgroundEstimatorBase", "fastjet::BackgroundEstimatorBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__BackgroundJetPtDensity = {"_p_fastjet__BackgroundJetPtDensity", "fastjet::BackgroundJetPtDensity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__BackgroundJetPtMDensity = {"_p_fastjet__BackgroundJetPtMDensity", "fastjet::BackgroundJetPtMDensity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__BackgroundJetScalarPtDensity = {"_p_fastjet__BackgroundJetScalarPtDensity", "fastjet::BackgroundJetScalarPtDensity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__BackgroundRescalingYPolynomial = {"_p_fastjet__BackgroundRescalingYPolynomial", "fastjet::BackgroundRescalingYPolynomial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__BasicRandomT_double_t = {"_p_fastjet__BasicRandomT_double_t", "fastjet::BasicRandom< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__BasicRandomT_int_t = {"_p_fastjet__BasicRandomT_int_t", "fastjet::BasicRandom< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Boost = {"_p_fastjet__Boost", "fastjet::Boost *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__CASubJetTagger = {"_p_fastjet__CASubJetTagger", "fastjet::CASubJetTagger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__CASubJetTaggerStructure = {"_p_fastjet__CASubJetTaggerStructure", "fastjet::CASubJetTaggerStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequence = {"_p_fastjet__ClusterSequence", "fastjet::ClusterSequence *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequence1GhostPassiveArea = {"_p_fastjet__ClusterSequence1GhostPassiveArea", "fastjet::ClusterSequence1GhostPassiveArea *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequenceActiveArea = {"_p_fastjet__ClusterSequenceActiveArea", "fastjet::ClusterSequenceActiveArea *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequenceActiveAreaExplicitGhosts = {"_p_fastjet__ClusterSequenceActiveAreaExplicitGhosts", "fastjet::ClusterSequenceActiveAreaExplicitGhosts *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequenceArea = {"_p_fastjet__ClusterSequenceArea", "fastjet::ClusterSequenceArea *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequenceAreaBase = {"_p_fastjet__ClusterSequenceAreaBase", "fastjet::ClusterSequenceAreaBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequencePassiveArea = {"_p_fastjet__ClusterSequencePassiveArea", "fastjet::ClusterSequencePassiveArea *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequenceStructure = {"_p_fastjet__ClusterSequenceStructure", "fastjet::ClusterSequenceStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequenceVoronoiArea = {"_p_fastjet__ClusterSequenceVoronoiArea", "fastjet::ClusterSequenceVoronoiArea *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__ClusterSequence__Extras = {"_p_fastjet__ClusterSequence__Extras", "fastjet::ClusterSequence::Extras *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__CompositeJetStructure = {"_p_fastjet__CompositeJetStructure", "fastjet::CompositeJetStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Error = {"_p_fastjet__Error", "fastjet::Error *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Filter = {"_p_fastjet__Filter", "fastjet::Filter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__FilterStructure = {"_p_fastjet__FilterStructure", "fastjet::FilterStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__FunctionOfPseudoJetT_double_t = {"_p_fastjet__FunctionOfPseudoJetT_double_t", "fastjet::FunctionOfPseudoJet< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t = {"_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t", "fastjet::FunctionOfPseudoJet< fastjet::PseudoJet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__GhostedAreaSpec = {"_p_fastjet__GhostedAreaSpec", "fastjet::GhostedAreaSpec *|fastjet::ActiveAreaSpec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__GridMedianBackgroundEstimator = {"_p_fastjet__GridMedianBackgroundEstimator", "fastjet::GridMedianBackgroundEstimator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__IndexedSortHelper = {"_p_fastjet__IndexedSortHelper", "fastjet::IndexedSortHelper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__InternalError = {"_p_fastjet__InternalError", "fastjet::InternalError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JHTopTagger = {"_p_fastjet__JHTopTagger", "fastjet::JHTopTagger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JHTopTaggerStructure = {"_p_fastjet__JHTopTaggerStructure", "fastjet::JHTopTaggerStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JetAlgorithm = {"_p_fastjet__JetAlgorithm", "enum fastjet::JetAlgorithm *|fastjet::JetFinder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JetDefinition = {"_p_fastjet__JetDefinition", "fastjet::JetDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JetDefinition__Plugin = {"_p_fastjet__JetDefinition__Plugin", "fastjet::JetDefinition::Plugin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JetDefinition__Recombiner = {"_p_fastjet__JetDefinition__Recombiner", "fastjet::JetDefinition::Recombiner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__JetMedianBackgroundEstimator = {"_p_fastjet__JetMedianBackgroundEstimator", "fastjet::JetMedianBackgroundEstimator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__LimitedWarning = {"_p_fastjet__LimitedWarning", "fastjet::LimitedWarning *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__MassDropTagger = {"_p_fastjet__MassDropTagger", "fastjet::MassDropTagger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__MassDropTaggerStructure = {"_p_fastjet__MassDropTaggerStructure", "fastjet::MassDropTaggerStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Pruner = {"_p_fastjet__Pruner", "fastjet::Pruner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__PrunerStructure = {"_p_fastjet__PrunerStructure", "fastjet::PrunerStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__PruningPlugin = {"_p_fastjet__PruningPlugin", "fastjet::PruningPlugin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__PruningRecombiner = {"_p_fastjet__PruningRecombiner", "fastjet::PruningRecombiner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__PseudoJet = {"_p_fastjet__PseudoJet", "std::vector< fastjet::PseudoJet >::value_type *|fastjet::PseudoJet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__PseudoJetStructureBase = {"_p_fastjet__PseudoJetStructureBase", "fastjet::PseudoJetStructureBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__PseudoJet__UserInfoBase = {"_p_fastjet__PseudoJet__UserInfoBase", "fastjet::PseudoJet::UserInfoBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__RangeDefinition = {"_p_fastjet__RangeDefinition", "fastjet::RangeDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Recluster = {"_p_fastjet__Recluster", "fastjet::Recluster *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__RecombinerPython = {"_p_fastjet__RecombinerPython", "fastjet::RecombinerPython *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__RectangularGrid = {"_p_fastjet__RectangularGrid", "fastjet::RectangularGrid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__RestFrameNSubjettinessTagger = {"_p_fastjet__RestFrameNSubjettinessTagger", "fastjet::RestFrameNSubjettinessTagger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__RestFrameNSubjettinessTaggerStructure = {"_p_fastjet__RestFrameNSubjettinessTaggerStructure", "fastjet::RestFrameNSubjettinessTaggerStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Selector = {"_p_fastjet__Selector", "fastjet::Selector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__SelectorWorker = {"_p_fastjet__SelectorWorker", "fastjet::SelectorWorker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__SelectorWorkerPython = {"_p_fastjet__SelectorWorkerPython", "fastjet::SelectorWorkerPython *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t = {"_p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t", "fastjet::SharedPtr< fastjet::PseudoJetStructureBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t = {"_p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t", "fastjet::SharedPtr< fastjet::PseudoJet::UserInfoBase > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t = {"_p_fastjet__SharedPtrT_fastjet__SelectorWorker_t", "fastjet::SharedPtr< fastjet::SelectorWorker > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Subtractor = {"_p_fastjet__Subtractor", "fastjet::Subtractor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__TilingBase = {"_p_fastjet__TilingBase", "fastjet::TilingBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__TopTaggerBase = {"_p_fastjet__TopTaggerBase", "fastjet::TopTaggerBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__TopTaggerBaseStructure = {"_p_fastjet__TopTaggerBaseStructure", "fastjet::TopTaggerBaseStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Transformer = {"_p_fastjet__Transformer", "fastjet::Transformer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__Unboost = {"_p_fastjet__Unboost", "fastjet::Unboost *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__UserInfoPython = {"_p_fastjet__UserInfoPython", "fastjet::UserInfoPython *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet__VoronoiAreaSpec = {"_p_fastjet__VoronoiAreaSpec", "fastjet::VoronoiAreaSpec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fastjet___NoInfo = {"_p_fastjet___NoInfo", "fastjet::_NoInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_fastjet__PseudoJet = {"_p_p_fastjet__PseudoJet", "fastjet::PseudoJet **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_fastjet__PseudoJet_t = {"_p_std__allocatorT_fastjet__PseudoJet_t", "std::allocator< fastjet::PseudoJet > *|std::vector< fastjet::PseudoJet >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__valarrayT_double_t = {"_p_std__valarrayT_double_t", "std::valarray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t = {"_p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t", "std::vector< fastjet::ClusterSequence::history_element,std::allocator< fastjet::ClusterSequence::history_element > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t = {"_p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t", "std::vector< fastjet::PseudoJet const *,std::allocator< fastjet::PseudoJet const * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t = {"_p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t", "std::vector< fastjet::PseudoJet,std::allocator< fastjet::PseudoJet > > *|std::vector< fastjet::PseudoJet > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_StructureType,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_fastjet__AreaDefinition,
  &_swigt__p_fastjet__BackgroundEstimatorBase,
  &_swigt__p_fastjet__BackgroundJetPtDensity,
  &_swigt__p_fastjet__BackgroundJetPtMDensity,
  &_swigt__p_fastjet__BackgroundJetScalarPtDensity,
  &_swigt__p_fastjet__BackgroundRescalingYPolynomial,
  &_swigt__p_fastjet__BasicRandomT_double_t,
  &_swigt__p_fastjet__BasicRandomT_int_t,
  &_swigt__p_fastjet__Boost,
  &_swigt__p_fastjet__CASubJetTagger,
  &_swigt__p_fastjet__CASubJetTaggerStructure,
  &_swigt__p_fastjet__ClusterSequence,
  &_swigt__p_fastjet__ClusterSequence1GhostPassiveArea,
  &_swigt__p_fastjet__ClusterSequenceActiveArea,
  &_swigt__p_fastjet__ClusterSequenceActiveAreaExplicitGhosts,
  &_swigt__p_fastjet__ClusterSequenceArea,
  &_swigt__p_fastjet__ClusterSequenceAreaBase,
  &_swigt__p_fastjet__ClusterSequencePassiveArea,
  &_swigt__p_fastjet__ClusterSequenceStructure,
  &_swigt__p_fastjet__ClusterSequenceVoronoiArea,
  &_swigt__p_fastjet__ClusterSequence__Extras,
  &_swigt__p_fastjet__CompositeJetStructure,
  &_swigt__p_fastjet__Error,
  &_swigt__p_fastjet__Filter,
  &_swigt__p_fastjet__FilterStructure,
  &_swigt__p_fastjet__FunctionOfPseudoJetT_double_t,
  &_swigt__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t,
  &_swigt__p_fastjet__GhostedAreaSpec,
  &_swigt__p_fastjet__GridMedianBackgroundEstimator,
  &_swigt__p_fastjet__IndexedSortHelper,
  &_swigt__p_fastjet__InternalError,
  &_swigt__p_fastjet__JHTopTagger,
  &_swigt__p_fastjet__JHTopTaggerStructure,
  &_swigt__p_fastjet__JetAlgorithm,
  &_swigt__p_fastjet__JetDefinition,
  &_swigt__p_fastjet__JetDefinition__Plugin,
  &_swigt__p_fastjet__JetDefinition__Recombiner,
  &_swigt__p_fastjet__JetMedianBackgroundEstimator,
  &_swigt__p_fastjet__LimitedWarning,
  &_swigt__p_fastjet__MassDropTagger,
  &_swigt__p_fastjet__MassDropTaggerStructure,
  &_swigt__p_fastjet__Pruner,
  &_swigt__p_fastjet__PrunerStructure,
  &_swigt__p_fastjet__PruningPlugin,
  &_swigt__p_fastjet__PruningRecombiner,
  &_swigt__p_fastjet__PseudoJet,
  &_swigt__p_fastjet__PseudoJetStructureBase,
  &_swigt__p_fastjet__PseudoJet__UserInfoBase,
  &_swigt__p_fastjet__RangeDefinition,
  &_swigt__p_fastjet__Recluster,
  &_swigt__p_fastjet__RecombinerPython,
  &_swigt__p_fastjet__RectangularGrid,
  &_swigt__p_fastjet__RestFrameNSubjettinessTagger,
  &_swigt__p_fastjet__RestFrameNSubjettinessTaggerStructure,
  &_swigt__p_fastjet__Selector,
  &_swigt__p_fastjet__SelectorWorker,
  &_swigt__p_fastjet__SelectorWorkerPython,
  &_swigt__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t,
  &_swigt__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t,
  &_swigt__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t,
  &_swigt__p_fastjet__Subtractor,
  &_swigt__p_fastjet__TilingBase,
  &_swigt__p_fastjet__TopTaggerBase,
  &_swigt__p_fastjet__TopTaggerBaseStructure,
  &_swigt__p_fastjet__Transformer,
  &_swigt__p_fastjet__Unboost,
  &_swigt__p_fastjet__UserInfoPython,
  &_swigt__p_fastjet__VoronoiAreaSpec,
  &_swigt__p_fastjet___NoInfo,
  &_swigt__p_int,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_fastjet__PseudoJet,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_fastjet__PseudoJet_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ostream,
  &_swigt__p_std__valarrayT_double_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t,
  &_swigt__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t,
  &_swigt__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_StructureType[] = {  {&_swigt__p_StructureType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__AreaDefinition[] = {  {&_swigt__p_fastjet__AreaDefinition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__BackgroundEstimatorBase[] = {  {&_swigt__p_fastjet__JetMedianBackgroundEstimator, _p_fastjet__JetMedianBackgroundEstimatorTo_p_fastjet__BackgroundEstimatorBase, 0, 0},  {&_swigt__p_fastjet__GridMedianBackgroundEstimator, _p_fastjet__GridMedianBackgroundEstimatorTo_p_fastjet__BackgroundEstimatorBase, 0, 0},  {&_swigt__p_fastjet__BackgroundEstimatorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__BackgroundJetPtDensity[] = {  {&_swigt__p_fastjet__BackgroundJetPtDensity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__BackgroundJetPtMDensity[] = {  {&_swigt__p_fastjet__BackgroundJetPtMDensity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__BackgroundJetScalarPtDensity[] = {  {&_swigt__p_fastjet__BackgroundJetScalarPtDensity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__BackgroundRescalingYPolynomial[] = {  {&_swigt__p_fastjet__BackgroundRescalingYPolynomial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__BasicRandomT_double_t[] = {  {&_swigt__p_fastjet__BasicRandomT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__BasicRandomT_int_t[] = {  {&_swigt__p_fastjet__BasicRandomT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Boost[] = {  {&_swigt__p_fastjet__Boost, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__CASubJetTagger[] = {  {&_swigt__p_fastjet__CASubJetTagger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__CASubJetTaggerStructure[] = {  {&_swigt__p_fastjet__CASubJetTaggerStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequence[] = {  {&_swigt__p_fastjet__ClusterSequenceArea, _p_fastjet__ClusterSequenceAreaTo_p_fastjet__ClusterSequence, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, _p_fastjet__ClusterSequenceActiveAreaExplicitGhostsTo_p_fastjet__ClusterSequence, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceAreaBase, _p_fastjet__ClusterSequenceAreaBaseTo_p_fastjet__ClusterSequence, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceActiveArea, _p_fastjet__ClusterSequenceActiveAreaTo_p_fastjet__ClusterSequence, 0, 0},  {&_swigt__p_fastjet__ClusterSequence1GhostPassiveArea, _p_fastjet__ClusterSequence1GhostPassiveAreaTo_p_fastjet__ClusterSequence, 0, 0},  {&_swigt__p_fastjet__ClusterSequencePassiveArea, _p_fastjet__ClusterSequencePassiveAreaTo_p_fastjet__ClusterSequence, 0, 0},  {&_swigt__p_fastjet__ClusterSequence, 0, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceVoronoiArea, _p_fastjet__ClusterSequenceVoronoiAreaTo_p_fastjet__ClusterSequence, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequence1GhostPassiveArea[] = {  {&_swigt__p_fastjet__ClusterSequence1GhostPassiveArea, 0, 0, 0},  {&_swigt__p_fastjet__ClusterSequencePassiveArea, _p_fastjet__ClusterSequencePassiveAreaTo_p_fastjet__ClusterSequence1GhostPassiveArea, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequenceActiveArea[] = {  {&_swigt__p_fastjet__ClusterSequenceActiveArea, 0, 0, 0},  {&_swigt__p_fastjet__ClusterSequence1GhostPassiveArea, _p_fastjet__ClusterSequence1GhostPassiveAreaTo_p_fastjet__ClusterSequenceActiveArea, 0, 0},  {&_swigt__p_fastjet__ClusterSequencePassiveArea, _p_fastjet__ClusterSequencePassiveAreaTo_p_fastjet__ClusterSequenceActiveArea, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequenceActiveAreaExplicitGhosts[] = {  {&_swigt__p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequenceArea[] = {  {&_swigt__p_fastjet__ClusterSequenceArea, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequenceAreaBase[] = {  {&_swigt__p_fastjet__ClusterSequenceArea, _p_fastjet__ClusterSequenceAreaTo_p_fastjet__ClusterSequenceAreaBase, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceActiveAreaExplicitGhosts, _p_fastjet__ClusterSequenceActiveAreaExplicitGhostsTo_p_fastjet__ClusterSequenceAreaBase, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceAreaBase, 0, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceActiveArea, _p_fastjet__ClusterSequenceActiveAreaTo_p_fastjet__ClusterSequenceAreaBase, 0, 0},  {&_swigt__p_fastjet__ClusterSequence1GhostPassiveArea, _p_fastjet__ClusterSequence1GhostPassiveAreaTo_p_fastjet__ClusterSequenceAreaBase, 0, 0},  {&_swigt__p_fastjet__ClusterSequencePassiveArea, _p_fastjet__ClusterSequencePassiveAreaTo_p_fastjet__ClusterSequenceAreaBase, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceVoronoiArea, _p_fastjet__ClusterSequenceVoronoiAreaTo_p_fastjet__ClusterSequenceAreaBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequencePassiveArea[] = {  {&_swigt__p_fastjet__ClusterSequencePassiveArea, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequenceStructure[] = {  {&_swigt__p_fastjet__ClusterSequenceStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequenceVoronoiArea[] = {  {&_swigt__p_fastjet__ClusterSequenceVoronoiArea, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__ClusterSequence__Extras[] = {  {&_swigt__p_fastjet__ClusterSequence__Extras, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__CompositeJetStructure[] = {  {&_swigt__p_fastjet__CompositeJetStructure, 0, 0, 0},  {&_swigt__p_fastjet__FilterStructure, _p_fastjet__FilterStructureTo_p_fastjet__CompositeJetStructure, 0, 0},  {&_swigt__p_fastjet__RestFrameNSubjettinessTaggerStructure, _p_fastjet__RestFrameNSubjettinessTaggerStructureTo_p_fastjet__CompositeJetStructure, 0, 0},  {&_swigt__p_fastjet__JHTopTaggerStructure, _p_fastjet__JHTopTaggerStructureTo_p_fastjet__CompositeJetStructure, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Error[] = {  {&_swigt__p_fastjet__InternalError, _p_fastjet__InternalErrorTo_p_fastjet__Error, 0, 0},  {&_swigt__p_fastjet__Error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Filter[] = {  {&_swigt__p_fastjet__Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__FilterStructure[] = {  {&_swigt__p_fastjet__FilterStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__FunctionOfPseudoJetT_double_t[] = {  {&_swigt__p_fastjet__FunctionOfPseudoJetT_double_t, 0, 0, 0},  {&_swigt__p_fastjet__BackgroundJetPtDensity, _p_fastjet__BackgroundJetPtDensityTo_p_fastjet__FunctionOfPseudoJetT_double_t, 0, 0},  {&_swigt__p_fastjet__BackgroundJetScalarPtDensity, _p_fastjet__BackgroundJetScalarPtDensityTo_p_fastjet__FunctionOfPseudoJetT_double_t, 0, 0},  {&_swigt__p_fastjet__BackgroundJetPtMDensity, _p_fastjet__BackgroundJetPtMDensityTo_p_fastjet__FunctionOfPseudoJetT_double_t, 0, 0},  {&_swigt__p_fastjet__BackgroundRescalingYPolynomial, _p_fastjet__BackgroundRescalingYPolynomialTo_p_fastjet__FunctionOfPseudoJetT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t[] = {  {&_swigt__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0, 0},  {&_swigt__p_fastjet__Pruner, _p_fastjet__PrunerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__Boost, _p_fastjet__BoostTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__CASubJetTagger, _p_fastjet__CASubJetTaggerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__MassDropTagger, _p_fastjet__MassDropTaggerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__JHTopTagger, _p_fastjet__JHTopTaggerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__Filter, _p_fastjet__FilterTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__RestFrameNSubjettinessTagger, _p_fastjet__RestFrameNSubjettinessTaggerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__Transformer, _p_fastjet__TransformerTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__Subtractor, _p_fastjet__SubtractorTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__TopTaggerBase, _p_fastjet__TopTaggerBaseTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__Unboost, _p_fastjet__UnboostTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},  {&_swigt__p_fastjet__Recluster, _p_fastjet__ReclusterTo_p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__GhostedAreaSpec[] = {  {&_swigt__p_fastjet__GhostedAreaSpec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__GridMedianBackgroundEstimator[] = {  {&_swigt__p_fastjet__GridMedianBackgroundEstimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__IndexedSortHelper[] = {  {&_swigt__p_fastjet__IndexedSortHelper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__InternalError[] = {  {&_swigt__p_fastjet__InternalError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JHTopTagger[] = {  {&_swigt__p_fastjet__JHTopTagger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JHTopTaggerStructure[] = {  {&_swigt__p_fastjet__JHTopTaggerStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JetAlgorithm[] = {  {&_swigt__p_fastjet__JetAlgorithm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JetDefinition[] = {  {&_swigt__p_fastjet__JetDefinition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JetDefinition__Plugin[] = {  {&_swigt__p_fastjet__JetDefinition__Plugin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JetDefinition__Recombiner[] = {  {&_swigt__p_fastjet__JetDefinition__Recombiner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__JetMedianBackgroundEstimator[] = {  {&_swigt__p_fastjet__JetMedianBackgroundEstimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__LimitedWarning[] = {  {&_swigt__p_fastjet__LimitedWarning, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__MassDropTagger[] = {  {&_swigt__p_fastjet__MassDropTagger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__MassDropTaggerStructure[] = {  {&_swigt__p_fastjet__MassDropTaggerStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Pruner[] = {  {&_swigt__p_fastjet__Pruner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__PrunerStructure[] = {  {&_swigt__p_fastjet__PrunerStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__PruningPlugin[] = {  {&_swigt__p_fastjet__PruningPlugin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__PruningRecombiner[] = {  {&_swigt__p_fastjet__PruningRecombiner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__PseudoJet[] = {  {&_swigt__p_fastjet__PseudoJet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__PseudoJetStructureBase[] = {  {&_swigt__p_fastjet__PseudoJetStructureBase, 0, 0, 0},  {&_swigt__p_fastjet__CompositeJetStructure, _p_fastjet__CompositeJetStructureTo_p_fastjet__PseudoJetStructureBase, 0, 0},  {&_swigt__p_fastjet__FilterStructure, _p_fastjet__FilterStructureTo_p_fastjet__PseudoJetStructureBase, 0, 0},  {&_swigt__p_fastjet__RestFrameNSubjettinessTaggerStructure, _p_fastjet__RestFrameNSubjettinessTaggerStructureTo_p_fastjet__PseudoJetStructureBase, 0, 0},  {&_swigt__p_fastjet__JHTopTaggerStructure, _p_fastjet__JHTopTaggerStructureTo_p_fastjet__PseudoJetStructureBase, 0, 0},  {&_swigt__p_fastjet__ClusterSequenceStructure, _p_fastjet__ClusterSequenceStructureTo_p_fastjet__PseudoJetStructureBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__PseudoJet__UserInfoBase[] = {  {&_swigt__p_fastjet__UserInfoPython, _p_fastjet__UserInfoPythonTo_p_fastjet__PseudoJet__UserInfoBase, 0, 0},  {&_swigt__p_fastjet__PseudoJet__UserInfoBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__RangeDefinition[] = {  {&_swigt__p_fastjet__RangeDefinition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Recluster[] = {  {&_swigt__p_fastjet__Recluster, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__RecombinerPython[] = {  {&_swigt__p_fastjet__RecombinerPython, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__RectangularGrid[] = {  {&_swigt__p_fastjet__RectangularGrid, 0, 0, 0},  {&_swigt__p_fastjet__GridMedianBackgroundEstimator, _p_fastjet__GridMedianBackgroundEstimatorTo_p_fastjet__RectangularGrid, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__RestFrameNSubjettinessTagger[] = {  {&_swigt__p_fastjet__RestFrameNSubjettinessTagger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__RestFrameNSubjettinessTaggerStructure[] = {  {&_swigt__p_fastjet__RestFrameNSubjettinessTaggerStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Selector[] = {  {&_swigt__p_fastjet__Selector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__SelectorWorker[] = {  {&_swigt__p_fastjet__SelectorWorkerPython, _p_fastjet__SelectorWorkerPythonTo_p_fastjet__SelectorWorker, 0, 0},  {&_swigt__p_fastjet__SelectorWorker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__SelectorWorkerPython[] = {  {&_swigt__p_fastjet__SelectorWorkerPython, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t[] = {  {&_swigt__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t[] = {  {&_swigt__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t[] = {  {&_swigt__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Subtractor[] = {  {&_swigt__p_fastjet__Subtractor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__TilingBase[] = {  {&_swigt__p_fastjet__TilingBase, 0, 0, 0},  {&_swigt__p_fastjet__RectangularGrid, _p_fastjet__RectangularGridTo_p_fastjet__TilingBase, 0, 0},  {&_swigt__p_fastjet__GridMedianBackgroundEstimator, _p_fastjet__GridMedianBackgroundEstimatorTo_p_fastjet__TilingBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__TopTaggerBase[] = {  {&_swigt__p_fastjet__JHTopTagger, _p_fastjet__JHTopTaggerTo_p_fastjet__TopTaggerBase, 0, 0},  {&_swigt__p_fastjet__TopTaggerBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__TopTaggerBaseStructure[] = {  {&_swigt__p_fastjet__TopTaggerBaseStructure, 0, 0, 0},  {&_swigt__p_fastjet__JHTopTaggerStructure, _p_fastjet__JHTopTaggerStructureTo_p_fastjet__TopTaggerBaseStructure, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Transformer[] = {  {&_swigt__p_fastjet__Pruner, _p_fastjet__PrunerTo_p_fastjet__Transformer, 0, 0},  {&_swigt__p_fastjet__CASubJetTagger, _p_fastjet__CASubJetTaggerTo_p_fastjet__Transformer, 0, 0},  {&_swigt__p_fastjet__MassDropTagger, _p_fastjet__MassDropTaggerTo_p_fastjet__Transformer, 0, 0},  {&_swigt__p_fastjet__JHTopTagger, _p_fastjet__JHTopTaggerTo_p_fastjet__Transformer, 0, 0},  {&_swigt__p_fastjet__Filter, _p_fastjet__FilterTo_p_fastjet__Transformer, 0, 0},  {&_swigt__p_fastjet__RestFrameNSubjettinessTagger, _p_fastjet__RestFrameNSubjettinessTaggerTo_p_fastjet__Transformer, 0, 0},  {&_swigt__p_fastjet__Transformer, 0, 0, 0},  {&_swigt__p_fastjet__Subtractor, _p_fastjet__SubtractorTo_p_fastjet__Transformer, 0, 0},  {&_swigt__p_fastjet__TopTaggerBase, _p_fastjet__TopTaggerBaseTo_p_fastjet__Transformer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__Unboost[] = {  {&_swigt__p_fastjet__Unboost, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__UserInfoPython[] = {  {&_swigt__p_fastjet__UserInfoPython, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet__VoronoiAreaSpec[] = {  {&_swigt__p_fastjet__VoronoiAreaSpec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fastjet___NoInfo[] = {  {&_swigt__p_fastjet___NoInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_fastjet__PseudoJet[] = {  {&_swigt__p_p_fastjet__PseudoJet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_fastjet__PseudoJet_t[] = {  {&_swigt__p_std__allocatorT_fastjet__PseudoJet_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayT_double_t[] = {  {&_swigt__p_std__valarrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t[] = {  {&_swigt__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t[] = {  {&_swigt__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t[] = {  {&_swigt__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_StructureType,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_fastjet__AreaDefinition,
  _swigc__p_fastjet__BackgroundEstimatorBase,
  _swigc__p_fastjet__BackgroundJetPtDensity,
  _swigc__p_fastjet__BackgroundJetPtMDensity,
  _swigc__p_fastjet__BackgroundJetScalarPtDensity,
  _swigc__p_fastjet__BackgroundRescalingYPolynomial,
  _swigc__p_fastjet__BasicRandomT_double_t,
  _swigc__p_fastjet__BasicRandomT_int_t,
  _swigc__p_fastjet__Boost,
  _swigc__p_fastjet__CASubJetTagger,
  _swigc__p_fastjet__CASubJetTaggerStructure,
  _swigc__p_fastjet__ClusterSequence,
  _swigc__p_fastjet__ClusterSequence1GhostPassiveArea,
  _swigc__p_fastjet__ClusterSequenceActiveArea,
  _swigc__p_fastjet__ClusterSequenceActiveAreaExplicitGhosts,
  _swigc__p_fastjet__ClusterSequenceArea,
  _swigc__p_fastjet__ClusterSequenceAreaBase,
  _swigc__p_fastjet__ClusterSequencePassiveArea,
  _swigc__p_fastjet__ClusterSequenceStructure,
  _swigc__p_fastjet__ClusterSequenceVoronoiArea,
  _swigc__p_fastjet__ClusterSequence__Extras,
  _swigc__p_fastjet__CompositeJetStructure,
  _swigc__p_fastjet__Error,
  _swigc__p_fastjet__Filter,
  _swigc__p_fastjet__FilterStructure,
  _swigc__p_fastjet__FunctionOfPseudoJetT_double_t,
  _swigc__p_fastjet__FunctionOfPseudoJetT_fastjet__PseudoJet_t,
  _swigc__p_fastjet__GhostedAreaSpec,
  _swigc__p_fastjet__GridMedianBackgroundEstimator,
  _swigc__p_fastjet__IndexedSortHelper,
  _swigc__p_fastjet__InternalError,
  _swigc__p_fastjet__JHTopTagger,
  _swigc__p_fastjet__JHTopTaggerStructure,
  _swigc__p_fastjet__JetAlgorithm,
  _swigc__p_fastjet__JetDefinition,
  _swigc__p_fastjet__JetDefinition__Plugin,
  _swigc__p_fastjet__JetDefinition__Recombiner,
  _swigc__p_fastjet__JetMedianBackgroundEstimator,
  _swigc__p_fastjet__LimitedWarning,
  _swigc__p_fastjet__MassDropTagger,
  _swigc__p_fastjet__MassDropTaggerStructure,
  _swigc__p_fastjet__Pruner,
  _swigc__p_fastjet__PrunerStructure,
  _swigc__p_fastjet__PruningPlugin,
  _swigc__p_fastjet__PruningRecombiner,
  _swigc__p_fastjet__PseudoJet,
  _swigc__p_fastjet__PseudoJetStructureBase,
  _swigc__p_fastjet__PseudoJet__UserInfoBase,
  _swigc__p_fastjet__RangeDefinition,
  _swigc__p_fastjet__Recluster,
  _swigc__p_fastjet__RecombinerPython,
  _swigc__p_fastjet__RectangularGrid,
  _swigc__p_fastjet__RestFrameNSubjettinessTagger,
  _swigc__p_fastjet__RestFrameNSubjettinessTaggerStructure,
  _swigc__p_fastjet__Selector,
  _swigc__p_fastjet__SelectorWorker,
  _swigc__p_fastjet__SelectorWorkerPython,
  _swigc__p_fastjet__SharedPtrT_fastjet__PseudoJetStructureBase_t,
  _swigc__p_fastjet__SharedPtrT_fastjet__PseudoJet__UserInfoBase_t,
  _swigc__p_fastjet__SharedPtrT_fastjet__SelectorWorker_t,
  _swigc__p_fastjet__Subtractor,
  _swigc__p_fastjet__TilingBase,
  _swigc__p_fastjet__TopTaggerBase,
  _swigc__p_fastjet__TopTaggerBaseStructure,
  _swigc__p_fastjet__Transformer,
  _swigc__p_fastjet__Unboost,
  _swigc__p_fastjet__UserInfoPython,
  _swigc__p_fastjet__VoronoiAreaSpec,
  _swigc__p_fastjet___NoInfo,
  _swigc__p_int,
  _swigc__p_p_PyObject,
  _swigc__p_p_fastjet__PseudoJet,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_fastjet__PseudoJet_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ostream,
  _swigc__p_std__valarrayT_double_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_fastjet__ClusterSequence__history_element_std__allocatorT_fastjet__ClusterSequence__history_element_t_t,
  _swigc__p_std__vectorT_fastjet__PseudoJet_const_p_std__allocatorT_fastjet__PseudoJet_const_p_t_t,
  _swigc__p_std__vectorT_fastjet__PseudoJet_std__allocatorT_fastjet__PseudoJet_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "_INCLUDE_FASTJET_CONFIG_AUTO_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_DLFCN_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_EXECINFO_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_INTTYPES_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_LIBM",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_MEMORY_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_STDINT_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_STDLIB_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_STRINGS_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_STRING_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_SYS_STAT_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_SYS_TYPES_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_HAVE_UNISTD_H",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_LT_OBJDIR",SWIG_FromCharPtr(".libs/"));
  SWIG_Python_SetConstant(d, "FASTJET_PACKAGE",SWIG_FromCharPtr("fastjet"));
  SWIG_Python_SetConstant(d, "FASTJET_PACKAGE_BUGREPORT",SWIG_FromCharPtr(""));
  SWIG_Python_SetConstant(d, "FASTJET_PACKAGE_NAME",SWIG_FromCharPtr("FastJet"));
  SWIG_Python_SetConstant(d, "FASTJET_PACKAGE_STRING",SWIG_FromCharPtr("FastJet 3.3.0"));
  SWIG_Python_SetConstant(d, "FASTJET_PACKAGE_TARNAME",SWIG_FromCharPtr("fastjet"));
  SWIG_Python_SetConstant(d, "FASTJET_PACKAGE_VERSION",SWIG_FromCharPtr("3.3.0"));
  SWIG_Python_SetConstant(d, "FASTJET_STDC_HEADERS",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "FASTJET_VERSION",SWIG_FromCharPtr("3.3.0"));
  SWIG_Python_SetConstant(d, "FASTJET_VERSION_MAJOR",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "FASTJET_VERSION_MINOR",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "FASTJET_VERSION_NUMBER",SWIG_From_int(static_cast< int >(30300)));
  SWIG_Python_SetConstant(d, "FASTJET_VERSION_PATCHLEVEL",SWIG_From_int(static_cast< int >(0)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"pi",Swig_var_pi_get, Swig_var_pi_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"twopi",Swig_var_twopi_get, Swig_var_twopi_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"pisq",Swig_var_pisq_get, Swig_var_pisq_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"zeta2",Swig_var_zeta2_get, Swig_var_zeta2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"zeta3",Swig_var_zeta3_get, Swig_var_zeta3_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"eulergamma",Swig_var_eulergamma_get, Swig_var_eulergamma_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ln2",Swig_var_ln2_get, Swig_var_ln2_set);
  SWIG_Python_SetConstant(d, "__FASTJET_BASICRANDOM_HH__",SWIG_From_int(static_cast< int >(1)));
  SWIG_addvarlink(SWIG_globals(),(char*)"_G_random_int",Swig_var__G_random_int_get, Swig_var__G_random_int_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_G_random_double",Swig_var__G_random_double_get, Swig_var__G_random_double_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MaxRap",Swig_var_MaxRap_get, Swig_var_MaxRap_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"pseudojet_invalid_phi",Swig_var_pseudojet_invalid_phi_get, Swig_var_pseudojet_invalid_phi_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"pseudojet_invalid_rap",Swig_var_pseudojet_invalid_rap_get, Swig_var_pseudojet_invalid_rap_set);
  SWIG_Python_SetConstant(d, "PseudoJet_X",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::X)));
  SWIG_Python_SetConstant(d, "PseudoJet_Y",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::Y)));
  SWIG_Python_SetConstant(d, "PseudoJet_Z",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::Z)));
  SWIG_Python_SetConstant(d, "PseudoJet_T",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::T)));
  SWIG_Python_SetConstant(d, "PseudoJet_NUM_COORDINATES",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::NUM_COORDINATES)));
  SWIG_Python_SetConstant(d, "PseudoJet_SIZE",SWIG_From_int(static_cast< int >(fastjet::PseudoJet::SIZE)));
  SWIG_Python_SetConstant(d, "N2MHTLazy9AntiKtSeparateGhosts",SWIG_From_int(static_cast< int >(fastjet::N2MHTLazy9AntiKtSeparateGhosts)));
  SWIG_Python_SetConstant(d, "N2MHTLazy9",SWIG_From_int(static_cast< int >(fastjet::N2MHTLazy9)));
  SWIG_Python_SetConstant(d, "N2MHTLazy25",SWIG_From_int(static_cast< int >(fastjet::N2MHTLazy25)));
  SWIG_Python_SetConstant(d, "N2MHTLazy9Alt",SWIG_From_int(static_cast< int >(fastjet::N2MHTLazy9Alt)));
  SWIG_Python_SetConstant(d, "N2MinHeapTiled",SWIG_From_int(static_cast< int >(fastjet::N2MinHeapTiled)));
  SWIG_Python_SetConstant(d, "N2Tiled",SWIG_From_int(static_cast< int >(fastjet::N2Tiled)));
  SWIG_Python_SetConstant(d, "N2PoorTiled",SWIG_From_int(static_cast< int >(fastjet::N2PoorTiled)));
  SWIG_Python_SetConstant(d, "N2Plain",SWIG_From_int(static_cast< int >(fastjet::N2Plain)));
  SWIG_Python_SetConstant(d, "N3Dumb",SWIG_From_int(static_cast< int >(fastjet::N3Dumb)));
  SWIG_Python_SetConstant(d, "Best",SWIG_From_int(static_cast< int >(fastjet::Best)));
  SWIG_Python_SetConstant(d, "NlnN",SWIG_From_int(static_cast< int >(fastjet::NlnN)));
  SWIG_Python_SetConstant(d, "NlnN3pi",SWIG_From_int(static_cast< int >(fastjet::NlnN3pi)));
  SWIG_Python_SetConstant(d, "NlnN4pi",SWIG_From_int(static_cast< int >(fastjet::NlnN4pi)));
  SWIG_Python_SetConstant(d, "NlnNCam4pi",SWIG_From_int(static_cast< int >(fastjet::NlnNCam4pi)));
  SWIG_Python_SetConstant(d, "NlnNCam2pi2R",SWIG_From_int(static_cast< int >(fastjet::NlnNCam2pi2R)));
  SWIG_Python_SetConstant(d, "NlnNCam",SWIG_From_int(static_cast< int >(fastjet::NlnNCam)));
  SWIG_Python_SetConstant(d, "BestFJ30",SWIG_From_int(static_cast< int >(fastjet::BestFJ30)));
  SWIG_Python_SetConstant(d, "plugin_strategy",SWIG_From_int(static_cast< int >(fastjet::plugin_strategy)));
  SWIG_Python_SetConstant(d, "kt_algorithm",SWIG_From_int(static_cast< int >(fastjet::kt_algorithm)));
  SWIG_Python_SetConstant(d, "cambridge_algorithm",SWIG_From_int(static_cast< int >(fastjet::cambridge_algorithm)));
  SWIG_Python_SetConstant(d, "antikt_algorithm",SWIG_From_int(static_cast< int >(fastjet::antikt_algorithm)));
  SWIG_Python_SetConstant(d, "genkt_algorithm",SWIG_From_int(static_cast< int >(fastjet::genkt_algorithm)));
  SWIG_Python_SetConstant(d, "cambridge_for_passive_algorithm",SWIG_From_int(static_cast< int >(fastjet::cambridge_for_passive_algorithm)));
  SWIG_Python_SetConstant(d, "genkt_for_passive_algorithm",SWIG_From_int(static_cast< int >(fastjet::genkt_for_passive_algorithm)));
  SWIG_Python_SetConstant(d, "ee_kt_algorithm",SWIG_From_int(static_cast< int >(fastjet::ee_kt_algorithm)));
  SWIG_Python_SetConstant(d, "ee_genkt_algorithm",SWIG_From_int(static_cast< int >(fastjet::ee_genkt_algorithm)));
  SWIG_Python_SetConstant(d, "plugin_algorithm",SWIG_From_int(static_cast< int >(fastjet::plugin_algorithm)));
  SWIG_Python_SetConstant(d, "undefined_jet_algorithm",SWIG_From_int(static_cast< int >(fastjet::undefined_jet_algorithm)));
  SWIG_addvarlink(SWIG_globals(),(char*)"aachen_algorithm",Swig_var_aachen_algorithm_get, Swig_var_aachen_algorithm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cambridge_aachen_algorithm",Swig_var_cambridge_aachen_algorithm_get, Swig_var_cambridge_aachen_algorithm_set);
  SWIG_Python_SetConstant(d, "E_scheme",SWIG_From_int(static_cast< int >(fastjet::E_scheme)));
  SWIG_Python_SetConstant(d, "pt_scheme",SWIG_From_int(static_cast< int >(fastjet::pt_scheme)));
  SWIG_Python_SetConstant(d, "pt2_scheme",SWIG_From_int(static_cast< int >(fastjet::pt2_scheme)));
  SWIG_Python_SetConstant(d, "Et_scheme",SWIG_From_int(static_cast< int >(fastjet::Et_scheme)));
  SWIG_Python_SetConstant(d, "Et2_scheme",SWIG_From_int(static_cast< int >(fastjet::Et2_scheme)));
  SWIG_Python_SetConstant(d, "BIpt_scheme",SWIG_From_int(static_cast< int >(fastjet::BIpt_scheme)));
  SWIG_Python_SetConstant(d, "BIpt2_scheme",SWIG_From_int(static_cast< int >(fastjet::BIpt2_scheme)));
  SWIG_Python_SetConstant(d, "WTA_pt_scheme",SWIG_From_int(static_cast< int >(fastjet::WTA_pt_scheme)));
  SWIG_Python_SetConstant(d, "WTA_modp_scheme",SWIG_From_int(static_cast< int >(fastjet::WTA_modp_scheme)));
  SWIG_Python_SetConstant(d, "external_scheme",SWIG_From_int(static_cast< int >(fastjet::external_scheme)));
  SWIG_addvarlink(SWIG_globals(),(char*)"JetDefinition_max_allowable_R",Swig_var_JetDefinition_max_allowable_R_get, Swig_var_JetDefinition_max_allowable_R_set);
  SWIG_Python_SetConstant(d, "ClusterSequence_Invalid",SWIG_From_int(static_cast< int >(fastjet::ClusterSequence::Invalid)));
  SWIG_Python_SetConstant(d, "ClusterSequence_InexistentParent",SWIG_From_int(static_cast< int >(fastjet::ClusterSequence::InexistentParent)));
  SWIG_Python_SetConstant(d, "ClusterSequence_BeamJet",SWIG_From_int(static_cast< int >(fastjet::ClusterSequence::BeamJet)));
  SWIG_Python_SetConstant(d, "STATIC_GENERATOR",SWIG_From_int(static_cast< int >(1)));
  SWIG_addvarlink(SWIG_globals(),(char*)"def_ghost_maxrap",Swig_var_def_ghost_maxrap_get, Swig_var_def_ghost_maxrap_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"def_repeat",Swig_var_def_repeat_get, Swig_var_def_repeat_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"def_ghost_area",Swig_var_def_ghost_area_get, Swig_var_def_ghost_area_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"def_grid_scatter",Swig_var_def_grid_scatter_get, Swig_var_def_grid_scatter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"def_pt_scatter",Swig_var_def_pt_scatter_get, Swig_var_def_pt_scatter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"def_mean_ghost_pt",Swig_var_def_mean_ghost_pt_get, Swig_var_def_mean_ghost_pt_set);
  SWIG_Python_SetConstant(d, "invalid_area",SWIG_From_int(static_cast< int >(fastjet::invalid_area)));
  SWIG_Python_SetConstant(d, "active_area",SWIG_From_int(static_cast< int >(fastjet::active_area)));
  SWIG_Python_SetConstant(d, "active_area_explicit_ghosts",SWIG_From_int(static_cast< int >(fastjet::active_area_explicit_ghosts)));
  SWIG_Python_SetConstant(d, "one_ghost_passive_area",SWIG_From_int(static_cast< int >(fastjet::one_ghost_passive_area)));
  SWIG_Python_SetConstant(d, "passive_area",SWIG_From_int(static_cast< int >(fastjet::passive_area)));
  SWIG_Python_SetConstant(d, "voronoi_area",SWIG_From_int(static_cast< int >(fastjet::voronoi_area)));
  SWIG_Python_SetConstant(d, "ClusterSequenceActiveArea_median",SWIG_From_int(static_cast< int >(fastjet::ClusterSequenceActiveArea::median)));
  SWIG_Python_SetConstant(d, "ClusterSequenceActiveArea_non_ghost_median",SWIG_From_int(static_cast< int >(fastjet::ClusterSequenceActiveArea::non_ghost_median)));
  SWIG_Python_SetConstant(d, "ClusterSequenceActiveArea_pttot_over_areatot",SWIG_From_int(static_cast< int >(fastjet::ClusterSequenceActiveArea::pttot_over_areatot)));
  SWIG_Python_SetConstant(d, "ClusterSequenceActiveArea_pttot_over_areatot_cut",SWIG_From_int(static_cast< int >(fastjet::ClusterSequenceActiveArea::pttot_over_areatot_cut)));
  SWIG_Python_SetConstant(d, "ClusterSequenceActiveArea_mean_ratio_cut",SWIG_From_int(static_cast< int >(fastjet::ClusterSequenceActiveArea::mean_ratio_cut)));
  SWIG_Python_SetConstant(d, "ClusterSequenceActiveArea_play",SWIG_From_int(static_cast< int >(fastjet::ClusterSequenceActiveArea::play)));
  SWIG_Python_SetConstant(d, "ClusterSequenceActiveArea_median_4vector",SWIG_From_int(static_cast< int >(fastjet::ClusterSequenceActiveArea::median_4vector)));
  SWIG_Python_SetConstant(d, "Recluster_keep_only_hardest",SWIG_From_int(static_cast< int >(fastjet::Recluster::keep_only_hardest)));
  SWIG_Python_SetConstant(d, "Recluster_keep_all",SWIG_From_int(static_cast< int >(fastjet::Recluster::keep_all)));
  SWIG_Python_SetConstant(d, "CASubJetTagger_kt2_distance",SWIG_From_int(static_cast< int >(fastjet::CASubJetTagger::kt2_distance)));
  SWIG_Python_SetConstant(d, "CASubJetTagger_jade_distance",SWIG_From_int(static_cast< int >(fastjet::CASubJetTagger::jade_distance)));
  SWIG_Python_SetConstant(d, "CASubJetTagger_jade2_distance",SWIG_From_int(static_cast< int >(fastjet::CASubJetTagger::jade2_distance)));
  SWIG_Python_SetConstant(d, "CASubJetTagger_plain_distance",SWIG_From_int(static_cast< int >(fastjet::CASubJetTagger::plain_distance)));
  SWIG_Python_SetConstant(d, "CASubJetTagger_mass_drop_distance",SWIG_From_int(static_cast< int >(fastjet::CASubJetTagger::mass_drop_distance)));
  SWIG_Python_SetConstant(d, "CASubJetTagger_dot_product_distance",SWIG_From_int(static_cast< int >(fastjet::CASubJetTagger::dot_product_distance)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

